"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swiper";
exports.ids = ["vendor-chunks/swiper"];
exports.modules = {

/***/ "(ssr)/../node_modules/swiper/modules/navigation.css":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/modules/navigation.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"64f3e2ab0cd4\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24uY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9uYXZpZ2F0aW9uLmNzcz8zMDM2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNjRmM2UyYWIwY2Q0XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/navigation.css\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/swiper.css":
/*!*****************************************!*\
  !*** ../node_modules/swiper/swiper.css ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"00d6101acdf3\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvc3dpcGVyLmNzcz84ZmY5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMDBkNjEwMWFjZGYzXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/swiper.css\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/a11y.mjs":
/*!***********************************************!*\
  !*** ../node_modules/swiper/modules/a11y.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ A11y)\n/* harmony export */ });\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/../node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction A11y(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        a11y: {\n            enabled: true,\n            notificationClass: \"swiper-notification\",\n            prevSlideMessage: \"Previous slide\",\n            nextSlideMessage: \"Next slide\",\n            firstSlideMessage: \"This is the first slide\",\n            lastSlideMessage: \"This is the last slide\",\n            paginationBulletMessage: \"Go to slide {{index}}\",\n            slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n            containerMessage: null,\n            containerRoleDescriptionMessage: null,\n            itemRoleDescriptionMessage: null,\n            slideRole: \"group\",\n            id: null\n        }\n    });\n    swiper.a11y = {\n        clicked: false\n    };\n    let liveRegion = null;\n    function notify(message) {\n        const notification = liveRegion;\n        if (notification.length === 0) return;\n        notification.innerHTML = \"\";\n        notification.innerHTML = message;\n    }\n    const makeElementsArray = (el)=>(Array.isArray(el) ? el : [\n            el\n        ]).filter((e)=>!!e);\n    function getRandomNumber(size) {\n        if (size === void 0) {\n            size = 16;\n        }\n        const randomChar = ()=>Math.round(16 * Math.random()).toString(16);\n        return \"x\".repeat(size).replace(/x/g, randomChar);\n    }\n    function makeElFocusable(el) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"0\");\n        });\n    }\n    function makeElNotFocusable(el) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"-1\");\n        });\n    }\n    function addElRole(el, role) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"role\", role);\n        });\n    }\n    function addElRoleDescription(el, description) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-roledescription\", description);\n        });\n    }\n    function addElControls(el, controls) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-controls\", controls);\n        });\n    }\n    function addElLabel(el, label) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-label\", label);\n        });\n    }\n    function addElId(el, id) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"id\", id);\n        });\n    }\n    function addElLive(el, live) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-live\", live);\n        });\n    }\n    function disableEl(el) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", true);\n        });\n    }\n    function enableEl(el) {\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", false);\n        });\n    }\n    function onEnterOrSpaceKey(e) {\n        if (e.keyCode !== 13 && e.keyCode !== 32) return;\n        const params = swiper.params.a11y;\n        const targetEl = e.target;\n        if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\n            if (!e.target.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass))) return;\n        }\n        if (swiper.navigation && swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl) {\n            if (!(swiper.isEnd && !swiper.params.loop)) {\n                swiper.slideNext();\n            }\n            if (swiper.isEnd) {\n                notify(params.lastSlideMessage);\n            } else {\n                notify(params.nextSlideMessage);\n            }\n        }\n        if (swiper.navigation && swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl) {\n            if (!(swiper.isBeginning && !swiper.params.loop)) {\n                swiper.slidePrev();\n            }\n            if (swiper.isBeginning) {\n                notify(params.firstSlideMessage);\n            } else {\n                notify(params.prevSlideMessage);\n            }\n        }\n        if (swiper.pagination && targetEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass))) {\n            targetEl.click();\n        }\n    }\n    function updateNavigation() {\n        if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n        const { nextEl, prevEl } = swiper.navigation;\n        if (prevEl) {\n            if (swiper.isBeginning) {\n                disableEl(prevEl);\n                makeElNotFocusable(prevEl);\n            } else {\n                enableEl(prevEl);\n                makeElFocusable(prevEl);\n            }\n        }\n        if (nextEl) {\n            if (swiper.isEnd) {\n                disableEl(nextEl);\n                makeElNotFocusable(nextEl);\n            } else {\n                enableEl(nextEl);\n                makeElFocusable(nextEl);\n            }\n        }\n    }\n    function hasPagination() {\n        return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n    }\n    function hasClickablePagination() {\n        return hasPagination() && swiper.params.pagination.clickable;\n    }\n    function updatePagination() {\n        const params = swiper.params.a11y;\n        if (!hasPagination()) return;\n        swiper.pagination.bullets.forEach((bulletEl)=>{\n            if (swiper.params.pagination.clickable) {\n                makeElFocusable(bulletEl);\n                if (!swiper.params.pagination.renderBullet) {\n                    addElRole(bulletEl, \"button\");\n                    addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(bulletEl) + 1));\n                }\n            }\n            if (bulletEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletActiveClass))) {\n                bulletEl.setAttribute(\"aria-current\", \"true\");\n            } else {\n                bulletEl.removeAttribute(\"aria-current\");\n            }\n        });\n    }\n    const initNavEl = (el, wrapperId, message)=>{\n        makeElFocusable(el);\n        if (el.tagName !== \"BUTTON\") {\n            addElRole(el, \"button\");\n            el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n        }\n        addElLabel(el, message);\n        addElControls(el, wrapperId);\n    };\n    const handlePointerDown = ()=>{\n        swiper.a11y.clicked = true;\n    };\n    const handlePointerUp = ()=>{\n        requestAnimationFrame(()=>{\n            requestAnimationFrame(()=>{\n                if (!swiper.destroyed) {\n                    swiper.a11y.clicked = false;\n                }\n            });\n        });\n    };\n    const handleFocus = (e)=>{\n        if (swiper.a11y.clicked) return;\n        const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n        if (!slideEl || !swiper.slides.includes(slideEl)) return;\n        const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n        const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n        if (isActive || isVisible) return;\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\n        if (swiper.isHorizontal()) {\n            swiper.el.scrollLeft = 0;\n        } else {\n            swiper.el.scrollTop = 0;\n        }\n        swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n    };\n    const initSlides = ()=>{\n        const params = swiper.params.a11y;\n        if (params.itemRoleDescriptionMessage) {\n            addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\n        }\n        if (params.slideRole) {\n            addElRole(swiper.slides, params.slideRole);\n        }\n        const slidesLength = swiper.slides.length;\n        if (params.slideLabelMessage) {\n            swiper.slides.forEach((slideEl, index)=>{\n                const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10) : index;\n                const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n                addElLabel(slideEl, ariaLabelMessage);\n            });\n        }\n    };\n    const init = ()=>{\n        const params = swiper.params.a11y;\n        swiper.el.append(liveRegion);\n        // Container\n        const containerEl = swiper.el;\n        if (params.containerRoleDescriptionMessage) {\n            addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\n        }\n        if (params.containerMessage) {\n            addElLabel(containerEl, params.containerMessage);\n        }\n        // Wrapper\n        const wrapperEl = swiper.wrapperEl;\n        const wrapperId = params.id || wrapperEl.getAttribute(\"id\") || `swiper-wrapper-${getRandomNumber(16)}`;\n        const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? \"off\" : \"polite\";\n        addElId(wrapperEl, wrapperId);\n        addElLive(wrapperEl, live);\n        // Slide\n        initSlides();\n        // Navigation\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>initNavEl(el, wrapperId, params.nextSlideMessage));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>initNavEl(el, wrapperId, params.prevSlideMessage));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = makeElementsArray(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        // Tab focus\n        swiper.el.addEventListener(\"focus\", handleFocus, true);\n        swiper.el.addEventListener(\"pointerdown\", handlePointerDown, true);\n        swiper.el.addEventListener(\"pointerup\", handlePointerUp, true);\n    };\n    function destroy() {\n        if (liveRegion) liveRegion.remove();\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = makeElementsArray(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.removeEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        // Tab focus\n        swiper.el.removeEventListener(\"focus\", handleFocus, true);\n        swiper.el.removeEventListener(\"pointerdown\", handlePointerDown, true);\n        swiper.el.removeEventListener(\"pointerup\", handlePointerUp, true);\n    }\n    on(\"beforeInit\", ()=>{\n        liveRegion = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"span\", swiper.params.a11y.notificationClass);\n        liveRegion.setAttribute(\"aria-live\", \"assertive\");\n        liveRegion.setAttribute(\"aria-atomic\", \"true\");\n    });\n    on(\"afterInit\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        init();\n    });\n    on(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        initSlides();\n    });\n    on(\"fromEdge toEdge afterInit lock unlock\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updateNavigation();\n    });\n    on(\"paginationUpdate\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updatePagination();\n    });\n    on(\"destroy\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        destroy();\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/a11y.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/autoplay.mjs":
/*!***************************************************!*\
  !*** ../node_modules/swiper/modules/autoplay.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Autoplay)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n\n/* eslint no-underscore-dangle: \"off\" */ /* eslint no-use-before-define: \"off\" */ function Autoplay(_ref) {\n    let { swiper, extendParams, on, emit, params } = _ref;\n    swiper.autoplay = {\n        running: false,\n        paused: false,\n        timeLeft: 0\n    };\n    extendParams({\n        autoplay: {\n            enabled: false,\n            delay: 3000,\n            waitForTransition: true,\n            disableOnInteraction: false,\n            stopOnLastSlide: false,\n            reverseDirection: false,\n            pauseOnMouseEnter: false\n        }\n    });\n    let timeout;\n    let raf;\n    let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayTimeLeft;\n    let autoplayStartTime = new Date().getTime();\n    let wasPaused;\n    let isTouched;\n    let pausedByTouch;\n    let touchStartTimeout;\n    let slideChanged;\n    let pausedByInteraction;\n    let pausedByPointerEnter;\n    function onTransitionEnd(e) {\n        if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n        if (e.target !== swiper.wrapperEl) return;\n        swiper.wrapperEl.removeEventListener(\"transitionend\", onTransitionEnd);\n        if (pausedByPointerEnter) {\n            return;\n        }\n        resume();\n    }\n    const calcTimeLeft = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.autoplay.paused) {\n            wasPaused = true;\n        } else if (wasPaused) {\n            autoplayDelayCurrent = autoplayTimeLeft;\n            wasPaused = false;\n        }\n        const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n        swiper.autoplay.timeLeft = timeLeft;\n        emit(\"autoplayTimeLeft\", timeLeft, timeLeft / autoplayDelayTotal);\n        raf = requestAnimationFrame(()=>{\n            calcTimeLeft();\n        });\n    };\n    const getSlideDelay = ()=>{\n        let activeSlideEl;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            activeSlideEl = swiper.slides.filter((slideEl)=>slideEl.classList.contains(\"swiper-slide-active\"))[0];\n        } else {\n            activeSlideEl = swiper.slides[swiper.activeIndex];\n        }\n        if (!activeSlideEl) return undefined;\n        const currentSlideDelay = parseInt(activeSlideEl.getAttribute(\"data-swiper-autoplay\"), 10);\n        return currentSlideDelay;\n    };\n    const run = (delayForce)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        cancelAnimationFrame(raf);\n        calcTimeLeft();\n        let delay = typeof delayForce === \"undefined\" ? swiper.params.autoplay.delay : delayForce;\n        autoplayDelayTotal = swiper.params.autoplay.delay;\n        autoplayDelayCurrent = swiper.params.autoplay.delay;\n        const currentSlideDelay = getSlideDelay();\n        if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === \"undefined\") {\n            delay = currentSlideDelay;\n            autoplayDelayTotal = currentSlideDelay;\n            autoplayDelayCurrent = currentSlideDelay;\n        }\n        autoplayTimeLeft = delay;\n        const speed = swiper.params.speed;\n        const proceed = ()=>{\n            if (!swiper || swiper.destroyed) return;\n            if (swiper.params.autoplay.reverseDirection) {\n                if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slidePrev(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            } else {\n                if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slideNext(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(0, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            }\n            if (swiper.params.cssMode) {\n                autoplayStartTime = new Date().getTime();\n                requestAnimationFrame(()=>{\n                    run();\n                });\n            }\n        };\n        if (delay > 0) {\n            clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                proceed();\n            }, delay);\n        } else {\n            requestAnimationFrame(()=>{\n                proceed();\n            });\n        }\n        // eslint-disable-next-line\n        return delay;\n    };\n    const start = ()=>{\n        autoplayStartTime = new Date().getTime();\n        swiper.autoplay.running = true;\n        run();\n        emit(\"autoplayStart\");\n    };\n    const stop = ()=>{\n        swiper.autoplay.running = false;\n        clearTimeout(timeout);\n        cancelAnimationFrame(raf);\n        emit(\"autoplayStop\");\n    };\n    const pause = (internal, reset)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        clearTimeout(timeout);\n        if (!internal) {\n            pausedByInteraction = true;\n        }\n        const proceed = ()=>{\n            emit(\"autoplayPause\");\n            if (swiper.params.autoplay.waitForTransition) {\n                swiper.wrapperEl.addEventListener(\"transitionend\", onTransitionEnd);\n            } else {\n                resume();\n            }\n        };\n        swiper.autoplay.paused = true;\n        if (reset) {\n            if (slideChanged) {\n                autoplayTimeLeft = swiper.params.autoplay.delay;\n            }\n            slideChanged = false;\n            proceed();\n            return;\n        }\n        const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n        autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n        if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n        proceed();\n    };\n    const resume = ()=>{\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n        autoplayStartTime = new Date().getTime();\n        if (pausedByInteraction) {\n            pausedByInteraction = false;\n            run(autoplayTimeLeft);\n        } else {\n            run();\n        }\n        swiper.autoplay.paused = false;\n        emit(\"autoplayResume\");\n    };\n    const onVisibilityChange = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (document.visibilityState === \"hidden\") {\n            pausedByInteraction = true;\n            pause(true);\n        }\n        if (document.visibilityState === \"visible\") {\n            resume();\n        }\n    };\n    const onPointerEnter = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByInteraction = true;\n        pausedByPointerEnter = true;\n        if (swiper.animating || swiper.autoplay.paused) return;\n        pause(true);\n    };\n    const onPointerLeave = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByPointerEnter = false;\n        if (swiper.autoplay.paused) {\n            resume();\n        }\n    };\n    const attachMouseEvents = ()=>{\n        if (swiper.params.autoplay.pauseOnMouseEnter) {\n            swiper.el.addEventListener(\"pointerenter\", onPointerEnter);\n            swiper.el.addEventListener(\"pointerleave\", onPointerLeave);\n        }\n    };\n    const detachMouseEvents = ()=>{\n        swiper.el.removeEventListener(\"pointerenter\", onPointerEnter);\n        swiper.el.removeEventListener(\"pointerleave\", onPointerLeave);\n    };\n    const attachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    const detachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.autoplay.enabled) {\n            attachMouseEvents();\n            attachDocumentEvents();\n            start();\n        }\n    });\n    on(\"destroy\", ()=>{\n        detachMouseEvents();\n        detachDocumentEvents();\n        if (swiper.autoplay.running) {\n            stop();\n        }\n    });\n    on(\"_freeModeStaticRelease\", ()=>{\n        if (pausedByTouch || pausedByInteraction) {\n            resume();\n        }\n    });\n    on(\"_freeModeNoMomentumRelease\", ()=>{\n        if (!swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"beforeTransitionStart\", (_s, speed, internal)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (internal || !swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"sliderFirstMove\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.params.autoplay.disableOnInteraction) {\n            stop();\n            return;\n        }\n        isTouched = true;\n        pausedByTouch = false;\n        pausedByInteraction = false;\n        touchStartTimeout = setTimeout(()=>{\n            pausedByInteraction = true;\n            pausedByTouch = true;\n            pause(true);\n        }, 200);\n    });\n    on(\"touchEnd\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n        clearTimeout(touchStartTimeout);\n        clearTimeout(timeout);\n        if (swiper.params.autoplay.disableOnInteraction) {\n            pausedByTouch = false;\n            isTouched = false;\n            return;\n        }\n        if (pausedByTouch && swiper.params.cssMode) resume();\n        pausedByTouch = false;\n        isTouched = false;\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        slideChanged = true;\n    });\n    Object.assign(swiper.autoplay, {\n        start,\n        stop,\n        pause,\n        resume\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/autoplay.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/controller.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/modules/controller.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Controller)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */ function Controller(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        controller: {\n            control: undefined,\n            inverse: false,\n            by: \"slide\" // or 'container'\n        }\n    });\n    swiper.controller = {\n        control: undefined\n    };\n    function LinearSpline(x, y) {\n        const binarySearch = function search() {\n            let maxIndex;\n            let minIndex;\n            let guess;\n            return (array, val)=>{\n                minIndex = -1;\n                maxIndex = array.length;\n                while(maxIndex - minIndex > 1){\n                    guess = maxIndex + minIndex >> 1;\n                    if (array[guess] <= val) {\n                        minIndex = guess;\n                    } else {\n                        maxIndex = guess;\n                    }\n                }\n                return maxIndex;\n            };\n        }();\n        this.x = x;\n        this.y = y;\n        this.lastIndex = x.length - 1;\n        // Given an x value (x2), return the expected y2 value:\n        // (x1,y1) is the known point before given value,\n        // (x3,y3) is the known point after given value.\n        let i1;\n        let i3;\n        this.interpolate = function interpolate(x2) {\n            if (!x2) return 0;\n            // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n            i3 = binarySearch(this.x, x2);\n            i1 = i3 - 1;\n            // We have our indexes i1 & i3, so we can calculate already:\n            // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n            return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n        };\n        return this;\n    }\n    function getInterpolateFunction(c) {\n        swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n    function setTranslate(_t, byController) {\n        const controlled = swiper.controller.control;\n        let multiplier;\n        let controlledTranslate;\n        const Swiper = swiper.constructor;\n        function setControlledTranslate(c) {\n            if (c.destroyed) return;\n            // this will create an Interpolate function based on the snapGrids\n            // x is the Grid of the scrolled scroller and y will be the controlled scroller\n            // it makes sense to create this only once and recall it for the interpolation\n            // the function does a lot of value caching for performance\n            const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n            if (swiper.params.controller.by === \"slide\") {\n                getInterpolateFunction(c);\n                // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n                // but it did not work out\n                controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n            }\n            if (!controlledTranslate || swiper.params.controller.by === \"container\") {\n                multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n                if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n                    multiplier = 1;\n                }\n                controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n            }\n            if (swiper.params.controller.inverse) {\n                controlledTranslate = c.maxTranslate() - controlledTranslate;\n            }\n            c.updateProgress(controlledTranslate);\n            c.setTranslate(controlledTranslate, swiper);\n            c.updateActiveIndex();\n            c.updateSlidesClasses();\n        }\n        if (Array.isArray(controlled)) {\n            for(let i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTranslate(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTranslate(controlled);\n        }\n    }\n    function setTransition(duration, byController) {\n        const Swiper = swiper.constructor;\n        const controlled = swiper.controller.control;\n        let i;\n        function setControlledTransition(c) {\n            if (c.destroyed) return;\n            c.setTransition(duration, swiper);\n            if (duration !== 0) {\n                c.transitionStart();\n                if (c.params.autoHeight) {\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(()=>{\n                        c.updateAutoHeight();\n                    });\n                }\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(c.wrapperEl, ()=>{\n                    if (!controlled) return;\n                    c.transitionEnd();\n                });\n            }\n        }\n        if (Array.isArray(controlled)) {\n            for(i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTransition(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTransition(controlled);\n        }\n    }\n    function removeSpline() {\n        if (!swiper.controller.control) return;\n        if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        if (false) {}\n        swiper.controller.control = swiper.params.controller.control;\n    });\n    on(\"update\", ()=>{\n        removeSpline();\n    });\n    on(\"resize\", ()=>{\n        removeSpline();\n    });\n    on(\"observerUpdate\", ()=>{\n        removeSpline();\n    });\n    on(\"setTranslate\", (_s, translate, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTranslate(translate, byController);\n    });\n    on(\"setTransition\", (_s, duration, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTransition(duration, byController);\n    });\n    Object.assign(swiper.controller, {\n        setTranslate,\n        setTransition\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/controller.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-cards.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/swiper/modules/effect-cards.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCards)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/../node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCards(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        cardsEffect: {\n            slideShadows: true,\n            rotate: true,\n            perSlideRotate: 2,\n            perSlideOffset: 8\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides, activeIndex, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.cardsEffect;\n        const { startTranslate, isTouched } = swiper.touchEventsData;\n        const currentTranslate = rtl ? -swiper.translate : swiper.translate;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideProgress, -4), 4);\n            let offset = slideEl.swiperSlideOffset;\n            if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n                swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;\n            }\n            if (swiper.params.centeredSlides && swiper.params.cssMode) {\n                offset -= slides[0].swiperSlideOffset;\n            }\n            let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let tY = 0;\n            const tZ = -100 * Math.abs(progress);\n            let scale = 1;\n            let rotate = -params.perSlideRotate * progress;\n            let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n            const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n            const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n            const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n            if (isSwipeToNext || isSwipeToPrev) {\n                const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n                rotate += -28 * progress * subProgress;\n                scale += -0.5 * subProgress;\n                tXAdd += 96 * subProgress;\n                tY = `${-25 * subProgress * Math.abs(progress)}%`;\n            }\n            if (progress < 0) {\n                // next\n                tX = `calc(${tX}px ${rtl ? \"-\" : \"+\"} (${tXAdd * Math.abs(progress)}%))`;\n            } else if (progress > 0) {\n                // prev\n                tX = `calc(${tX}px ${rtl ? \"-\" : \"+\"} (-${tXAdd * Math.abs(progress)}%))`;\n            } else {\n                tX = `${tX}px`;\n            }\n            if (!swiper.isHorizontal()) {\n                const prevY = tY;\n                tY = tX;\n                tX = prevY;\n            }\n            const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n            /* eslint-disable */ const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)\n        scale(${scaleString})\n      `;\n            /* eslint-enable */ if (params.slideShadows) {\n                // Set shadows\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"cards\", slideEl);\n                }\n                if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.l)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"cards\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-cards.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-coverflow.mjs":
/*!***********************************************************!*\
  !*** ../node_modules/swiper/modules/effect-coverflow.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCoverflow)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/../node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectCoverflow(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 100,\n            scale: 1,\n            modifier: 1,\n            slideShadows: true\n        }\n    });\n    const setTranslate = ()=>{\n        const { width: swiperWidth, height: swiperHeight, slides, slidesSizesGrid } = swiper;\n        const params = swiper.params.coverflowEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const transform = swiper.translate;\n        const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n        const rotate = isHorizontal ? params.rotate : -params.rotate;\n        const translate = params.depth;\n        // Each slide offset from center\n        for(let i = 0, length = slides.length; i < length; i += 1){\n            const slideEl = slides[i];\n            const slideSize = slidesSizesGrid[i];\n            const slideOffset = slideEl.swiperSlideOffset;\n            const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n            const offsetMultiplier = typeof params.modifier === \"function\" ? params.modifier(centerOffset) : centerOffset * params.modifier;\n            let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n            let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n            // var rotateZ = 0\n            let translateZ = -translate * Math.abs(offsetMultiplier);\n            let stretch = params.stretch;\n            // Allow percentage to make a relative stretch for responsive sliders\n            if (typeof stretch === \"string\" && stretch.indexOf(\"%\") !== -1) {\n                stretch = parseFloat(params.stretch) / 100 * slideSize;\n            }\n            let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n            let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n            let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n            // Fix for ultra small values\n            if (Math.abs(translateX) < 0.001) translateX = 0;\n            if (Math.abs(translateY) < 0.001) translateY = 0;\n            if (Math.abs(translateZ) < 0.001) translateZ = 0;\n            if (Math.abs(rotateY) < 0.001) rotateY = 0;\n            if (Math.abs(rotateX) < 0.001) rotateX = 0;\n            if (Math.abs(scale) < 0.001) scale = 0;\n            if (swiper.browser && swiper.browser.isSafari) {\n                if (Math.abs(rotateY) / 90 % 2 === 1) {\n                    rotateY += 0.001;\n                }\n                if (Math.abs(rotateX) / 90 % 2 === 1) {\n                    rotateX += 0.001;\n                }\n            }\n            const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = slideTransform;\n            slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n            if (params.slideShadows) {\n                // Set shadows\n                let shadowBeforeEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n                let shadowAfterEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n                if (!shadowBeforeEl) {\n                    shadowBeforeEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"left\" : \"top\");\n                }\n                if (!shadowAfterEl) {\n                    shadowAfterEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"right\" : \"bottom\");\n                }\n                if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n                if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.l)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"coverflow\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-coverflow.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-creative.mjs":
/*!**********************************************************!*\
  !*** ../node_modules/swiper/modules/effect-creative.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCreative)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/../node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCreative(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        creativeEffect: {\n            limitProgress: 1,\n            shadowPerProgress: false,\n            progressMultiplier: 1,\n            perspective: true,\n            prev: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            },\n            next: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            }\n        }\n    });\n    const getTranslateValue = (value)=>{\n        if (typeof value === \"string\") return value;\n        return `${value}px`;\n    };\n    const setTranslate = ()=>{\n        const { slides, wrapperEl, slidesSizesGrid } = swiper;\n        const params = swiper.params.creativeEffect;\n        const { progressMultiplier: multiplier } = params;\n        const isCenteredSlides = swiper.params.centeredSlides;\n        if (isCenteredSlides) {\n            const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n            wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\n            let originalProgress = progress;\n            if (!isCenteredSlides) {\n                originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const t = [\n                swiper.params.cssMode ? -offset - swiper.translate : -offset,\n                0,\n                0\n            ];\n            const r = [\n                0,\n                0,\n                0\n            ];\n            let custom = false;\n            if (!swiper.isHorizontal()) {\n                t[1] = t[0];\n                t[0] = 0;\n            }\n            let data = {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                scale: 1,\n                opacity: 1\n            };\n            if (progress < 0) {\n                data = params.next;\n                custom = true;\n            } else if (progress > 0) {\n                data = params.prev;\n                custom = true;\n            }\n            // set translate\n            t.forEach((value, index)=>{\n                t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n            });\n            // set rotates\n            r.forEach((value, index)=>{\n                let val = data.rotate[index] * Math.abs(progress * multiplier);\n                if (swiper.browser && swiper.browser.isSafari && Math.abs(val) / 90 % 2 === 1) {\n                    val += 0.001;\n                }\n                r[index] = val;\n            });\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const translateString = t.join(\", \");\n            const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n            const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n            const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n            const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\n            // Set shadows\n            if (custom && data.shadow || !custom) {\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl && data.shadow) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"creative\", slideEl);\n                }\n                if (shadowEl) {\n                    const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n                    shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n                }\n            }\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n            targetEl.style.opacity = opacityString;\n            if (data.origin) {\n                targetEl.style.transformOrigin = data.origin;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.l)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"creative\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>swiper.params.creativeEffect.perspective,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jcmVhdGl2ZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdFO0FBQ0o7QUFDSTtBQUM4QjtBQUMvQjtBQUUvRCxTQUFTUSxlQUFlQyxJQUFJO0lBQzFCLElBQUksRUFDRkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSCxHQUFHSDtJQUNKRSxhQUFhO1FBQ1hFLGdCQUFnQjtZQUNkQyxlQUFlO1lBQ2ZDLG1CQUFtQjtZQUNuQkMsb0JBQW9CO1lBQ3BCQyxhQUFhO1lBQ2JDLE1BQU07Z0JBQ0pDLFdBQVc7b0JBQUM7b0JBQUc7b0JBQUc7aUJBQUU7Z0JBQ3BCQyxRQUFRO29CQUFDO29CQUFHO29CQUFHO2lCQUFFO2dCQUNqQkMsU0FBUztnQkFDVEMsT0FBTztZQUNUO1lBQ0FDLE1BQU07Z0JBQ0pKLFdBQVc7b0JBQUM7b0JBQUc7b0JBQUc7aUJBQUU7Z0JBQ3BCQyxRQUFRO29CQUFDO29CQUFHO29CQUFHO2lCQUFFO2dCQUNqQkMsU0FBUztnQkFDVEMsT0FBTztZQUNUO1FBQ0Y7SUFDRjtJQUNBLE1BQU1FLG9CQUFvQkMsQ0FBQUE7UUFDeEIsSUFBSSxPQUFPQSxVQUFVLFVBQVUsT0FBT0E7UUFDdEMsT0FBTyxDQUFDLEVBQUVBLE1BQU0sRUFBRSxDQUFDO0lBQ3JCO0lBQ0EsTUFBTUMsZUFBZTtRQUNuQixNQUFNLEVBQ0pDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxlQUFlLEVBQ2hCLEdBQUduQjtRQUNKLE1BQU1vQixTQUFTcEIsT0FBT29CLE1BQU0sQ0FBQ2pCLGNBQWM7UUFDM0MsTUFBTSxFQUNKRyxvQkFBb0JlLFVBQVUsRUFDL0IsR0FBR0Q7UUFDSixNQUFNRSxtQkFBbUJ0QixPQUFPb0IsTUFBTSxDQUFDRyxjQUFjO1FBQ3JELElBQUlELGtCQUFrQjtZQUNwQixNQUFNRSxTQUFTTCxlQUFlLENBQUMsRUFBRSxHQUFHLElBQUluQixPQUFPb0IsTUFBTSxDQUFD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ZUFBZSxHQUFHcEIsS0FBS21CLE1BQU07WUFDOUM7UUFDRjtJQUNGO0lBQ0EsTUFBTUUsZ0JBQWdCQyxDQUFBQTtRQUNwQixNQUFNQyxvQkFBb0JuRSxPQUFPaUIsTUFBTSxDQUFDbUQsR0FBRyxDQUFDdEMsQ0FBQUEsVUFBV2pDLG9EQUFtQkEsQ0FBQ2lDO1FBQzNFcUMsa0JBQWtCdEIsT0FBTyxDQUFDd0IsQ0FBQUE7WUFDeEJBLEdBQUczQyxLQUFLLENBQUM0QyxrQkFBa0IsR0FBRyxDQUFDLEVBQUVKLFNBQVMsRUFBRSxDQUFDO1lBQzdDRyxHQUFHRSxnQkFBZ0IsQ0FBQyx3QkFBd0IxQixPQUFPLENBQUNjLENBQUFBO2dCQUNsREEsU0FBU2pDLEtBQUssQ0FBQzRDLGtCQUFrQixHQUFHLENBQUMsRUFBRUosU0FBUyxFQUFFLENBQUM7WUFDckQ7UUFDRjtRQUNBdkUsNEVBQTBCQSxDQUFDO1lBQ3pCSztZQUNBa0U7WUFDQUM7WUFDQUssV0FBVztRQUNiO0lBQ0Y7SUFDQS9FLDBEQUFVQSxDQUFDO1FBQ1RnRixRQUFRO1FBQ1J6RTtRQUNBRTtRQUNBYztRQUNBaUQ7UUFDQTFELGFBQWEsSUFBTVAsT0FBT29CLE1BQU0sQ0FBQ2pCLGNBQWMsQ0FBQ0ksV0FBVztRQUMzRG1FLGlCQUFpQixJQUFPO2dCQUN0QkMscUJBQXFCO2dCQUNyQkMsa0JBQWtCLENBQUM1RSxPQUFPb0IsTUFBTSxDQUFDb0IsT0FBTztZQUMxQztJQUNGO0FBQ0Y7QUFFcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jcmVhdGl2ZS5tanM/YWFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjIGFzIGNyZWF0ZVNoYWRvdyB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzJztcbmltcG9ydCB7IGwgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBFZmZlY3RDcmVhdGl2ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvblxuICB9ID0gX3JlZjtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjcmVhdGl2ZUVmZmVjdDoge1xuICAgICAgbGltaXRQcm9ncmVzczogMSxcbiAgICAgIHNoYWRvd1BlclByb2dyZXNzOiBmYWxzZSxcbiAgICAgIHByb2dyZXNzTXVsdGlwbGllcjogMSxcbiAgICAgIHBlcnNwZWN0aXZlOiB0cnVlLFxuICAgICAgcHJldjoge1xuICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgcm90YXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHNjYWxlOiAxXG4gICAgICB9LFxuICAgICAgbmV4dDoge1xuICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgcm90YXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHNjYWxlOiAxXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZ2V0VHJhbnNsYXRlVmFsdWUgPSB2YWx1ZSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTtcbiAgICByZXR1cm4gYCR7dmFsdWV9cHhgO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNyZWF0aXZlRWZmZWN0O1xuICAgIGNvbnN0IHtcbiAgICAgIHByb2dyZXNzTXVsdGlwbGllcjogbXVsdGlwbGllclxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgaXNDZW50ZXJlZFNsaWRlcyA9IHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXM7XG4gICAgaWYgKGlzQ2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGNvbnN0IG1hcmdpbiA9IHNsaWRlc1NpemVzR3JpZFswXSAvIDIgLSBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwO1xuICAgICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKGNhbGMoNTAlIC0gJHttYXJnaW59cHgpKWA7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTtcbiAgICAgIGxldCBvcmlnaW5hbFByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICBpZiAoIWlzQ2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgb3JpZ2luYWxQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwub3JpZ2luYWxQcm9ncmVzcywgLXBhcmFtcy5saW1pdFByb2dyZXNzKSwgcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IHQgPSBbc3dpcGVyLnBhcmFtcy5jc3NNb2RlID8gLW9mZnNldCAtIHN3aXBlci50cmFuc2xhdGUgOiAtb2Zmc2V0LCAwLCAwXTtcbiAgICAgIGNvbnN0IHIgPSBbMCwgMCwgMF07XG4gICAgICBsZXQgY3VzdG9tID0gZmFsc2U7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0WzFdID0gdFswXTtcbiAgICAgICAgdFswXSA9IDA7XG4gICAgICB9XG4gICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9ncmVzcyA8IDApIHtcbiAgICAgICAgZGF0YSA9IHBhcmFtcy5uZXh0O1xuICAgICAgICBjdXN0b20gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwcm9ncmVzcyA+IDApIHtcbiAgICAgICAgZGF0YSA9IHBhcmFtcy5wcmV2O1xuICAgICAgICBjdXN0b20gPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gc2V0IHRyYW5zbGF0ZVxuICAgICAgdC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgdFtpbmRleF0gPSBgY2FsYygke3ZhbHVlfXB4ICsgKCR7Z2V0VHJhbnNsYXRlVmFsdWUoZGF0YS50cmFuc2xhdGVbaW5kZXhdKX0gKiAke01hdGguYWJzKHByb2dyZXNzICogbXVsdGlwbGllcil9KSlgO1xuICAgICAgfSk7XG4gICAgICAvLyBzZXQgcm90YXRlc1xuICAgICAgci5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IHZhbCA9IGRhdGEucm90YXRlW2luZGV4XSAqIE1hdGguYWJzKHByb2dyZXNzICogbXVsdGlwbGllcik7XG4gICAgICAgIGlmIChzd2lwZXIuYnJvd3NlciAmJiBzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSAmJiBNYXRoLmFicyh2YWwpIC8gOTAgJSAyID09PSAxKSB7XG4gICAgICAgICAgdmFsICs9IDAuMDAxO1xuICAgICAgICB9XG4gICAgICAgIHJbaW5kZXhdID0gdmFsO1xuICAgICAgfSk7XG4gICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHNsaWRlUHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBjb25zdCB0cmFuc2xhdGVTdHJpbmcgPSB0LmpvaW4oJywgJyk7XG4gICAgICBjb25zdCByb3RhdGVTdHJpbmcgPSBgcm90YXRlWCgke3JbMF19ZGVnKSByb3RhdGVZKCR7clsxXX1kZWcpIHJvdGF0ZVooJHtyWzJdfWRlZylgO1xuICAgICAgY29uc3Qgc2NhbGVTdHJpbmcgPSBvcmlnaW5hbFByb2dyZXNzIDwgMCA/IGBzY2FsZSgkezEgKyAoMSAtIGRhdGEuc2NhbGUpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXJ9KWAgOiBgc2NhbGUoJHsxIC0gKDEgLSBkYXRhLnNjYWxlKSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyfSlgO1xuICAgICAgY29uc3Qgb3BhY2l0eVN0cmluZyA9IG9yaWdpbmFsUHJvZ3Jlc3MgPCAwID8gMSArICgxIC0gZGF0YS5vcGFjaXR5KSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyIDogMSAtICgxIC0gZGF0YS5vcGFjaXR5KSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyO1xuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlU3RyaW5nfSkgJHtyb3RhdGVTdHJpbmd9ICR7c2NhbGVTdHJpbmd9YDtcblxuICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgIGlmIChjdXN0b20gJiYgZGF0YS5zaGFkb3cgfHwgIWN1c3RvbSkge1xuICAgICAgICBsZXQgc2hhZG93RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93Jyk7XG4gICAgICAgIGlmICghc2hhZG93RWwgJiYgZGF0YS5zaGFkb3cpIHtcbiAgICAgICAgICBzaGFkb3dFbCA9IGNyZWF0ZVNoYWRvdygnY3JlYXRpdmUnLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93RWwpIHtcbiAgICAgICAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gcGFyYW1zLnNoYWRvd1BlclByb2dyZXNzID8gcHJvZ3Jlc3MgKiAoMSAvIHBhcmFtcy5saW1pdFByb2dyZXNzKSA6IHByb2dyZXNzO1xuICAgICAgICAgIHNoYWRvd0VsLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhzaGFkb3dPcGFjaXR5KSwgMCksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHlTdHJpbmc7XG4gICAgICBpZiAoZGF0YS5vcmlnaW4pIHtcbiAgICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gZGF0YS5vcmlnaW47XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93JykuZm9yRWFjaChzaGFkb3dFbCA9PiB7XG4gICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHMsXG4gICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY3JlYXRpdmUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBwZXJzcGVjdGl2ZTogKCkgPT4gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdC5wZXJzcGVjdGl2ZSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RDcmVhdGl2ZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiYyIsImNyZWF0ZVNoYWRvdyIsImUiLCJlZmZlY3RJbml0IiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJsIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsIkVmZmVjdENyZWF0aXZlIiwiX3JlZiIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiY3JlYXRpdmVFZmZlY3QiLCJsaW1pdFByb2dyZXNzIiwic2hhZG93UGVyUHJvZ3Jlc3MiLCJwcm9ncmVzc011bHRpcGxpZXIiLCJwZXJzcGVjdGl2ZSIsInByZXYiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJvcGFjaXR5Iiwic2NhbGUiLCJuZXh0IiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJ2YWx1ZSIsInNldFRyYW5zbGF0ZSIsInNsaWRlcyIsIndyYXBwZXJFbCIsInNsaWRlc1NpemVzR3JpZCIsInBhcmFtcyIsIm11bHRpcGxpZXIiLCJpc0NlbnRlcmVkU2xpZGVzIiwiY2VudGVyZWRTbGlkZXMiLCJtYXJnaW4iLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJzdHlsZSIsInRyYW5zZm9ybSIsImkiLCJsZW5ndGgiLCJzbGlkZUVsIiwic2xpZGVQcm9ncmVzcyIsInByb2dyZXNzIiwiTWF0aCIsIm1pbiIsIm1heCIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJvZmZzZXQiLCJzd2lwZXJTbGlkZU9mZnNldCIsInQiLCJjc3NNb2RlIiwiciIsImN1c3RvbSIsImlzSG9yaXpvbnRhbCIsImRhdGEiLCJmb3JFYWNoIiwiaW5kZXgiLCJhYnMiLCJ2YWwiLCJicm93c2VyIiwiaXNTYWZhcmkiLCJ6SW5kZXgiLCJyb3VuZCIsInRyYW5zbGF0ZVN0cmluZyIsImpvaW4iLCJyb3RhdGVTdHJpbmciLCJzY2FsZVN0cmluZyIsIm9wYWNpdHlTdHJpbmciLCJzaGFkb3ciLCJzaGFkb3dFbCIsInF1ZXJ5U2VsZWN0b3IiLCJzaGFkb3dPcGFjaXR5IiwidGFyZ2V0RWwiLCJvcmlnaW4iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJzZXRUcmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0cmFuc2Zvcm1FbGVtZW50cyIsIm1hcCIsImVsIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImFsbFNsaWRlcyIsImVmZmVjdCIsIm92ZXJ3cml0ZVBhcmFtcyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-creative.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-cube.mjs":
/*!******************************************************!*\
  !*** ../node_modules/swiper/modules/effect-cube.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCube)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction EffectCube(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        cubeEffect: {\n            slideShadows: true,\n            shadow: true,\n            shadowOffset: 20,\n            shadowScale: 0.94\n        }\n    });\n    const createSlideShadows = (slideEl, progress, isHorizontal)=>{\n        let shadowBefore = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? \"left\" : \"top\"}`.split(\" \"));\n            slideEl.append(shadowBefore);\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? \"right\" : \"bottom\"}`.split(\" \"));\n            slideEl.append(shadowAfter);\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // create new ones\n        const isHorizontal = swiper.isHorizontal();\n        swiper.slides.forEach((slideEl)=>{\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            createSlideShadows(slideEl, progress, isHorizontal);\n        });\n    };\n    const setTranslate = ()=>{\n        const { el, wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize, browser } = swiper;\n        const params = swiper.params.cubeEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n        let wrapperRotate = 0;\n        let cubeShadowEl;\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl = swiper.wrapperEl.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    swiper.wrapperEl.append(cubeShadowEl);\n                }\n                cubeShadowEl.style.height = `${swiperWidth}px`;\n            } else {\n                cubeShadowEl = el.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    el.append(cubeShadowEl);\n                }\n            }\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let slideIndex = i;\n            if (isVirtual) {\n                slideIndex = parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10);\n            }\n            let slideAngle = slideIndex * 90;\n            let round = Math.floor(slideAngle / 360);\n            if (rtl) {\n                slideAngle = -slideAngle;\n                round = Math.floor(-slideAngle / 360);\n            }\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            let tx = 0;\n            let ty = 0;\n            let tz = 0;\n            if (slideIndex % 4 === 0) {\n                tx = -round * 4 * swiperSize;\n                tz = 0;\n            } else if ((slideIndex - 1) % 4 === 0) {\n                tx = 0;\n                tz = -round * 4 * swiperSize;\n            } else if ((slideIndex - 2) % 4 === 0) {\n                tx = swiperSize + round * 4 * swiperSize;\n                tz = swiperSize;\n            } else if ((slideIndex - 3) % 4 === 0) {\n                tx = -swiperSize;\n                tz = 3 * swiperSize + swiperSize * 4 * round;\n            }\n            if (rtl) {\n                tx = -tx;\n            }\n            if (!isHorizontal) {\n                ty = tx;\n                tx = 0;\n            }\n            const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n            if (progress <= 1 && progress > -1) {\n                wrapperRotate = slideIndex * 90 + progress * 90;\n                if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n                if (swiper.browser && swiper.browser.isSafari && Math.abs(wrapperRotate) / 90 % 2 === 1) {\n                    wrapperRotate += 0.001;\n                }\n            }\n            slideEl.style.transform = transform;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress, isHorizontal);\n            }\n        }\n        wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;\n        wrapperEl.style[\"-webkit-transform-origin\"] = `50% 50% -${swiperSize / 2}px`;\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;\n            } else {\n                const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n                const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n                const scale1 = params.shadowScale;\n                const scale2 = params.shadowScale / multiplier;\n                const offset = params.shadowOffset;\n                cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;\n            }\n        }\n        const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\n        wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`;\n        wrapperEl.style.setProperty(\"--swiper-cube-translate-z\", `${zFactor}px`);\n    };\n    const setTransition = (duration)=>{\n        const { el, slides } = swiper;\n        slides.forEach((slideEl)=>{\n            slideEl.style.transitionDuration = `${duration}ms`;\n            slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((subEl)=>{\n                subEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n            const shadowEl = el.querySelector(\".swiper-cube-shadow\");\n            if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;\n        }\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"cube\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.cubeEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                resistanceRatio: 0,\n                spaceBetween: 0,\n                centeredSlides: false,\n                virtualTranslate: true\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-cube.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-fade.mjs":
/*!******************************************************!*\
  !*** ../node_modules/swiper/modules/effect-fade.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFade)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectFade(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        fadeEffect: {\n            crossFade: false\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides } = swiper;\n        const params = swiper.params.fadeEffect;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = swiper.slides[i];\n            const offset = slideEl.swiperSlideOffset;\n            let tx = -offset;\n            if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n            }\n            const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(params, slideEl);\n            targetEl.style.opacity = slideOpacity;\n            targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.l)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"fade\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1mYWRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUNJO0FBQzhCO0FBQy9CO0FBRS9ELFNBQVNNLFdBQVdDLElBQUk7SUFDdEIsSUFBSSxFQUNGQyxNQUFNLEVBQ05DLFlBQVksRUFDWkMsRUFBRSxFQUNILEdBQUdIO0lBQ0pFLGFBQWE7UUFDWEUsWUFBWTtZQUNWQyxXQUFXO1FBQ2I7SUFDRjtJQUNBLE1BQU1DLGVBQWU7UUFDbkIsTUFBTSxFQUNKQyxNQUFNLEVBQ1AsR0FBR047UUFDSixNQUFNTyxTQUFTUCxPQUFPTyxNQUFNLENBQUNKLFVBQVU7UUFDdkMsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlGLE9BQU9HLE1BQU0sRUFBRUQsS0FBSyxFQUFHO1lBQ3pDLE1BQU1FLFVBQVVWLE9BQU9NLE1BQU0sQ0FBQ0UsRUFBRTtZQUNoQyxNQUFNRyxTQUFTRCxRQUFRRSxpQkFBaUI7WUFDeEMsSUFBSUMsS0FBSyxDQUFDRjtZQUNWLElBQUksQ0FBQ1gsT0FBT08sTUFBTSxDQUFDTyxnQkFBZ0IsRUFBRUQsTUFBTWIsT0FBT2UsU0FBUztZQUMzRCxJQUFJQyxLQUFLO1lBQ1QsSUFBSSxDQUFDaEIsT0FBT2lCLFlBQVksSUFBSTtnQkFDMUJELEtBQUtIO2dCQUNMQSxLQUFLO1lBQ1A7WUFDQSxNQUFNSyxlQUFlbEIsT0FBT08sTUFBTSxDQUFDSixVQUFVLENBQUNDLFNBQVMsR0FBR2UsS0FBS0MsR0FBRyxDQUFDLElBQUlELEtBQUtFLEdBQUcsQ0FBQ1gsUUFBUVksUUFBUSxHQUFHLEtBQUssSUFBSUgsS0FBS0ksR0FBRyxDQUFDSixLQUFLQyxHQUFHLENBQUNWLFFBQVFZLFFBQVEsRUFBRSxDQUFDLElBQUk7WUFDckosTUFBTUUsV0FBVzlCLDREQUFZQSxDQUFDYSxRQUFRRztZQUN0Q2MsU0FBU0MsS0FBSyxDQUFDQyxPQUFPLEdBQUdSO1lBQ3pCTSxTQUFTQyxLQUFLLENBQUNFLFNBQVMsR0FBRyxDQUFDLFlBQVksRUFBRWQsR0FBRyxJQUFJLEVBQUVHLEdBQUcsUUFBUSxDQUFDO1FBQ2pFO0lBQ0Y7SUFDQSxNQUFNWSxnQkFBZ0JDLENBQUFBO1FBQ3BCLE1BQU1DLG9CQUFvQjlCLE9BQU9NLE1BQU0sQ0FBQ3lCLEdBQUcsQ0FBQ3JCLENBQUFBLFVBQVdiLG9EQUFtQkEsQ0FBQ2E7UUFDM0VvQixrQkFBa0JFLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDeEJBLEdBQUdSLEtBQUssQ0FBQ1Msa0JBQWtCLEdBQUcsQ0FBQyxFQUFFTCxTQUFTLEVBQUUsQ0FBQztRQUMvQztRQUNBbEMsNEVBQTBCQSxDQUFDO1lBQ3pCSztZQUNBNkI7WUFDQUM7WUFDQUssV0FBVztRQUNiO0lBQ0Y7SUFDQTFDLDBEQUFVQSxDQUFDO1FBQ1QyQyxRQUFRO1FBQ1JwQztRQUNBRTtRQUNBRztRQUNBdUI7UUFDQVMsaUJBQWlCLElBQU87Z0JBQ3RCQyxlQUFlO2dCQUNmQyxnQkFBZ0I7Z0JBQ2hCQyxxQkFBcUI7Z0JBQ3JCQyxjQUFjO2dCQUNkM0Isa0JBQWtCLENBQUNkLE9BQU9PLE1BQU0sQ0FBQ21DLE9BQU87WUFDMUM7SUFDRjtBQUNGO0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS5tanM/YzAxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzJztcbmltcG9ydCB7IGwgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBFZmZlY3RGYWRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uXG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKHNsaWRlRWwucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBzbGlkZU9wYWNpdHk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWA7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgYWxsU2xpZGVzOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RGYWRlIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJlIiwiZWZmZWN0SW5pdCIsImVmZmVjdFRhcmdldCIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwibCIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJFZmZlY3RGYWRlIiwiX3JlZiIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsInNldFRyYW5zbGF0ZSIsInNsaWRlcyIsInBhcmFtcyIsImkiLCJsZW5ndGgiLCJzbGlkZUVsIiwib2Zmc2V0Iiwic3dpcGVyU2xpZGVPZmZzZXQiLCJ0eCIsInZpcnR1YWxUcmFuc2xhdGUiLCJ0cmFuc2xhdGUiLCJ0eSIsImlzSG9yaXpvbnRhbCIsInNsaWRlT3BhY2l0eSIsIk1hdGgiLCJtYXgiLCJhYnMiLCJwcm9ncmVzcyIsIm1pbiIsInRhcmdldEVsIiwic3R5bGUiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwic2V0VHJhbnNpdGlvbiIsImR1cmF0aW9uIiwidHJhbnNmb3JtRWxlbWVudHMiLCJtYXAiLCJmb3JFYWNoIiwiZWwiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJhbGxTbGlkZXMiLCJlZmZlY3QiLCJvdmVyd3JpdGVQYXJhbXMiLCJzbGlkZXNQZXJWaWV3Iiwic2xpZGVzUGVyR3JvdXAiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwic3BhY2VCZXR3ZWVuIiwiY3NzTW9kZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-fade.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/effect-flip.mjs":
/*!******************************************************!*\
  !*** ../node_modules/swiper/modules/effect-flip.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFlip)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/../node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectFlip(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        flipEffect: {\n            slideShadows: true,\n            limitRotation: true\n        }\n    });\n    const createSlideShadows = (slideEl, progress)=>{\n        let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"left\" : \"top\");\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"right\" : \"bottom\");\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // Set shadows\n        swiper.params.flipEffect;\n        swiper.slides.forEach((slideEl)=>{\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            createSlideShadows(slideEl, progress);\n        });\n    };\n    const setTranslate = ()=>{\n        const { slides, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.flipEffect;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const rotate = -180 * progress;\n            let rotateY = rotate;\n            let rotateX = 0;\n            let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n                rotateX = -rotateY;\n                rotateY = 0;\n            } else if (rtl) {\n                rotateY = -rotateY;\n            }\n            if (swiper.browser && swiper.browser.isSafari) {\n                if (Math.abs(rotateY) / 90 % 2 === 1) {\n                    rotateY += 0.001;\n                }\n                if (Math.abs(rotateX) / 90 % 2 === 1) {\n                    rotateX += 0.001;\n                }\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress);\n            }\n            const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.l)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"flip\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.flipEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/effect-flip.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/free-mode.mjs":
/*!****************************************************!*\
  !*** ../node_modules/swiper/modules/free-mode.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ freeMode)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction freeMode(_ref) {\n    let { swiper, extendParams, emit, once } = _ref;\n    extendParams({\n        freeMode: {\n            enabled: false,\n            momentum: true,\n            momentumRatio: 1,\n            momentumBounce: true,\n            momentumBounceRatio: 1,\n            momentumVelocityRatio: 1,\n            sticky: false,\n            minimumVelocity: 0.02\n        }\n    });\n    function onTouchStart() {\n        if (swiper.params.cssMode) return;\n        const translate = swiper.getTranslate();\n        swiper.setTranslate(translate);\n        swiper.setTransition(0);\n        swiper.touchEventsData.velocities.length = 0;\n        swiper.freeMode.onTouchEnd({\n            currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n        });\n    }\n    function onTouchMove() {\n        if (swiper.params.cssMode) return;\n        const { touchEventsData: data, touches } = swiper;\n        // Velocity\n        if (data.velocities.length === 0) {\n            data.velocities.push({\n                position: touches[swiper.isHorizontal() ? \"startX\" : \"startY\"],\n                time: data.touchStartTime\n            });\n        }\n        data.velocities.push({\n            position: touches[swiper.isHorizontal() ? \"currentX\" : \"currentY\"],\n            time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)()\n        });\n    }\n    function onTouchEnd(_ref2) {\n        let { currentPos } = _ref2;\n        if (swiper.params.cssMode) return;\n        const { params, wrapperEl, rtlTranslate: rtl, snapGrid, touchEventsData: data } = swiper;\n        // Time diff\n        const touchEndTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)();\n        const timeDiff = touchEndTime - data.touchStartTime;\n        if (currentPos < -swiper.minTranslate()) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (currentPos > -swiper.maxTranslate()) {\n            if (swiper.slides.length < snapGrid.length) {\n                swiper.slideTo(snapGrid.length - 1);\n            } else {\n                swiper.slideTo(swiper.slides.length - 1);\n            }\n            return;\n        }\n        if (params.freeMode.momentum) {\n            if (data.velocities.length > 1) {\n                const lastMoveEvent = data.velocities.pop();\n                const velocityEvent = data.velocities.pop();\n                const distance = lastMoveEvent.position - velocityEvent.position;\n                const time = lastMoveEvent.time - velocityEvent.time;\n                swiper.velocity = distance / time;\n                swiper.velocity /= 2;\n                if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n                    swiper.velocity = 0;\n                }\n                // this implies that the user stopped moving a finger then released.\n                // There would be no events with distance zero, so the last event is stale.\n                if (time > 150 || (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.d)() - lastMoveEvent.time > 300) {\n                    swiper.velocity = 0;\n                }\n            } else {\n                swiper.velocity = 0;\n            }\n            swiper.velocity *= params.freeMode.momentumVelocityRatio;\n            data.velocities.length = 0;\n            let momentumDuration = 1000 * params.freeMode.momentumRatio;\n            const momentumDistance = swiper.velocity * momentumDuration;\n            let newPosition = swiper.translate + momentumDistance;\n            if (rtl) newPosition = -newPosition;\n            let doBounce = false;\n            let afterBouncePosition;\n            const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n            let needsLoopFix;\n            if (newPosition < swiper.maxTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n                        newPosition = swiper.maxTranslate() - bounceAmount;\n                    }\n                    afterBouncePosition = swiper.maxTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.maxTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (newPosition > swiper.minTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition - swiper.minTranslate() > bounceAmount) {\n                        newPosition = swiper.minTranslate() + bounceAmount;\n                    }\n                    afterBouncePosition = swiper.minTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.minTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (params.freeMode.sticky) {\n                let nextSlide;\n                for(let j = 0; j < snapGrid.length; j += 1){\n                    if (snapGrid[j] > -newPosition) {\n                        nextSlide = j;\n                        break;\n                    }\n                }\n                if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === \"next\") {\n                    newPosition = snapGrid[nextSlide];\n                } else {\n                    newPosition = snapGrid[nextSlide - 1];\n                }\n                newPosition = -newPosition;\n            }\n            if (needsLoopFix) {\n                once(\"transitionEnd\", ()=>{\n                    swiper.loopFix();\n                });\n            }\n            // Fix duration\n            if (swiper.velocity !== 0) {\n                if (rtl) {\n                    momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n                } else {\n                    momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n                }\n                if (params.freeMode.sticky) {\n                    // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n                    // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n                    // It's easy to see this when simulating touch with mouse events. To fix this,\n                    // limit single-slide swipes to the default slide duration. This also has the\n                    // nice side effect of matching slide speed if the user stopped moving before\n                    // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n                    // For faster swipes, also apply limits (albeit higher ones).\n                    const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n                    const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n                    if (moveDistance < currentSlideSize) {\n                        momentumDuration = params.speed;\n                    } else if (moveDistance < 2 * currentSlideSize) {\n                        momentumDuration = params.speed * 1.5;\n                    } else {\n                        momentumDuration = params.speed * 2.5;\n                    }\n                }\n            } else if (params.freeMode.sticky) {\n                swiper.slideToClosest();\n                return;\n            }\n            if (params.freeMode.momentumBounce && doBounce) {\n                swiper.updateProgress(afterBouncePosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                swiper.animating = true;\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(wrapperEl, ()=>{\n                    if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n                    emit(\"momentumBounce\");\n                    swiper.setTransition(params.speed);\n                    setTimeout(()=>{\n                        swiper.setTranslate(afterBouncePosition);\n                        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(wrapperEl, ()=>{\n                            if (!swiper || swiper.destroyed) return;\n                            swiper.transitionEnd();\n                        });\n                    }, 0);\n                });\n            } else if (swiper.velocity) {\n                emit(\"_freeModeNoMomentumRelease\");\n                swiper.updateProgress(newPosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                if (!swiper.animating) {\n                    swiper.animating = true;\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(wrapperEl, ()=>{\n                        if (!swiper || swiper.destroyed) return;\n                        swiper.transitionEnd();\n                    });\n                }\n            } else {\n                swiper.updateProgress(newPosition);\n            }\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        } else if (params.freeMode.sticky) {\n            swiper.slideToClosest();\n            return;\n        } else if (params.freeMode) {\n            emit(\"_freeModeNoMomentumRelease\");\n        }\n        if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n            emit(\"_freeModeStaticRelease\");\n            swiper.updateProgress();\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n    }\n    Object.assign(swiper, {\n        freeMode: {\n            onTouchStart,\n            onTouchMove,\n            onTouchEnd\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/free-mode.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/grid.mjs":
/*!***********************************************!*\
  !*** ../node_modules/swiper/modules/grid.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Grid)\n/* harmony export */ });\nfunction Grid(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        grid: {\n            rows: 1,\n            fill: \"column\"\n        }\n    });\n    let slidesNumberEvenToRows;\n    let slidesPerRow;\n    let numFullColumns;\n    let wasMultiRow;\n    const getSpaceBetween = ()=>{\n        let spaceBetween = swiper.params.spaceBetween;\n        if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n            spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n        } else if (typeof spaceBetween === \"string\") {\n            spaceBetween = parseFloat(spaceBetween);\n        }\n        return spaceBetween;\n    };\n    const initSlides = (slides)=>{\n        const { slidesPerView } = swiper.params;\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        numFullColumns = Math.floor(slidesLength / rows);\n        if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n            slidesNumberEvenToRows = slidesLength;\n        } else {\n            slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n        }\n        if (slidesPerView !== \"auto\" && fill === \"row\") {\n            slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n        }\n        slidesPerRow = slidesNumberEvenToRows / rows;\n    };\n    const unsetSlides = ()=>{\n        if (swiper.slides) {\n            swiper.slides.forEach((slide)=>{\n                if (slide.swiperSlideGridSet) {\n                    slide.style.height = \"\";\n                    slide.style[swiper.getDirectionLabel(\"margin-top\")] = \"\";\n                }\n            });\n        }\n    };\n    const updateSlide = (i, slide, slides)=>{\n        const { slidesPerGroup } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        // Set slides order\n        let newSlideOrderIndex;\n        let column;\n        let row;\n        if (fill === \"row\" && slidesPerGroup > 1) {\n            const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n            const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n            const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n            row = Math.floor(slideIndexInGroup / columnsInGroup);\n            column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n            newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n            slide.style.order = newSlideOrderIndex;\n        } else if (fill === \"column\") {\n            column = Math.floor(i / rows);\n            row = i - column * rows;\n            if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n                row += 1;\n                if (row >= rows) {\n                    row = 0;\n                    column += 1;\n                }\n            }\n        } else {\n            row = Math.floor(i / slidesPerRow);\n            column = i - row * slidesPerRow;\n        }\n        slide.row = row;\n        slide.column = column;\n        slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n        slide.style[swiper.getDirectionLabel(\"margin-top\")] = row !== 0 ? spaceBetween && `${spaceBetween}px` : \"\";\n        slide.swiperSlideGridSet = true;\n    };\n    const updateWrapperSize = (slideSize, snapGrid)=>{\n        const { centeredSlides, roundLengths } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows } = swiper.params.grid;\n        swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n        swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n        if (!swiper.params.cssMode) {\n            swiper.wrapperEl.style[swiper.getDirectionLabel(\"width\")] = `${swiper.virtualSize + spaceBetween}px`;\n        }\n        if (centeredSlides) {\n            const newSlidesGrid = [];\n            for(let i = 0; i < snapGrid.length; i += 1){\n                let slidesGridItem = snapGrid[i];\n                if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n                if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n            }\n            snapGrid.splice(0, snapGrid.length);\n            snapGrid.push(...newSlidesGrid);\n        }\n    };\n    const onInit = ()=>{\n        wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n    };\n    const onUpdate = ()=>{\n        const { params, el } = swiper;\n        const isMultiRow = params.grid && params.grid.rows > 1;\n        if (wasMultiRow && !isMultiRow) {\n            el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n            numFullColumns = 1;\n            swiper.emitContainerClasses();\n        } else if (!wasMultiRow && isMultiRow) {\n            el.classList.add(`${params.containerModifierClass}grid`);\n            if (params.grid.fill === \"column\") {\n                el.classList.add(`${params.containerModifierClass}grid-column`);\n            }\n            swiper.emitContainerClasses();\n        }\n        wasMultiRow = isMultiRow;\n    };\n    on(\"init\", onInit);\n    on(\"update\", onUpdate);\n    swiper.grid = {\n        initSlides,\n        unsetSlides,\n        updateSlide,\n        updateWrapperSize\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/grid.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/hash-navigation.mjs":
/*!**********************************************************!*\
  !*** ../node_modules/swiper/modules/hash-navigation.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashNavigation)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction HashNavigation(_ref) {\n    let { swiper, extendParams, emit, on } = _ref;\n    let initialized = false;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        hashNavigation: {\n            enabled: false,\n            replaceState: false,\n            watchState: false,\n            getSlideIndex (_s, hash) {\n                if (swiper.virtual && swiper.params.virtual.enabled) {\n                    const slideWithHash = swiper.slides.filter((slideEl)=>slideEl.getAttribute(\"data-hash\") === hash)[0];\n                    if (!slideWithHash) return 0;\n                    const index = parseInt(slideWithHash.getAttribute(\"data-swiper-slide-index\"), 10);\n                    return index;\n                }\n                return swiper.getSlideIndex((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash=\"${hash}\"], swiper-slide[data-hash=\"${hash}\"]`)[0]);\n            }\n        }\n    });\n    const onHashChange = ()=>{\n        emit(\"hashChange\");\n        const newHash = document.location.hash.replace(\"#\", \"\");\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") : \"\";\n        if (newHash !== activeSlideHash) {\n            const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\n            if (typeof newIndex === \"undefined\" || Number.isNaN(newIndex)) return;\n            swiper.slideTo(newIndex);\n        }\n    };\n    const setHash = ()=>{\n        if (!initialized || !swiper.params.hashNavigation.enabled) return;\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") || activeSlideEl.getAttribute(\"data-history\") : \"\";\n        if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n            window.history.replaceState(null, null, `#${activeSlideHash}` || \"\");\n            emit(\"hashSet\");\n        } else {\n            document.location.hash = activeSlideHash || \"\";\n            emit(\"hashSet\");\n        }\n    };\n    const init = ()=>{\n        if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n        initialized = true;\n        const hash = document.location.hash.replace(\"#\", \"\");\n        if (hash) {\n            const speed = 0;\n            const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\n            swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\n        }\n        if (swiper.params.hashNavigation.watchState) {\n            window.addEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    const destroy = ()=>{\n        if (swiper.params.hashNavigation.watchState) {\n            window.removeEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHash();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHash();\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/hash-navigation.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/history.mjs":
/*!**************************************************!*\
  !*** ../node_modules/swiper/modules/history.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction History(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        history: {\n            enabled: false,\n            root: \"\",\n            replaceState: false,\n            key: \"slides\",\n            keepQuery: false\n        }\n    });\n    let initialized = false;\n    let paths = {};\n    const slugify = (text)=>{\n        return text.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n    };\n    const getPathValues = (urlOverride)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        let location;\n        if (urlOverride) {\n            location = new URL(urlOverride);\n        } else {\n            location = window.location;\n        }\n        const pathArray = location.pathname.slice(1).split(\"/\").filter((part)=>part !== \"\");\n        const total = pathArray.length;\n        const key = pathArray[total - 2];\n        const value = pathArray[total - 1];\n        return {\n            key,\n            value\n        };\n    };\n    const setHistory = (key, index)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!initialized || !swiper.params.history.enabled) return;\n        let location;\n        if (swiper.params.url) {\n            location = new URL(swiper.params.url);\n        } else {\n            location = window.location;\n        }\n        const slide = swiper.slides[index];\n        let value = slugify(slide.getAttribute(\"data-history\"));\n        if (swiper.params.history.root.length > 0) {\n            let root = swiper.params.history.root;\n            if (root[root.length - 1] === \"/\") root = root.slice(0, root.length - 1);\n            value = `${root}/${key ? `${key}/` : \"\"}${value}`;\n        } else if (!location.pathname.includes(key)) {\n            value = `${key ? `${key}/` : \"\"}${value}`;\n        }\n        if (swiper.params.history.keepQuery) {\n            value += location.search;\n        }\n        const currentState = window.history.state;\n        if (currentState && currentState.value === value) {\n            return;\n        }\n        if (swiper.params.history.replaceState) {\n            window.history.replaceState({\n                value\n            }, null, value);\n        } else {\n            window.history.pushState({\n                value\n            }, null, value);\n        }\n    };\n    const scrollToSlide = (speed, value, runCallbacks)=>{\n        if (value) {\n            for(let i = 0, length = swiper.slides.length; i < length; i += 1){\n                const slide = swiper.slides[i];\n                const slideHistory = slugify(slide.getAttribute(\"data-history\"));\n                if (slideHistory === value) {\n                    const index = swiper.getSlideIndex(slide);\n                    swiper.slideTo(index, speed, runCallbacks);\n                }\n            }\n        } else {\n            swiper.slideTo(0, speed, runCallbacks);\n        }\n    };\n    const setHistoryPopState = ()=>{\n        paths = getPathValues(swiper.params.url);\n        scrollToSlide(swiper.params.speed, paths.value, false);\n    };\n    const init = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history) return;\n        if (!window.history || !window.history.pushState) {\n            swiper.params.history.enabled = false;\n            swiper.params.hashNavigation.enabled = true;\n            return;\n        }\n        initialized = true;\n        paths = getPathValues(swiper.params.url);\n        if (!paths.key && !paths.value) {\n            if (!swiper.params.history.replaceState) {\n                window.addEventListener(\"popstate\", setHistoryPopState);\n            }\n            return;\n        }\n        scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n        if (!swiper.params.history.replaceState) {\n            window.addEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    const destroy = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history.replaceState) {\n            window.removeEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.history.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.history.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/history.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/index.mjs":
/*!************************************************!*\
  !*** ../node_modules/swiper/modules/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A11y: () => (/* reexport safe */ _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Autoplay: () => (/* reexport safe */ _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   Controller: () => (/* reexport safe */ _controller_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   EffectCards: () => (/* reexport safe */ _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__[\"default\"]),\n/* harmony export */   EffectCoverflow: () => (/* reexport safe */ _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__[\"default\"]),\n/* harmony export */   EffectCreative: () => (/* reexport safe */ _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__[\"default\"]),\n/* harmony export */   EffectCube: () => (/* reexport safe */ _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n/* harmony export */   EffectFade: () => (/* reexport safe */ _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"]),\n/* harmony export */   EffectFlip: () => (/* reexport safe */ _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__[\"default\"]),\n/* harmony export */   FreeMode: () => (/* reexport safe */ _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   Grid: () => (/* reexport safe */ _grid_mjs__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n/* harmony export */   HashNavigation: () => (/* reexport safe */ _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   History: () => (/* reexport safe */ _history_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   Keyboard: () => (/* reexport safe */ _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   Manipulation: () => (/* reexport safe */ _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n/* harmony export */   Mousewheel: () => (/* reexport safe */ _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   Navigation: () => (/* reexport safe */ _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   Pagination: () => (/* reexport safe */ _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   Parallax: () => (/* reexport safe */ _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   Scrollbar: () => (/* reexport safe */ _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   Thumbs: () => (/* reexport safe */ _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   Virtual: () => (/* reexport safe */ _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   Zoom: () => (/* reexport safe */ _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual.mjs */ \"(ssr)/../node_modules/swiper/modules/virtual.mjs\");\n/* harmony import */ var _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard.mjs */ \"(ssr)/../node_modules/swiper/modules/keyboard.mjs\");\n/* harmony import */ var _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mousewheel.mjs */ \"(ssr)/../node_modules/swiper/modules/mousewheel.mjs\");\n/* harmony import */ var _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation.mjs */ \"(ssr)/../node_modules/swiper/modules/navigation.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination.mjs */ \"(ssr)/../node_modules/swiper/modules/pagination.mjs\");\n/* harmony import */ var _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar.mjs */ \"(ssr)/../node_modules/swiper/modules/scrollbar.mjs\");\n/* harmony import */ var _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parallax.mjs */ \"(ssr)/../node_modules/swiper/modules/parallax.mjs\");\n/* harmony import */ var _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zoom.mjs */ \"(ssr)/../node_modules/swiper/modules/zoom.mjs\");\n/* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controller.mjs */ \"(ssr)/../node_modules/swiper/modules/controller.mjs\");\n/* harmony import */ var _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./a11y.mjs */ \"(ssr)/../node_modules/swiper/modules/a11y.mjs\");\n/* harmony import */ var _history_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./history.mjs */ \"(ssr)/../node_modules/swiper/modules/history.mjs\");\n/* harmony import */ var _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hash-navigation.mjs */ \"(ssr)/../node_modules/swiper/modules/hash-navigation.mjs\");\n/* harmony import */ var _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./autoplay.mjs */ \"(ssr)/../node_modules/swiper/modules/autoplay.mjs\");\n/* harmony import */ var _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./thumbs.mjs */ \"(ssr)/../node_modules/swiper/modules/thumbs.mjs\");\n/* harmony import */ var _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./free-mode.mjs */ \"(ssr)/../node_modules/swiper/modules/free-mode.mjs\");\n/* harmony import */ var _grid_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./grid.mjs */ \"(ssr)/../node_modules/swiper/modules/grid.mjs\");\n/* harmony import */ var _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./manipulation.mjs */ \"(ssr)/../node_modules/swiper/modules/manipulation.mjs\");\n/* harmony import */ var _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./effect-fade.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-fade.mjs\");\n/* harmony import */ var _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./effect-cube.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-cube.mjs\");\n/* harmony import */ var _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./effect-flip.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-flip.mjs\");\n/* harmony import */ var _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./effect-coverflow.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-coverflow.mjs\");\n/* harmony import */ var _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./effect-creative.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-creative.mjs\");\n/* harmony import */ var _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./effect-cards.mjs */ \"(ssr)/../node_modules/swiper/modules/effect-cards.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ0U7QUFDSTtBQUNBO0FBQ0E7QUFDRjtBQUNGO0FBQ1I7QUFDWTtBQUNaO0FBQ007QUFDZTtBQUNiO0FBQ0o7QUFDSztBQUNUO0FBQ2dCO0FBQ0g7QUFDQTtBQUNBO0FBQ1U7QUFDRjtBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9pbmRleC5tanM/YjU2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHQgYXMgVmlydHVhbH0gZnJvbSAnLi92aXJ0dWFsLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgS2V5Ym9hcmR9IGZyb20gJy4va2V5Ym9hcmQubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBNb3VzZXdoZWVsfSBmcm9tICcuL21vdXNld2hlZWwubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBOYXZpZ2F0aW9ufSBmcm9tICcuL25hdmlnYXRpb24ubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQYWdpbmF0aW9ufSBmcm9tICcuL3BhZ2luYXRpb24ubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBTY3JvbGxiYXJ9IGZyb20gJy4vc2Nyb2xsYmFyLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgUGFyYWxsYXh9IGZyb20gJy4vcGFyYWxsYXgubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBab29tfSBmcm9tICcuL3pvb20ubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBDb250cm9sbGVyfSBmcm9tICcuL2NvbnRyb2xsZXIubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBBMTF5fSBmcm9tICcuL2ExMXkubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBIaXN0b3J5fSBmcm9tICcuL2hpc3RvcnkubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBIYXNoTmF2aWdhdGlvbn0gZnJvbSAnLi9oYXNoLW5hdmlnYXRpb24ubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBBdXRvcGxheX0gZnJvbSAnLi9hdXRvcGxheS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFRodW1ic30gZnJvbSAnLi90aHVtYnMubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBGcmVlTW9kZX0gZnJvbSAnLi9mcmVlLW1vZGUubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBHcmlkfSBmcm9tICcuL2dyaWQubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBNYW5pcHVsYXRpb259IGZyb20gJy4vbWFuaXB1bGF0aW9uLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0RmFkZX0gZnJvbSAnLi9lZmZlY3QtZmFkZS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdEN1YmV9IGZyb20gJy4vZWZmZWN0LWN1YmUubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RGbGlwfSBmcm9tICcuL2VmZmVjdC1mbGlwLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0Q292ZXJmbG93fSBmcm9tICcuL2VmZmVjdC1jb3ZlcmZsb3cubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDcmVhdGl2ZX0gZnJvbSAnLi9lZmZlY3QtY3JlYXRpdmUubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDYXJkc30gZnJvbSAnLi9lZmZlY3QtY2FyZHMubWpzJzsiXSwibmFtZXMiOlsiZGVmYXVsdCIsIlZpcnR1YWwiLCJLZXlib2FyZCIsIk1vdXNld2hlZWwiLCJOYXZpZ2F0aW9uIiwiUGFnaW5hdGlvbiIsIlNjcm9sbGJhciIsIlBhcmFsbGF4IiwiWm9vbSIsIkNvbnRyb2xsZXIiLCJBMTF5IiwiSGlzdG9yeSIsIkhhc2hOYXZpZ2F0aW9uIiwiQXV0b3BsYXkiLCJUaHVtYnMiLCJGcmVlTW9kZSIsIkdyaWQiLCJNYW5pcHVsYXRpb24iLCJFZmZlY3RGYWRlIiwiRWZmZWN0Q3ViZSIsIkVmZmVjdEZsaXAiLCJFZmZlY3RDb3ZlcmZsb3ciLCJFZmZlY3RDcmVhdGl2ZSIsIkVmZmVjdENhcmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/keyboard.mjs":
/*!***************************************************!*\
  !*** ../node_modules/swiper/modules/keyboard.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Keyboard(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    swiper.keyboard = {\n        enabled: false\n    };\n    extendParams({\n        keyboard: {\n            enabled: false,\n            onlyInViewport: true,\n            pageUpDown: true\n        }\n    });\n    function handle(event) {\n        if (!swiper.enabled) return;\n        const { rtlTranslate: rtl } = swiper;\n        let e = event;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        const kc = e.keyCode || e.charCode;\n        const pageUpDown = swiper.params.keyboard.pageUpDown;\n        const isPageUp = pageUpDown && kc === 33;\n        const isPageDown = pageUpDown && kc === 34;\n        const isArrowLeft = kc === 37;\n        const isArrowRight = kc === 39;\n        const isArrowUp = kc === 38;\n        const isArrowDown = kc === 40;\n        // Directions locks\n        if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n            return false;\n        }\n        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n            return undefined;\n        }\n        if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === \"input\" || document.activeElement.nodeName.toLowerCase() === \"textarea\")) {\n            return undefined;\n        }\n        if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n            let inView = false;\n            // Check that swiper should be inside of visible area of window\n            if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {\n                return undefined;\n            }\n            const el = swiper.el;\n            const swiperWidth = el.clientWidth;\n            const swiperHeight = el.clientHeight;\n            const windowWidth = window.innerWidth;\n            const windowHeight = window.innerHeight;\n            const swiperOffset = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(el);\n            if (rtl) swiperOffset.left -= el.scrollLeft;\n            const swiperCoord = [\n                [\n                    swiperOffset.left,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left,\n                    swiperOffset.top + swiperHeight\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top + swiperHeight\n                ]\n            ];\n            for(let i = 0; i < swiperCoord.length; i += 1){\n                const point = swiperCoord[i];\n                if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n                    if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n                    inView = true;\n                }\n            }\n            if (!inView) return undefined;\n        }\n        if (swiper.isHorizontal()) {\n            if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n            if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n        } else {\n            if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if (isPageDown || isArrowDown) swiper.slideNext();\n            if (isPageUp || isArrowUp) swiper.slidePrev();\n        }\n        emit(\"keyPress\", kc);\n        return undefined;\n    }\n    function enable() {\n        if (swiper.keyboard.enabled) return;\n        document.addEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = true;\n    }\n    function disable() {\n        if (!swiper.keyboard.enabled) return;\n        document.removeEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = false;\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.keyboard.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.keyboard.enabled) {\n            disable();\n        }\n    });\n    Object.assign(swiper.keyboard, {\n        enable,\n        disable\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/keyboard.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/manipulation.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/swiper/modules/manipulation.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Manipulation)\n/* harmony export */ });\nfunction appendSlide(slides) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    const appendElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            tempDOM.innerHTML = slideEl;\n            slidesEl.append(tempDOM.children[0]);\n            tempDOM.innerHTML = \"\";\n        } else {\n            slidesEl.append(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) appendElement(slides[i]);\n        }\n    } else {\n        appendElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n}\nfunction prependSlide(slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndex + 1;\n    const prependElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            tempDOM.innerHTML = slideEl;\n            slidesEl.prepend(tempDOM.children[0]);\n            tempDOM.innerHTML = \"\";\n        } else {\n            slidesEl.prepend(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) prependElement(slides[i]);\n        }\n        newActiveIndex = activeIndex + slides.length;\n    } else {\n        prependElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    swiper.slideTo(newActiveIndex, 0, false);\n}\nfunction addSlide(index, slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n        swiper.recalcSlides();\n    }\n    const baseLength = swiper.slides.length;\n    if (index <= 0) {\n        swiper.prependSlide(slides);\n        return;\n    }\n    if (index >= baseLength) {\n        swiper.appendSlide(slides);\n        return;\n    }\n    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n    const slidesBuffer = [];\n    for(let i = baseLength - 1; i >= index; i -= 1){\n        const currentSlide = swiper.slides[i];\n        currentSlide.remove();\n        slidesBuffer.unshift(currentSlide);\n    }\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) slidesEl.append(slides[i]);\n        }\n        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n    } else {\n        slidesEl.append(slides);\n    }\n    for(let i = 0; i < slidesBuffer.length; i += 1){\n        slidesEl.append(slidesBuffer[i]);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeSlide(slidesIndexes) {\n    const swiper = this;\n    const { params, activeIndex } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndexBuffer;\n    let indexToRemove;\n    if (typeof slidesIndexes === \"object\" && \"length\" in slidesIndexes) {\n        for(let i = 0; i < slidesIndexes.length; i += 1){\n            indexToRemove = slidesIndexes[i];\n            if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n            if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        }\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    } else {\n        indexToRemove = slidesIndexes;\n        if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeAllSlides() {\n    const swiper = this;\n    const slidesIndexes = [];\n    for(let i = 0; i < swiper.slides.length; i += 1){\n        slidesIndexes.push(i);\n    }\n    swiper.removeSlide(slidesIndexes);\n}\nfunction Manipulation(_ref) {\n    let { swiper } = _ref;\n    Object.assign(swiper, {\n        appendSlide: appendSlide.bind(swiper),\n        prependSlide: prependSlide.bind(swiper),\n        addSlide: addSlide.bind(swiper),\n        removeSlide: removeSlide.bind(swiper),\n        removeAllSlides: removeAllSlides.bind(swiper)\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/manipulation.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/mousewheel.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/modules/mousewheel.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Mousewheel)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Mousewheel(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        mousewheel: {\n            enabled: false,\n            releaseOnEdges: false,\n            invert: false,\n            forceToAxis: false,\n            sensitivity: 1,\n            eventsTarget: \"container\",\n            thresholdDelta: null,\n            thresholdTime: null,\n            noMousewheelClass: \"swiper-no-mousewheel\"\n        }\n    });\n    swiper.mousewheel = {\n        enabled: false\n    };\n    let timeout;\n    let lastScrollTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\n    let lastEventBeforeSnap;\n    const recentWheelEvents = [];\n    function normalize(e) {\n        // Reasonable defaults\n        const PIXEL_STEP = 10;\n        const LINE_HEIGHT = 40;\n        const PAGE_HEIGHT = 800;\n        let sX = 0;\n        let sY = 0; // spinX, spinY\n        let pX = 0;\n        let pY = 0; // pixelX, pixelY\n        // Legacy\n        if (\"detail\" in e) {\n            sY = e.detail;\n        }\n        if (\"wheelDelta\" in e) {\n            sY = -e.wheelDelta / 120;\n        }\n        if (\"wheelDeltaY\" in e) {\n            sY = -e.wheelDeltaY / 120;\n        }\n        if (\"wheelDeltaX\" in e) {\n            sX = -e.wheelDeltaX / 120;\n        }\n        // side scrolling on FF with DOMMouseScroll\n        if (\"axis\" in e && e.axis === e.HORIZONTAL_AXIS) {\n            sX = sY;\n            sY = 0;\n        }\n        pX = sX * PIXEL_STEP;\n        pY = sY * PIXEL_STEP;\n        if (\"deltaY\" in e) {\n            pY = e.deltaY;\n        }\n        if (\"deltaX\" in e) {\n            pX = e.deltaX;\n        }\n        if (e.shiftKey && !pX) {\n            // if user scrolls with shift he wants horizontal scroll\n            pX = pY;\n            pY = 0;\n        }\n        if ((pX || pY) && e.deltaMode) {\n            if (e.deltaMode === 1) {\n                // delta in LINE units\n                pX *= LINE_HEIGHT;\n                pY *= LINE_HEIGHT;\n            } else {\n                // delta in PAGE units\n                pX *= PAGE_HEIGHT;\n                pY *= PAGE_HEIGHT;\n            }\n        }\n        // Fall-back if spin cannot be determined\n        if (pX && !sX) {\n            sX = pX < 1 ? -1 : 1;\n        }\n        if (pY && !sY) {\n            sY = pY < 1 ? -1 : 1;\n        }\n        return {\n            spinX: sX,\n            spinY: sY,\n            pixelX: pX,\n            pixelY: pY\n        };\n    }\n    function handleMouseEnter() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = true;\n    }\n    function handleMouseLeave() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = false;\n    }\n    function animateSlider(newEvent) {\n        if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n            // Prevent if delta of wheel scroll delta is below configured threshold\n            return false;\n        }\n        if (swiper.params.mousewheel.thresholdTime && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n            // Prevent if time between scrolls is below configured threshold\n            return false;\n        }\n        // If the movement is NOT big enough and\n        // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n        //   Don't go any further (avoid insignificant scroll movement).\n        if (newEvent.delta >= 6 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)() - lastScrollTime < 60) {\n            // Return false as a default\n            return true;\n        }\n        // If user is scrolling towards the end:\n        //   If the slider hasn't hit the latest slide or\n        //   if the slider is a loop and\n        //   if the slider isn't moving right now:\n        //     Go to next slide and\n        //     emit a scroll event.\n        // Else (the user is scrolling towards the beginning) and\n        // if the slider hasn't hit the first slide or\n        // if the slider is a loop and\n        // if the slider isn't moving right now:\n        //   Go to prev slide and\n        //   emit a scroll event.\n        if (newEvent.direction < 0) {\n            if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n                swiper.slideNext();\n                emit(\"scroll\", newEvent.raw);\n            }\n        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n            swiper.slidePrev();\n            emit(\"scroll\", newEvent.raw);\n        }\n        // If you got here is because an animation has been triggered so store the current time\n        lastScrollTime = new window.Date().getTime();\n        // Return false as a default\n        return false;\n    }\n    function releaseScroll(newEvent) {\n        const params = swiper.params.mousewheel;\n        if (newEvent.direction < 0) {\n            if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n                // Return true to animate scroll on edges\n                return true;\n            }\n        } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n            // Return true to animate scroll on edges\n            return true;\n        }\n        return false;\n    }\n    function handle(event1) {\n        let e = event1;\n        let disableParentSwiper = true;\n        if (!swiper.enabled) return;\n        // Ignore event if the target or its parents have the swiper-no-mousewheel class\n        if (event1.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;\n        const params = swiper.params.mousewheel;\n        if (swiper.params.cssMode) {\n            e.preventDefault();\n        }\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        const targetElContainsTarget = targetEl && targetEl.contains(e.target);\n        if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        let delta = 0;\n        const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n        const data = normalize(e);\n        if (params.forceToAxis) {\n            if (swiper.isHorizontal()) {\n                if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;\n                else return true;\n            } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;\n            else return true;\n        } else {\n            delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n        }\n        if (delta === 0) return true;\n        if (params.invert) delta = -delta;\n        // Get the scroll positions\n        let positions = swiper.getTranslate() + delta * params.sensitivity;\n        if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n        if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\n        // When loop is true:\n        //     the disableParentSwiper will be true.\n        // When loop is false:\n        //     if the scroll positions is not on edge,\n        //     then the disableParentSwiper will be true.\n        //     if the scroll on edge positions,\n        //     then the disableParentSwiper will be false.\n        disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n        if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n        if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n            // Register the new event in a variable which stores the relevant data\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta),\n                raw: event1\n            };\n            // Keep the most recent events\n            if (recentWheelEvents.length >= 2) {\n                recentWheelEvents.shift(); // only store the last N events\n            }\n            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n            recentWheelEvents.push(newEvent);\n            // If there is at least one previous recorded event:\n            //   If direction has changed or\n            //   if the scroll is quicker than the previous one:\n            //     Animate the slider.\n            // Else (this is the first time the wheel is moved):\n            //     Animate the slider.\n            if (prevEvent) {\n                if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n                    animateSlider(newEvent);\n                }\n            } else {\n                animateSlider(newEvent);\n            }\n            // If it's time to release the scroll:\n            //   Return now so you don't hit the preventDefault.\n            if (releaseScroll(newEvent)) {\n                return true;\n            }\n        } else {\n            // Freemode or scrollContainer:\n            // If we recently snapped after a momentum scroll, then ignore wheel events\n            // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n            // or if it's a new scroll (larger delta or inverse sign as last event before\n            // an end-of-momentum snap).\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta)\n            };\n            const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n            if (!ignoreWheelEvents) {\n                lastEventBeforeSnap = undefined;\n                let position = swiper.getTranslate() + delta * params.sensitivity;\n                const wasBeginning = swiper.isBeginning;\n                const wasEnd = swiper.isEnd;\n                if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n                if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n                swiper.setTransition(0);\n                swiper.setTranslate(position);\n                swiper.updateProgress();\n                swiper.updateActiveIndex();\n                swiper.updateSlidesClasses();\n                if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n                    swiper.updateSlidesClasses();\n                }\n                if (swiper.params.loop) {\n                    swiper.loopFix({\n                        direction: newEvent.direction < 0 ? \"next\" : \"prev\",\n                        byMousewheel: true\n                    });\n                }\n                if (swiper.params.freeMode.sticky) {\n                    // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n                    // the end of a momentum scroll by storing recent (N=15?) wheel events.\n                    // 1. do all N events have decreasing or same (absolute value) delta?\n                    // 2. did all N events arrive in the last M (M=500?) msecs?\n                    // 3. does the earliest event have an (absolute value) delta that's\n                    //    at least P (P=1?) larger than the most recent event's delta?\n                    // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n                    // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n                    // Snap immediately and ignore remaining wheel events in this scroll.\n                    // See comment above for \"remaining wheel events in this scroll\" determination.\n                    // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n                    clearTimeout(timeout);\n                    timeout = undefined;\n                    if (recentWheelEvents.length >= 15) {\n                        recentWheelEvents.shift(); // only store the last N events\n                    }\n                    const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n                    const firstEvent = recentWheelEvents[0];\n                    recentWheelEvents.push(newEvent);\n                    if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n                        // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n                        recentWheelEvents.splice(0);\n                    } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n                        // We're at the end of the deceleration of a momentum scroll, so there's no need\n                        // to wait for more events. Snap ASAP on the next tick.\n                        // Also, because there's some remaining momentum we'll bias the snap in the\n                        // direction of the ongoing scroll because it's better UX for the scroll to snap\n                        // in the same direction as the scroll instead of reversing to snap.  Therefore,\n                        // if it's already scrolled more than 20% in the current direction, keep going.\n                        const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n                        lastEventBeforeSnap = newEvent;\n                        recentWheelEvents.splice(0);\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 0); // no delay; move on next tick\n                    }\n                    if (!timeout) {\n                        // if we get here, then we haven't detected the end of a momentum scroll, so\n                        // we'll consider a scroll \"complete\" when there haven't been any wheel events\n                        // for 500ms.\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            const snapToThreshold = 0.5;\n                            lastEventBeforeSnap = newEvent;\n                            recentWheelEvents.splice(0);\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 500);\n                    }\n                }\n                // Emit event\n                if (!ignoreWheelEvents) emit(\"scroll\", e);\n                // Stop autoplay\n                if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();\n                // Return page scroll on edge positions\n                if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {\n                    return true;\n                }\n            }\n        }\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n        return false;\n    }\n    function events(method) {\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        targetEl[method](\"mouseenter\", handleMouseEnter);\n        targetEl[method](\"mouseleave\", handleMouseLeave);\n        targetEl[method](\"wheel\", handle);\n    }\n    function enable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.removeEventListener(\"wheel\", handle);\n            return true;\n        }\n        if (swiper.mousewheel.enabled) return false;\n        events(\"addEventListener\");\n        swiper.mousewheel.enabled = true;\n        return true;\n    }\n    function disable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.addEventListener(event, handle);\n            return true;\n        }\n        if (!swiper.mousewheel.enabled) return false;\n        events(\"removeEventListener\");\n        swiper.mousewheel.enabled = false;\n        return true;\n    }\n    on(\"init\", ()=>{\n        if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n            disable();\n        }\n        if (swiper.params.mousewheel.enabled) enable();\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.cssMode) {\n            enable();\n        }\n        if (swiper.mousewheel.enabled) disable();\n    });\n    Object.assign(swiper.mousewheel, {\n        enable,\n        disable\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/mousewheel.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/navigation.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/modules/navigation.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Navigation)\n/* harmony export */ });\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/../node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n\nfunction Navigation(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    extendParams({\n        navigation: {\n            nextEl: null,\n            prevEl: null,\n            hideOnClick: false,\n            disabledClass: \"swiper-button-disabled\",\n            hiddenClass: \"swiper-button-hidden\",\n            lockClass: \"swiper-button-lock\",\n            navigationDisabledClass: \"swiper-navigation-disabled\"\n        }\n    });\n    swiper.navigation = {\n        nextEl: null,\n        prevEl: null\n    };\n    const makeElementsArray = (el)=>(Array.isArray(el) ? el : [\n            el\n        ]).filter((e)=>!!e);\n    function getEl(el) {\n        let res;\n        if (el && typeof el === \"string\" && swiper.isElement) {\n            res = swiper.el.querySelector(el);\n            if (res) return res;\n        }\n        if (el) {\n            if (typeof el === \"string\") res = [\n                ...document.querySelectorAll(el)\n            ];\n            if (swiper.params.uniqueNavElements && typeof el === \"string\" && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\n                res = swiper.el.querySelector(el);\n            }\n        }\n        if (el && !res) return el;\n        // if (Array.isArray(res) && res.length === 1) res = res[0];\n        return res;\n    }\n    function toggleEl(el, disabled) {\n        const params = swiper.params.navigation;\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            if (subEl) {\n                subEl.classList[disabled ? \"add\" : \"remove\"](...params.disabledClass.split(\" \"));\n                if (subEl.tagName === \"BUTTON\") subEl.disabled = disabled;\n                if (swiper.params.watchOverflow && swiper.enabled) {\n                    subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n                }\n            }\n        });\n    }\n    function update() {\n        // Update Navigation Buttons\n        const { nextEl, prevEl } = swiper.navigation;\n        if (swiper.params.loop) {\n            toggleEl(prevEl, false);\n            toggleEl(nextEl, false);\n            return;\n        }\n        toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\n        toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\n    }\n    function onPrevClick(e) {\n        e.preventDefault();\n        if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slidePrev();\n        emit(\"navigationPrev\");\n    }\n    function onNextClick(e) {\n        e.preventDefault();\n        if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slideNext();\n        emit(\"navigationNext\");\n    }\n    function init() {\n        const params = swiper.params.navigation;\n        swiper.params.navigation = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n            nextEl: \"swiper-button-next\",\n            prevEl: \"swiper-button-prev\"\n        });\n        if (!(params.nextEl || params.prevEl)) return;\n        let nextEl = getEl(params.nextEl);\n        let prevEl = getEl(params.prevEl);\n        Object.assign(swiper.navigation, {\n            nextEl,\n            prevEl\n        });\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        const initButton = (el, dir)=>{\n            if (el) {\n                el.addEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            }\n            if (!swiper.enabled && el) {\n                el.classList.add(...params.lockClass.split(\" \"));\n            }\n        };\n        nextEl.forEach((el)=>initButton(el, \"next\"));\n        prevEl.forEach((el)=>initButton(el, \"prev\"));\n    }\n    function destroy() {\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        const destroyButton = (el, dir)=>{\n            el.removeEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            el.classList.remove(...swiper.params.navigation.disabledClass.split(\" \"));\n        };\n        nextEl.forEach((el)=>destroyButton(el, \"next\"));\n        prevEl.forEach((el)=>destroyButton(el, \"prev\"));\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.navigation.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            update();\n        }\n    });\n    on(\"toEdge fromEdge lock unlock\", ()=>{\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        if (swiper.enabled) {\n            update();\n            return;\n        }\n        [\n            ...nextEl,\n            ...prevEl\n        ].filter((el)=>!!el).forEach((el)=>el.classList.add(swiper.params.navigation.lockClass));\n    });\n    on(\"click\", (_s, e)=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = makeElementsArray(nextEl);\n        prevEl = makeElementsArray(prevEl);\n        const targetEl = e.target;\n        if (swiper.params.navigation.hideOnClick && !prevEl.includes(targetEl) && !nextEl.includes(targetEl)) {\n            if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n            let isHidden;\n            if (nextEl.length) {\n                isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            } else if (prevEl.length) {\n                isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            }\n            if (isHidden === true) {\n                emit(\"navigationShow\");\n            } else {\n                emit(\"navigationHide\");\n            }\n            [\n                ...nextEl,\n                ...prevEl\n            ].filter((el)=>!!el).forEach((el)=>el.classList.toggle(swiper.params.navigation.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        init();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        destroy();\n    };\n    Object.assign(swiper.navigation, {\n        enable,\n        disable,\n        update,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/navigation.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/pagination.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/modules/pagination.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pagination)\n/* harmony export */ });\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/../node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/../node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\n\nfunction Pagination(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const pfx = \"swiper-pagination\";\n    extendParams({\n        pagination: {\n            el: null,\n            bulletElement: \"span\",\n            clickable: false,\n            hideOnClick: false,\n            renderBullet: null,\n            renderProgressbar: null,\n            renderFraction: null,\n            renderCustom: null,\n            progressbarOpposite: false,\n            type: \"bullets\",\n            // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n            dynamicBullets: false,\n            dynamicMainBullets: 1,\n            formatFractionCurrent: (number)=>number,\n            formatFractionTotal: (number)=>number,\n            bulletClass: `${pfx}-bullet`,\n            bulletActiveClass: `${pfx}-bullet-active`,\n            modifierClass: `${pfx}-`,\n            currentClass: `${pfx}-current`,\n            totalClass: `${pfx}-total`,\n            hiddenClass: `${pfx}-hidden`,\n            progressbarFillClass: `${pfx}-progressbar-fill`,\n            progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n            clickableClass: `${pfx}-clickable`,\n            lockClass: `${pfx}-lock`,\n            horizontalClass: `${pfx}-horizontal`,\n            verticalClass: `${pfx}-vertical`,\n            paginationDisabledClass: `${pfx}-disabled`\n        }\n    });\n    swiper.pagination = {\n        el: null,\n        bullets: []\n    };\n    let bulletSize;\n    let dynamicBulletIndex = 0;\n    const makeElementsArray = (el)=>(Array.isArray(el) ? el : [\n            el\n        ]).filter((e)=>!!e);\n    function isPaginationDisabled() {\n        return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\n    }\n    function setSideBullets(bulletEl, position) {\n        const { bulletActiveClass } = swiper.params.pagination;\n        if (!bulletEl) return;\n        bulletEl = bulletEl[`${position === \"prev\" ? \"previous\" : \"next\"}ElementSibling`];\n        if (bulletEl) {\n            bulletEl.classList.add(`${bulletActiveClass}-${position}`);\n            bulletEl = bulletEl[`${position === \"prev\" ? \"previous\" : \"next\"}ElementSibling`];\n            if (bulletEl) {\n                bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);\n            }\n        }\n    }\n    function onBulletClick(e) {\n        const bulletEl = e.target.closest((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass));\n        if (!bulletEl) {\n            return;\n        }\n        e.preventDefault();\n        const index = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(bulletEl) * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) {\n            if (swiper.realIndex === index) return;\n            swiper.slideToLoop(index);\n        } else {\n            swiper.slideTo(index);\n        }\n    }\n    function update() {\n        // Render || Update Pagination bullets/items\n        const rtl = swiper.rtl;\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        el = makeElementsArray(el);\n        // Current/Total\n        let current;\n        let previousIndex;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n        const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n        if (swiper.params.loop) {\n            previousIndex = swiper.previousRealIndex || 0;\n            current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\n        } else if (typeof swiper.snapIndex !== \"undefined\") {\n            current = swiper.snapIndex;\n            previousIndex = swiper.previousSnapIndex;\n        } else {\n            previousIndex = swiper.previousIndex || 0;\n            current = swiper.activeIndex || 0;\n        }\n        // Types\n        if (params.type === \"bullets\" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n            const bullets = swiper.pagination.bullets;\n            let firstIndex;\n            let lastIndex;\n            let midIndex;\n            if (params.dynamicBullets) {\n                bulletSize = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.f)(bullets[0], swiper.isHorizontal() ? \"width\" : \"height\", true);\n                el.forEach((subEl)=>{\n                    subEl.style[swiper.isHorizontal() ? \"width\" : \"height\"] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;\n                });\n                if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\n                    dynamicBulletIndex += current - (previousIndex || 0);\n                    if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n                        dynamicBulletIndex = params.dynamicMainBullets - 1;\n                    } else if (dynamicBulletIndex < 0) {\n                        dynamicBulletIndex = 0;\n                    }\n                }\n                firstIndex = Math.max(current - dynamicBulletIndex, 0);\n                lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n                midIndex = (lastIndex + firstIndex) / 2;\n            }\n            bullets.forEach((bulletEl)=>{\n                const classesToRemove = [\n                    ...[\n                        \"\",\n                        \"-next\",\n                        \"-next-next\",\n                        \"-prev\",\n                        \"-prev-prev\",\n                        \"-main\"\n                    ].map((suffix)=>`${params.bulletActiveClass}${suffix}`)\n                ].map((s)=>typeof s === \"string\" && s.includes(\" \") ? s.split(\" \") : s).flat();\n                bulletEl.classList.remove(...classesToRemove);\n            });\n            if (el.length > 1) {\n                bullets.forEach((bullet)=>{\n                    const bulletIndex = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(bullet);\n                    if (bulletIndex === current) {\n                        bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                    } else if (swiper.isElement) {\n                        bullet.setAttribute(\"part\", \"bullet\");\n                    }\n                    if (params.dynamicBullets) {\n                        if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n                            bullet.classList.add(...`${params.bulletActiveClass}-main`.split(\" \"));\n                        }\n                        if (bulletIndex === firstIndex) {\n                            setSideBullets(bullet, \"prev\");\n                        }\n                        if (bulletIndex === lastIndex) {\n                            setSideBullets(bullet, \"next\");\n                        }\n                    }\n                });\n            } else {\n                const bullet = bullets[current];\n                if (bullet) {\n                    bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                }\n                if (swiper.isElement) {\n                    bullets.forEach((bulletEl, bulletIndex)=>{\n                        bulletEl.setAttribute(\"part\", bulletIndex === current ? \"bullet-active\" : \"bullet\");\n                    });\n                }\n                if (params.dynamicBullets) {\n                    const firstDisplayedBullet = bullets[firstIndex];\n                    const lastDisplayedBullet = bullets[lastIndex];\n                    for(let i = firstIndex; i <= lastIndex; i += 1){\n                        if (bullets[i]) {\n                            bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(\" \"));\n                        }\n                    }\n                    setSideBullets(firstDisplayedBullet, \"prev\");\n                    setSideBullets(lastDisplayedBullet, \"next\");\n                }\n            }\n            if (params.dynamicBullets) {\n                const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n                const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n                const offsetProp = rtl ? \"right\" : \"left\";\n                bullets.forEach((bullet)=>{\n                    bullet.style[swiper.isHorizontal() ? offsetProp : \"top\"] = `${bulletsOffset}px`;\n                });\n            }\n        }\n        el.forEach((subEl, subElIndex)=>{\n            if (params.type === \"fraction\") {\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.currentClass)).forEach((fractionEl)=>{\n                    fractionEl.textContent = params.formatFractionCurrent(current + 1);\n                });\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.totalClass)).forEach((totalEl)=>{\n                    totalEl.textContent = params.formatFractionTotal(total);\n                });\n            }\n            if (params.type === \"progressbar\") {\n                let progressbarDirection;\n                if (params.progressbarOpposite) {\n                    progressbarDirection = swiper.isHorizontal() ? \"vertical\" : \"horizontal\";\n                } else {\n                    progressbarDirection = swiper.isHorizontal() ? \"horizontal\" : \"vertical\";\n                }\n                const scale = (current + 1) / total;\n                let scaleX = 1;\n                let scaleY = 1;\n                if (progressbarDirection === \"horizontal\") {\n                    scaleX = scale;\n                } else {\n                    scaleY = scale;\n                }\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.progressbarFillClass)).forEach((progressEl)=>{\n                    progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;\n                    progressEl.style.transitionDuration = `${swiper.params.speed}ms`;\n                });\n            }\n            if (params.type === \"custom\" && params.renderCustom) {\n                subEl.innerHTML = params.renderCustom(swiper, current + 1, total);\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n            } else {\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n                emit(\"paginationUpdate\", subEl);\n            }\n            if (swiper.params.watchOverflow && swiper.enabled) {\n                subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n            }\n        });\n    }\n    function render() {\n        // Render Container\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;\n        let el = swiper.pagination.el;\n        el = makeElementsArray(el);\n        let paginationHTML = \"\";\n        if (params.type === \"bullets\") {\n            let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n            if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\n                numberOfBullets = slidesLength;\n            }\n            for(let i = 0; i < numberOfBullets; i += 1){\n                if (params.renderBullet) {\n                    paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n                } else {\n                    // prettier-ignore\n                    paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part=\"bullet\"' : \"\"} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n                }\n            }\n        }\n        if (params.type === \"fraction\") {\n            if (params.renderFraction) {\n                paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n            } else {\n                paginationHTML = `<span class=\"${params.currentClass}\"></span>` + \" / \" + `<span class=\"${params.totalClass}\"></span>`;\n            }\n        }\n        if (params.type === \"progressbar\") {\n            if (params.renderProgressbar) {\n                paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n            } else {\n                paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n            }\n        }\n        swiper.pagination.bullets = [];\n        el.forEach((subEl)=>{\n            if (params.type !== \"custom\") {\n                subEl.innerHTML = paginationHTML || \"\";\n            }\n            if (params.type === \"bullets\") {\n                swiper.pagination.bullets.push(...subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.bulletClass)));\n            }\n        });\n        if (params.type !== \"custom\") {\n            emit(\"paginationRender\", el[0]);\n        }\n    }\n    function init() {\n        swiper.params.pagination = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n            el: \"swiper-pagination\"\n        });\n        const params = swiper.params.pagination;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = [\n                ...document.querySelectorAll(params.el)\n            ];\n        }\n        if (!el) {\n            el = params.el;\n        }\n        if (!el || el.length === 0) return;\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && Array.isArray(el) && el.length > 1) {\n            el = [\n                ...swiper.el.querySelectorAll(params.el)\n            ];\n            // check if it belongs to another nested Swiper\n            if (el.length > 1) {\n                el = el.filter((subEl)=>{\n                    if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(subEl, \".swiper\")[0] !== swiper.el) return false;\n                    return true;\n                })[0];\n            }\n        }\n        if (Array.isArray(el) && el.length === 1) el = el[0];\n        Object.assign(swiper.pagination, {\n            el\n        });\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            if (params.type === \"bullets\" && params.clickable) {\n                subEl.classList.add(...(params.clickableClass || \"\").split(\" \"));\n            }\n            subEl.classList.add(params.modifierClass + params.type);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n            if (params.type === \"bullets\" && params.dynamicBullets) {\n                subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);\n                dynamicBulletIndex = 0;\n                if (params.dynamicMainBullets < 1) {\n                    params.dynamicMainBullets = 1;\n                }\n            }\n            if (params.type === \"progressbar\" && params.progressbarOpposite) {\n                subEl.classList.add(params.progressbarOppositeClass);\n            }\n            if (params.clickable) {\n                subEl.addEventListener(\"click\", onBulletClick);\n            }\n            if (!swiper.enabled) {\n                subEl.classList.add(params.lockClass);\n            }\n        });\n    }\n    function destroy() {\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        if (el) {\n            el = makeElementsArray(el);\n            el.forEach((subEl)=>{\n                subEl.classList.remove(params.hiddenClass);\n                subEl.classList.remove(params.modifierClass + params.type);\n                subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n                if (params.clickable) {\n                    subEl.classList.remove(...(params.clickableClass || \"\").split(\" \"));\n                    subEl.removeEventListener(\"click\", onBulletClick);\n                }\n            });\n        }\n        if (swiper.pagination.bullets) swiper.pagination.bullets.forEach((subEl)=>subEl.classList.remove(...params.bulletActiveClass.split(\" \")));\n    }\n    on(\"changeDirection\", ()=>{\n        if (!swiper.pagination || !swiper.pagination.el) return;\n        const params = swiper.params.pagination;\n        let { el } = swiper.pagination;\n        el = makeElementsArray(el);\n        el.forEach((subEl)=>{\n            subEl.classList.remove(params.horizontalClass, params.verticalClass);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        });\n    });\n    on(\"init\", ()=>{\n        if (swiper.params.pagination.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            render();\n            update();\n        }\n    });\n    on(\"activeIndexChange\", ()=>{\n        if (typeof swiper.snapIndex === \"undefined\") {\n            update();\n        }\n    });\n    on(\"snapIndexChange\", ()=>{\n        update();\n    });\n    on(\"snapGridLengthChange\", ()=>{\n        render();\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { el } = swiper.pagination;\n        if (el) {\n            el = makeElementsArray(el);\n            el.forEach((subEl)=>subEl.classList[swiper.enabled ? \"remove\" : \"add\"](swiper.params.pagination.lockClass));\n        }\n    });\n    on(\"lock unlock\", ()=>{\n        update();\n    });\n    on(\"click\", (_s, e)=>{\n        const targetEl = e.target;\n        const el = makeElementsArray(swiper.pagination.el);\n        if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\n            if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n            const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\n            if (isHidden === true) {\n                emit(\"paginationShow\");\n            } else {\n                emit(\"paginationHide\");\n            }\n            el.forEach((subEl)=>subEl.classList.toggle(swiper.params.pagination.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = makeElementsArray(el);\n            el.forEach((subEl)=>subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\n        }\n        init();\n        render();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = makeElementsArray(el);\n            el.forEach((subEl)=>subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.pagination, {\n        enable,\n        disable,\n        render,\n        update,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/pagination.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/parallax.mjs":
/*!***************************************************!*\
  !*** ../node_modules/swiper/modules/parallax.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Parallax)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction Parallax(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        parallax: {\n            enabled: false\n        }\n    });\n    const elementsSelector = \"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\";\n    const setTransform = (el, progress)=>{\n        const { rtl } = swiper;\n        const rtlFactor = rtl ? -1 : 1;\n        const p = el.getAttribute(\"data-swiper-parallax\") || \"0\";\n        let x = el.getAttribute(\"data-swiper-parallax-x\");\n        let y = el.getAttribute(\"data-swiper-parallax-y\");\n        const scale = el.getAttribute(\"data-swiper-parallax-scale\");\n        const opacity = el.getAttribute(\"data-swiper-parallax-opacity\");\n        const rotate = el.getAttribute(\"data-swiper-parallax-rotate\");\n        if (x || y) {\n            x = x || \"0\";\n            y = y || \"0\";\n        } else if (swiper.isHorizontal()) {\n            x = p;\n            y = \"0\";\n        } else {\n            y = p;\n            x = \"0\";\n        }\n        if (x.indexOf(\"%\") >= 0) {\n            x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n        } else {\n            x = `${x * progress * rtlFactor}px`;\n        }\n        if (y.indexOf(\"%\") >= 0) {\n            y = `${parseInt(y, 10) * progress}%`;\n        } else {\n            y = `${y * progress}px`;\n        }\n        if (typeof opacity !== \"undefined\" && opacity !== null) {\n            const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n            el.style.opacity = currentOpacity;\n        }\n        let transform = `translate3d(${x}, ${y}, 0px)`;\n        if (typeof scale !== \"undefined\" && scale !== null) {\n            const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n            transform += ` scale(${currentScale})`;\n        }\n        if (rotate && typeof rotate !== \"undefined\" && rotate !== null) {\n            const currentRotate = rotate * progress * -1;\n            transform += ` rotate(${currentRotate}deg)`;\n        }\n        el.style.transform = transform;\n    };\n    const setTranslate = ()=>{\n        const { el, slides, progress, snapGrid, isElement } = swiper;\n        const elements = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(el, elementsSelector);\n        if (swiper.isElement) {\n            elements.push(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.hostEl, elementsSelector));\n        }\n        elements.forEach((subEl)=>{\n            setTransform(subEl, progress);\n        });\n        slides.forEach((slideEl, slideIndex)=>{\n            let slideProgress = slideEl.progress;\n            if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== \"auto\") {\n                slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n            }\n            slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n            slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach((subEl)=>{\n                setTransform(subEl, slideProgress);\n            });\n        });\n    };\n    const setTransition = function(duration) {\n        if (duration === void 0) {\n            duration = swiper.params.speed;\n        }\n        const { el, hostEl } = swiper;\n        const elements = [\n            ...el.querySelectorAll(elementsSelector)\n        ];\n        if (swiper.isElement) {\n            elements.push(...hostEl.querySelectorAll(elementsSelector));\n        }\n        elements.forEach((parallaxEl)=>{\n            let parallaxDuration = parseInt(parallaxEl.getAttribute(\"data-swiper-parallax-duration\"), 10) || duration;\n            if (duration === 0) parallaxDuration = 0;\n            parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;\n        });\n    };\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n    });\n    on(\"init\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_swiper, duration)=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTransition(duration);\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/parallax.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/scrollbar.mjs":
/*!****************************************************!*\
  !*** ../node_modules/swiper/modules/scrollbar.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Scrollbar)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/../node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/../node_modules/swiper/shared/classes-to-selector.mjs\");\n\n\n\n\nfunction Scrollbar(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let isTouched = false;\n    let timeout = null;\n    let dragTimeout = null;\n    let dragStartPos;\n    let dragSize;\n    let trackSize;\n    let divider;\n    extendParams({\n        scrollbar: {\n            el: null,\n            dragSize: \"auto\",\n            hide: false,\n            draggable: false,\n            snapOnRelease: true,\n            lockClass: \"swiper-scrollbar-lock\",\n            dragClass: \"swiper-scrollbar-drag\",\n            scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n            horizontalClass: `swiper-scrollbar-horizontal`,\n            verticalClass: `swiper-scrollbar-vertical`\n        }\n    });\n    swiper.scrollbar = {\n        el: null,\n        dragEl: null\n    };\n    function setTranslate() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { dragEl, el } = scrollbar;\n        const params = swiper.params.scrollbar;\n        const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n        let newSize = dragSize;\n        let newPos = (trackSize - dragSize) * progress;\n        if (rtl) {\n            newPos = -newPos;\n            if (newPos > 0) {\n                newSize = dragSize - newPos;\n                newPos = 0;\n            } else if (-newPos + dragSize > trackSize) {\n                newSize = trackSize + newPos;\n            }\n        } else if (newPos < 0) {\n            newSize = dragSize + newPos;\n            newPos = 0;\n        } else if (newPos + dragSize > trackSize) {\n            newSize = trackSize - newPos;\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n            dragEl.style.width = `${newSize}px`;\n        } else {\n            dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n            dragEl.style.height = `${newSize}px`;\n        }\n        if (params.hide) {\n            clearTimeout(timeout);\n            el.style.opacity = 1;\n            timeout = setTimeout(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n    }\n    function setTransition(duration) {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n    }\n    function updateSize() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar } = swiper;\n        const { dragEl, el } = scrollbar;\n        dragEl.style.width = \"\";\n        dragEl.style.height = \"\";\n        trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n        divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n        if (swiper.params.scrollbar.dragSize === \"auto\") {\n            dragSize = trackSize * divider;\n        } else {\n            dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.width = `${dragSize}px`;\n        } else {\n            dragEl.style.height = `${dragSize}px`;\n        }\n        if (divider >= 1) {\n            el.style.display = \"none\";\n        } else {\n            el.style.display = \"\";\n        }\n        if (swiper.params.scrollbar.hide) {\n            el.style.opacity = 0;\n        }\n        if (swiper.params.watchOverflow && swiper.enabled) {\n            scrollbar.el.classList[swiper.isLocked ? \"add\" : \"remove\"](swiper.params.scrollbar.lockClass);\n        }\n    }\n    function getPointerPosition(e) {\n        return swiper.isHorizontal() ? e.clientX : e.clientY;\n    }\n    function setDragPosition(e) {\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { el } = scrollbar;\n        let positionRatio;\n        positionRatio = (getPointerPosition(e) - (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(el)[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n        positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n        if (rtl) {\n            positionRatio = 1 - positionRatio;\n        }\n        const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n        swiper.updateProgress(position);\n        swiper.setTranslate(position);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    function onDragStart(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        isTouched = true;\n        dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n        e.preventDefault();\n        e.stopPropagation();\n        wrapperEl.style.transitionDuration = \"100ms\";\n        dragEl.style.transitionDuration = \"100ms\";\n        setDragPosition(e);\n        clearTimeout(dragTimeout);\n        el.style.transitionDuration = \"0ms\";\n        if (params.hide) {\n            el.style.opacity = 1;\n        }\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"none\";\n        }\n        emit(\"scrollbarDragStart\", e);\n    }\n    function onDragMove(e) {\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        if (!isTouched) return;\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n        setDragPosition(e);\n        wrapperEl.style.transitionDuration = \"0ms\";\n        el.style.transitionDuration = \"0ms\";\n        dragEl.style.transitionDuration = \"0ms\";\n        emit(\"scrollbarDragMove\", e);\n    }\n    function onDragEnd(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el } = scrollbar;\n        if (!isTouched) return;\n        isTouched = false;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"\";\n            wrapperEl.style.transitionDuration = \"\";\n        }\n        if (params.hide) {\n            clearTimeout(dragTimeout);\n            dragTimeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n        emit(\"scrollbarDragEnd\", e);\n        if (params.snapOnRelease) {\n            swiper.slideToClosest();\n        }\n    }\n    function events(method) {\n        const { scrollbar, params } = swiper;\n        const el = scrollbar.el;\n        if (!el) return;\n        const target = el;\n        const activeListener = params.passiveListeners ? {\n            passive: false,\n            capture: false\n        } : false;\n        const passiveListener = params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        if (!target) return;\n        const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n        target[eventMethod](\"pointerdown\", onDragStart, activeListener);\n        document[eventMethod](\"pointermove\", onDragMove, activeListener);\n        document[eventMethod](\"pointerup\", onDragEnd, passiveListener);\n    }\n    function enableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"on\");\n    }\n    function disableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"off\");\n    }\n    function init() {\n        const { scrollbar, el: swiperEl } = swiper;\n        swiper.params.scrollbar = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n            el: \"swiper-scrollbar\"\n        });\n        const params = swiper.params.scrollbar;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = document.querySelectorAll(params.el);\n            if (!el.length) return;\n        } else if (!el) {\n            el = params.el;\n        }\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n            el = swiperEl.querySelector(params.el);\n        }\n        if (el.length > 0) el = el[0];\n        el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        let dragEl;\n        if (el) {\n            dragEl = el.querySelector((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(swiper.params.scrollbar.dragClass));\n            if (!dragEl) {\n                dragEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.scrollbar.dragClass);\n                el.append(dragEl);\n            }\n        }\n        Object.assign(scrollbar, {\n            el,\n            dragEl\n        });\n        if (params.draggable) {\n            enableDraggable();\n        }\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.lockClass));\n        }\n    }\n    function destroy() {\n        const params = swiper.params.scrollbar;\n        const el = swiper.scrollbar.el;\n        if (el) {\n            el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\n        }\n        disableDraggable();\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.scrollbar.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            updateSize();\n            setTranslate();\n        }\n    });\n    on(\"update resize observerUpdate lock unlock\", ()=>{\n        updateSize();\n    });\n    on(\"setTranslate\", ()=>{\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        setTransition(duration);\n    });\n    on(\"enable disable\", ()=>{\n        const { el } = swiper.scrollbar;\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.lockClass));\n        }\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        init();\n        updateSize();\n        setTranslate();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.scrollbar, {\n        enable,\n        disable,\n        updateSize,\n        setTranslate,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/scrollbar.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/thumbs.mjs":
/*!*************************************************!*\
  !*** ../node_modules/swiper/modules/thumbs.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Thumb)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Thumb(_ref) {\n    let { swiper, extendParams, on } = _ref;\n    extendParams({\n        thumbs: {\n            swiper: null,\n            multipleActiveThumbs: true,\n            autoScrollOffset: 0,\n            slideThumbActiveClass: \"swiper-slide-thumb-active\",\n            thumbsContainerClass: \"swiper-thumbs\"\n        }\n    });\n    let initialized = false;\n    let swiperCreated = false;\n    swiper.thumbs = {\n        swiper: null\n    };\n    function onThumbClick() {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const clickedIndex = thumbsSwiper.clickedIndex;\n        const clickedSlide = thumbsSwiper.clickedSlide;\n        if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n        if (typeof clickedIndex === \"undefined\" || clickedIndex === null) return;\n        let slideToIndex;\n        if (thumbsSwiper.params.loop) {\n            slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            slideToIndex = clickedIndex;\n        }\n        if (swiper.params.loop) {\n            swiper.slideToLoop(slideToIndex);\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    }\n    function init() {\n        const { thumbs: thumbsParams } = swiper.params;\n        if (initialized) return false;\n        initialized = true;\n        const SwiperClass = swiper.constructor;\n        if (thumbsParams.swiper instanceof SwiperClass) {\n            swiper.thumbs.swiper = thumbsParams.swiper;\n            Object.assign(swiper.thumbs.swiper.originalParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            Object.assign(swiper.thumbs.swiper.params, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper.update();\n        } else if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(thumbsParams.swiper)) {\n            const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n            Object.assign(thumbsSwiperParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n            swiperCreated = true;\n        }\n        swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n        swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n        return true;\n    }\n    function update(initial) {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n        // Activate thumbs\n        let thumbsToActivate = 1;\n        const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n        if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n            thumbsToActivate = swiper.params.slidesPerView;\n        }\n        if (!swiper.params.thumbs.multipleActiveThumbs) {\n            thumbsToActivate = 1;\n        }\n        thumbsToActivate = Math.floor(thumbsToActivate);\n        thumbsSwiper.slides.forEach((slideEl)=>slideEl.classList.remove(thumbActiveClass));\n        if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach((slideEl)=>{\n                    slideEl.classList.add(thumbActiveClass);\n                });\n            }\n        } else {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                if (thumbsSwiper.slides[swiper.realIndex + i]) {\n                    thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n                }\n            }\n        }\n        const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n        const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n        if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n            const currentThumbsIndex = thumbsSwiper.activeIndex;\n            let newThumbsIndex;\n            let direction;\n            if (thumbsSwiper.params.loop) {\n                const newThumbsSlide = thumbsSwiper.slides.filter((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") === `${swiper.realIndex}`)[0];\n                newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n                direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            } else {\n                newThumbsIndex = swiper.realIndex;\n                direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            }\n            if (useOffset) {\n                newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n            }\n            if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n                if (thumbsSwiper.params.centeredSlides) {\n                    if (newThumbsIndex > currentThumbsIndex) {\n                        newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n                    } else {\n                        newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n                    }\n                } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\n                thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n            }\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        const { thumbs } = swiper.params;\n        if (!thumbs || !thumbs.swiper) return;\n        if (typeof thumbs.swiper === \"string\" || thumbs.swiper instanceof HTMLElement) {\n            const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n            const getThumbsElementAndInit = ()=>{\n                const thumbsElement = typeof thumbs.swiper === \"string\" ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n                if (thumbsElement && thumbsElement.swiper) {\n                    thumbs.swiper = thumbsElement.swiper;\n                    init();\n                    update(true);\n                } else if (thumbsElement) {\n                    const onThumbsSwiper = (e)=>{\n                        thumbs.swiper = e.detail[0];\n                        thumbsElement.removeEventListener(\"init\", onThumbsSwiper);\n                        init();\n                        update(true);\n                        thumbs.swiper.update();\n                        swiper.update();\n                    };\n                    thumbsElement.addEventListener(\"init\", onThumbsSwiper);\n                }\n                return thumbsElement;\n            };\n            const watchForThumbsToAppear = ()=>{\n                if (swiper.destroyed) return;\n                const thumbsElement = getThumbsElementAndInit();\n                if (!thumbsElement) {\n                    requestAnimationFrame(watchForThumbsToAppear);\n                }\n            };\n            requestAnimationFrame(watchForThumbsToAppear);\n        } else {\n            init();\n            update(true);\n        }\n    });\n    on(\"slideChange update resize observerUpdate\", ()=>{\n        update();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        thumbsSwiper.setTransition(duration);\n    });\n    on(\"beforeDestroy\", ()=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        if (swiperCreated) {\n            thumbsSwiper.destroy();\n        }\n    });\n    Object.assign(swiper.thumbs, {\n        init,\n        update\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/thumbs.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/virtual.mjs":
/*!**************************************************!*\
  !*** ../node_modules/swiper/modules/virtual.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Virtual)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Virtual(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    extendParams({\n        virtual: {\n            enabled: false,\n            slides: [],\n            cache: true,\n            renderSlide: null,\n            renderExternal: null,\n            renderExternalUpdate: true,\n            addSlidesBefore: 0,\n            addSlidesAfter: 0\n        }\n    });\n    let cssModeTimeout;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    swiper.virtual = {\n        cache: {},\n        from: undefined,\n        to: undefined,\n        slides: [],\n        offset: 0,\n        slidesGrid: []\n    };\n    const tempDOM = document.createElement(\"div\");\n    function renderSlide(slide, index) {\n        const params = swiper.params.virtual;\n        if (params.cache && swiper.virtual.cache[index]) {\n            return swiper.virtual.cache[index];\n        }\n        // eslint-disable-next-line\n        let slideEl;\n        if (params.renderSlide) {\n            slideEl = params.renderSlide.call(swiper, slide, index);\n            if (typeof slideEl === \"string\") {\n                tempDOM.innerHTML = slideEl;\n                slideEl = tempDOM.children[0];\n            }\n        } else if (swiper.isElement) {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\");\n        } else {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.slideClass);\n        }\n        slideEl.setAttribute(\"data-swiper-slide-index\", index);\n        if (!params.renderSlide) {\n            slideEl.innerHTML = slide;\n        }\n        if (params.cache) {\n            swiper.virtual.cache[index] = slideEl;\n        }\n        return slideEl;\n    }\n    function update(force) {\n        const { slidesPerView, slidesPerGroup, centeredSlides, loop: isLoop } = swiper.params;\n        const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;\n        const { from: previousFrom, to: previousTo, slides, slidesGrid: previousSlidesGrid, offset: previousOffset } = swiper.virtual;\n        if (!swiper.params.cssMode) {\n            swiper.updateActiveIndex();\n        }\n        const activeIndex = swiper.activeIndex || 0;\n        let offsetProp;\n        if (swiper.rtlTranslate) offsetProp = \"right\";\n        else offsetProp = swiper.isHorizontal() ? \"left\" : \"top\";\n        let slidesAfter;\n        let slidesBefore;\n        if (centeredSlides) {\n            slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n            slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n        } else {\n            slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n            slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\n        }\n        let from = activeIndex - slidesBefore;\n        let to = activeIndex + slidesAfter;\n        if (!isLoop) {\n            from = Math.max(from, 0);\n            to = Math.min(to, slides.length - 1);\n        }\n        let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n        if (isLoop && activeIndex >= slidesBefore) {\n            from -= slidesBefore;\n            if (!centeredSlides) offset += swiper.slidesGrid[0];\n        } else if (isLoop && activeIndex < slidesBefore) {\n            from = -slidesBefore;\n            if (centeredSlides) offset += swiper.slidesGrid[0];\n        }\n        Object.assign(swiper.virtual, {\n            from,\n            to,\n            offset,\n            slidesGrid: swiper.slidesGrid,\n            slidesBefore,\n            slidesAfter\n        });\n        function onRendered() {\n            swiper.updateSlides();\n            swiper.updateProgress();\n            swiper.updateSlidesClasses();\n            emit(\"virtualUpdate\");\n        }\n        if (previousFrom === from && previousTo === to && !force) {\n            if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n                swiper.slides.forEach((slideEl)=>{\n                    slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n                });\n            }\n            swiper.updateProgress();\n            emit(\"virtualUpdate\");\n            return;\n        }\n        if (swiper.params.virtual.renderExternal) {\n            swiper.params.virtual.renderExternal.call(swiper, {\n                offset,\n                from,\n                to,\n                slides: function getSlides() {\n                    const slidesToRender = [];\n                    for(let i = from; i <= to; i += 1){\n                        slidesToRender.push(slides[i]);\n                    }\n                    return slidesToRender;\n                }()\n            });\n            if (swiper.params.virtual.renderExternalUpdate) {\n                onRendered();\n            } else {\n                emit(\"virtualUpdate\");\n            }\n            return;\n        }\n        const prependIndexes = [];\n        const appendIndexes = [];\n        const getSlideIndex = (index)=>{\n            let slideIndex = index;\n            if (index < 0) {\n                slideIndex = slides.length + index;\n            } else if (slideIndex >= slides.length) {\n                // eslint-disable-next-line\n                slideIndex = slideIndex - slides.length;\n            }\n            return slideIndex;\n        };\n        if (force) {\n            swiper.slides.filter((el)=>el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach((slideEl)=>{\n                slideEl.remove();\n            });\n        } else {\n            for(let i = previousFrom; i <= previousTo; i += 1){\n                if (i < from || i > to) {\n                    const slideIndex = getSlideIndex(i);\n                    swiper.slides.filter((el)=>el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${slideIndex}\"], swiper-slide[data-swiper-slide-index=\"${slideIndex}\"]`)).forEach((slideEl)=>{\n                        slideEl.remove();\n                    });\n                }\n            }\n        }\n        const loopFrom = isLoop ? -slides.length : 0;\n        const loopTo = isLoop ? slides.length * 2 : slides.length;\n        for(let i = loopFrom; i < loopTo; i += 1){\n            if (i >= from && i <= to) {\n                const slideIndex = getSlideIndex(i);\n                if (typeof previousTo === \"undefined\" || force) {\n                    appendIndexes.push(slideIndex);\n                } else {\n                    if (i > previousTo) appendIndexes.push(slideIndex);\n                    if (i < previousFrom) prependIndexes.push(slideIndex);\n                }\n            }\n        }\n        appendIndexes.forEach((index)=>{\n            swiper.slidesEl.append(renderSlide(slides[index], index));\n        });\n        if (isLoop) {\n            for(let i = prependIndexes.length - 1; i >= 0; i -= 1){\n                const index = prependIndexes[i];\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            }\n        } else {\n            prependIndexes.sort((a, b)=>b - a);\n            prependIndexes.forEach((index)=>{\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            });\n        }\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".swiper-slide, swiper-slide\").forEach((slideEl)=>{\n            slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n        });\n        onRendered();\n    }\n    function appendSlide(slides) {\n        if (typeof slides === \"object\" && \"length\" in slides) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.push(slides[i]);\n            }\n        } else {\n            swiper.virtual.slides.push(slides);\n        }\n        update(true);\n    }\n    function prependSlide(slides) {\n        const activeIndex = swiper.activeIndex;\n        let newActiveIndex = activeIndex + 1;\n        let numberOfNewSlides = 1;\n        if (Array.isArray(slides)) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n            }\n            newActiveIndex = activeIndex + slides.length;\n            numberOfNewSlides = slides.length;\n        } else {\n            swiper.virtual.slides.unshift(slides);\n        }\n        if (swiper.params.virtual.cache) {\n            const cache = swiper.virtual.cache;\n            const newCache = {};\n            Object.keys(cache).forEach((cachedIndex)=>{\n                const cachedEl = cache[cachedIndex];\n                const cachedElIndex = cachedEl.getAttribute(\"data-swiper-slide-index\");\n                if (cachedElIndex) {\n                    cachedEl.setAttribute(\"data-swiper-slide-index\", parseInt(cachedElIndex, 10) + numberOfNewSlides);\n                }\n                newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\n            });\n            swiper.virtual.cache = newCache;\n        }\n        update(true);\n        swiper.slideTo(newActiveIndex, 0);\n    }\n    function removeSlide(slidesIndexes) {\n        if (typeof slidesIndexes === \"undefined\" || slidesIndexes === null) return;\n        let activeIndex = swiper.activeIndex;\n        if (Array.isArray(slidesIndexes)) {\n            for(let i = slidesIndexes.length - 1; i >= 0; i -= 1){\n                if (swiper.params.virtual.cache) {\n                    delete swiper.virtual.cache[slidesIndexes[i]];\n                    // shift cache indexes\n                    Object.keys(swiper.virtual.cache).forEach((key)=>{\n                        if (key > slidesIndexes) {\n                            swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                            swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                            delete swiper.virtual.cache[key];\n                        }\n                    });\n                }\n                swiper.virtual.slides.splice(slidesIndexes[i], 1);\n                if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n                activeIndex = Math.max(activeIndex, 0);\n            }\n        } else {\n            if (swiper.params.virtual.cache) {\n                delete swiper.virtual.cache[slidesIndexes];\n                // shift cache indexes\n                Object.keys(swiper.virtual.cache).forEach((key)=>{\n                    if (key > slidesIndexes) {\n                        swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                        swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                        delete swiper.virtual.cache[key];\n                    }\n                });\n            }\n            swiper.virtual.slides.splice(slidesIndexes, 1);\n            if (slidesIndexes < activeIndex) activeIndex -= 1;\n            activeIndex = Math.max(activeIndex, 0);\n        }\n        update(true);\n        swiper.slideTo(activeIndex, 0);\n    }\n    function removeAllSlides() {\n        swiper.virtual.slides = [];\n        if (swiper.params.virtual.cache) {\n            swiper.virtual.cache = {};\n        }\n        update(true);\n        swiper.slideTo(0, 0);\n    }\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        let domSlidesAssigned;\n        if (typeof swiper.passedParams.virtual.slides === \"undefined\") {\n            const slides = [\n                ...swiper.slidesEl.children\n            ].filter((el)=>el.matches(`.${swiper.params.slideClass}, swiper-slide`));\n            if (slides && slides.length) {\n                swiper.virtual.slides = [\n                    ...slides\n                ];\n                domSlidesAssigned = true;\n                slides.forEach((slideEl, slideIndex)=>{\n                    slideEl.setAttribute(\"data-swiper-slide-index\", slideIndex);\n                    swiper.virtual.cache[slideIndex] = slideEl;\n                    slideEl.remove();\n                });\n            }\n        }\n        if (!domSlidesAssigned) {\n            swiper.virtual.slides = swiper.params.virtual.slides;\n        }\n        swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n        update();\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode && !swiper._immediateVirtual) {\n            clearTimeout(cssModeTimeout);\n            cssModeTimeout = setTimeout(()=>{\n                update();\n            }, 100);\n        } else {\n            update();\n        }\n    });\n    on(\"init update resize\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode) {\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(swiper.wrapperEl, \"--swiper-virtual-size\", `${swiper.virtualSize}px`);\n        }\n    });\n    Object.assign(swiper.virtual, {\n        appendSlide,\n        prependSlide,\n        removeSlide,\n        removeAllSlides,\n        update\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/virtual.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/modules/zoom.mjs":
/*!***********************************************!*\
  !*** ../node_modules/swiper/modules/zoom.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Zoom)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Zoom(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        zoom: {\n            enabled: false,\n            maxRatio: 3,\n            minRatio: 1,\n            toggle: true,\n            containerClass: \"swiper-zoom-container\",\n            zoomedSlideClass: \"swiper-slide-zoomed\"\n        }\n    });\n    swiper.zoom = {\n        enabled: false\n    };\n    let currentScale = 1;\n    let isScaling = false;\n    let fakeGestureTouched;\n    let fakeGestureMoved;\n    const evCache = [];\n    const gesture = {\n        originX: 0,\n        originY: 0,\n        slideEl: undefined,\n        slideWidth: undefined,\n        slideHeight: undefined,\n        imageEl: undefined,\n        imageWrapEl: undefined,\n        maxRatio: 3\n    };\n    const image = {\n        isTouched: undefined,\n        isMoved: undefined,\n        currentX: undefined,\n        currentY: undefined,\n        minX: undefined,\n        minY: undefined,\n        maxX: undefined,\n        maxY: undefined,\n        width: undefined,\n        height: undefined,\n        startX: undefined,\n        startY: undefined,\n        touchesStart: {},\n        touchesCurrent: {}\n    };\n    const velocity = {\n        x: undefined,\n        y: undefined,\n        prevPositionX: undefined,\n        prevPositionY: undefined,\n        prevTime: undefined\n    };\n    let scale = 1;\n    Object.defineProperty(swiper.zoom, \"scale\", {\n        get () {\n            return scale;\n        },\n        set (value) {\n            if (scale !== value) {\n                const imageEl = gesture.imageEl;\n                const slideEl = gesture.slideEl;\n                emit(\"zoomChange\", value, imageEl, slideEl);\n            }\n            scale = value;\n        }\n    });\n    function getDistanceBetweenTouches() {\n        if (evCache.length < 2) return 1;\n        const x1 = evCache[0].pageX;\n        const y1 = evCache[0].pageY;\n        const x2 = evCache[1].pageX;\n        const y2 = evCache[1].pageY;\n        const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n        return distance;\n    }\n    function getScaleOrigin() {\n        if (evCache.length < 2) return {\n            x: null,\n            y: null\n        };\n        const box = gesture.imageEl.getBoundingClientRect();\n        return [\n            (evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale,\n            (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale\n        ];\n    }\n    function getSlideSelector() {\n        return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n    }\n    function eventWithinSlide(e) {\n        const slideSelector = getSlideSelector();\n        if (e.target.matches(slideSelector)) return true;\n        if (swiper.slides.filter((slideEl)=>slideEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    function eventWithinZoomContainer(e) {\n        const selector = `.${swiper.params.zoom.containerClass}`;\n        if (e.target.matches(selector)) return true;\n        if ([\n            ...swiper.hostEl.querySelectorAll(selector)\n        ].filter((containerEl)=>containerEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    // Events\n    function onGestureStart(e) {\n        if (e.pointerType === \"mouse\") {\n            evCache.splice(0, evCache.length);\n        }\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        evCache.push(e);\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureTouched = true;\n        gesture.scaleStart = getDistanceBetweenTouches();\n        if (!gesture.slideEl) {\n            gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n            if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n            if (!gesture.imageWrapEl) {\n                gesture.imageEl = undefined;\n                return;\n            }\n            gesture.maxRatio = gesture.imageWrapEl.getAttribute(\"data-swiper-zoom\") || params.maxRatio;\n        }\n        if (gesture.imageEl) {\n            const [originX, originY] = getScaleOrigin();\n            gesture.originX = originX;\n            gesture.originY = originY;\n            gesture.imageEl.style.transitionDuration = \"0ms\";\n        }\n        isScaling = true;\n    }\n    function onGestureChange(e) {\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache[pointerIndex] = e;\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureMoved = true;\n        gesture.scaleMove = getDistanceBetweenTouches();\n        if (!gesture.imageEl) {\n            return;\n        }\n        zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n        if (zoom.scale > gesture.maxRatio) {\n            zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n        }\n        if (zoom.scale < params.minRatio) {\n            zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n        }\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n    }\n    function onGestureEnd(e) {\n        if (!eventWithinSlide(e)) return;\n        if (e.pointerType === \"mouse\" && e.type === \"pointerout\") return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\n        if (!fakeGestureTouched || !fakeGestureMoved) {\n            return;\n        }\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        if (!gesture.imageEl) return;\n        zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n        gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n        currentScale = zoom.scale;\n        isScaling = false;\n        if (zoom.scale > 1 && gesture.slideEl) {\n            gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n        } else if (zoom.scale <= 1 && gesture.slideEl) {\n            gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n        }\n        if (zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n            gesture.slideEl = undefined;\n        }\n    }\n    function onTouchStart(e) {\n        const device = swiper.device;\n        if (!gesture.imageEl) return;\n        if (image.isTouched) return;\n        if (device.android && e.cancelable) e.preventDefault();\n        image.isTouched = true;\n        const event = evCache.length > 0 ? evCache[0] : e;\n        image.touchesStart.x = event.pageX;\n        image.touchesStart.y = event.pageY;\n    }\n    function onTouchMove(e) {\n        if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;\n        const zoom = swiper.zoom;\n        if (!gesture.imageEl) return;\n        if (!image.isTouched || !gesture.slideEl) return;\n        if (!image.isMoved) {\n            image.width = gesture.imageEl.offsetWidth;\n            image.height = gesture.imageEl.offsetHeight;\n            image.startX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(gesture.imageWrapEl, \"x\") || 0;\n            image.startY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(gesture.imageWrapEl, \"y\") || 0;\n            gesture.slideWidth = gesture.slideEl.offsetWidth;\n            gesture.slideHeight = gesture.slideEl.offsetHeight;\n            gesture.imageWrapEl.style.transitionDuration = \"0ms\";\n        }\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\n        image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\n        const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\n        if (touchesDiff > 5) {\n            swiper.allowClick = false;\n        }\n        if (!image.isMoved && !isScaling) {\n            if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n                image.isTouched = false;\n                return;\n            }\n            if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n                image.isTouched = false;\n                return;\n            }\n        }\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n        e.stopPropagation();\n        image.isMoved = true;\n        const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\n        const { originX, originY } = gesture;\n        image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\n        image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\n        if (image.currentX < image.minX) {\n            image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n        }\n        if (image.currentX > image.maxX) {\n            image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n        }\n        if (image.currentY < image.minY) {\n            image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n        }\n        if (image.currentY > image.maxY) {\n            image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n        }\n        // Velocity\n        if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n        if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n        if (!velocity.prevTime) velocity.prevTime = Date.now();\n        velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n        velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n        if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n        if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n        velocity.prevPositionX = image.touchesCurrent.x;\n        velocity.prevPositionY = image.touchesCurrent.y;\n        velocity.prevTime = Date.now();\n        gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n    }\n    function onTouchEnd() {\n        const zoom = swiper.zoom;\n        if (!gesture.imageEl) return;\n        if (!image.isTouched || !image.isMoved) {\n            image.isTouched = false;\n            image.isMoved = false;\n            return;\n        }\n        image.isTouched = false;\n        image.isMoved = false;\n        let momentumDurationX = 300;\n        let momentumDurationY = 300;\n        const momentumDistanceX = velocity.x * momentumDurationX;\n        const newPositionX = image.currentX + momentumDistanceX;\n        const momentumDistanceY = velocity.y * momentumDurationY;\n        const newPositionY = image.currentY + momentumDistanceY;\n        // Fix duration\n        if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n        if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n        const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n        image.currentX = newPositionX;\n        image.currentY = newPositionY;\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n        image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n        gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;\n        gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n    }\n    function onTransitionEnd() {\n        const zoom = swiper.zoom;\n        if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\n            if (gesture.imageEl) {\n                gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n            }\n            if (gesture.imageWrapEl) {\n                gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n            }\n            gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);\n            zoom.scale = 1;\n            currentScale = 1;\n            gesture.slideEl = undefined;\n            gesture.imageEl = undefined;\n            gesture.imageWrapEl = undefined;\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n    }\n    function zoomIn(e) {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (e && e.target) {\n                gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n            }\n            if (!gesture.slideEl) {\n                if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                    gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n                } else {\n                    gesture.slideEl = swiper.slides[swiper.activeIndex];\n                }\n            }\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.touchAction = \"none\";\n        }\n        gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n        let touchX;\n        let touchY;\n        let offsetX;\n        let offsetY;\n        let diffX;\n        let diffY;\n        let translateX;\n        let translateY;\n        let imageWidth;\n        let imageHeight;\n        let scaledWidth;\n        let scaledHeight;\n        let translateMinX;\n        let translateMinY;\n        let translateMaxX;\n        let translateMaxY;\n        let slideWidth;\n        let slideHeight;\n        if (typeof image.touchesStart.x === \"undefined\" && e) {\n            touchX = e.pageX;\n            touchY = e.pageY;\n        } else {\n            touchX = image.touchesStart.x;\n            touchY = image.touchesStart.y;\n        }\n        const forceZoomRatio = typeof e === \"number\" ? e : null;\n        if (currentScale === 1 && forceZoomRatio) {\n            touchX = undefined;\n            touchY = undefined;\n        }\n        zoom.scale = forceZoomRatio || gesture.imageWrapEl.getAttribute(\"data-swiper-zoom\") || params.maxRatio;\n        currentScale = forceZoomRatio || gesture.imageWrapEl.getAttribute(\"data-swiper-zoom\") || params.maxRatio;\n        if (e && !(currentScale === 1 && forceZoomRatio)) {\n            slideWidth = gesture.slideEl.offsetWidth;\n            slideHeight = gesture.slideEl.offsetHeight;\n            offsetX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.slideEl).left + window.scrollX;\n            offsetY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(gesture.slideEl).top + window.scrollY;\n            diffX = offsetX + slideWidth / 2 - touchX;\n            diffY = offsetY + slideHeight / 2 - touchY;\n            imageWidth = gesture.imageEl.offsetWidth;\n            imageHeight = gesture.imageEl.offsetHeight;\n            scaledWidth = imageWidth * zoom.scale;\n            scaledHeight = imageHeight * zoom.scale;\n            translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n            translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n            translateMaxX = -translateMinX;\n            translateMaxY = -translateMinY;\n            translateX = diffX * zoom.scale;\n            translateY = diffY * zoom.scale;\n            if (translateX < translateMinX) {\n                translateX = translateMinX;\n            }\n            if (translateX > translateMaxX) {\n                translateX = translateMaxX;\n            }\n            if (translateY < translateMinY) {\n                translateY = translateMinY;\n            }\n            if (translateY > translateMaxY) {\n                translateY = translateMaxY;\n            }\n        } else {\n            translateX = 0;\n            translateY = 0;\n        }\n        if (forceZoomRatio && zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n    }\n    function zoomOut() {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n            } else {\n                gesture.slideEl = swiper.slides[swiper.activeIndex];\n            }\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"\";\n            swiper.wrapperEl.style.touchAction = \"\";\n        }\n        zoom.scale = 1;\n        currentScale = 1;\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n        gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n        gesture.slideEl = undefined;\n        gesture.originX = 0;\n        gesture.originY = 0;\n    }\n    // Toggle Zoom\n    function zoomToggle(e) {\n        const zoom = swiper.zoom;\n        if (zoom.scale && zoom.scale !== 1) {\n            // Zoom Out\n            zoomOut();\n        } else {\n            // Zoom In\n            zoomIn(e);\n        }\n    }\n    function getListeners() {\n        const passiveListener = swiper.params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        const activeListenerWithCapture = swiper.params.passiveListeners ? {\n            passive: false,\n            capture: true\n        } : true;\n        return {\n            passiveListener,\n            activeListenerWithCapture\n        };\n    }\n    // Attach/Detach Events\n    function enable() {\n        const zoom = swiper.zoom;\n        if (zoom.enabled) return;\n        zoom.enabled = true;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.addEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.addEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.addEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    function disable() {\n        const zoom = swiper.zoom;\n        if (!zoom.enabled) return;\n        zoom.enabled = false;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.removeEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.zoom.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        disable();\n    });\n    on(\"touchStart\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchStart(e);\n    });\n    on(\"touchEnd\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchEnd();\n    });\n    on(\"doubleTap\", (_s, e)=>{\n        if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n            zoomToggle(e);\n        }\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n            onTransitionEnd();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n            onTransitionEnd();\n        }\n    });\n    Object.assign(swiper.zoom, {\n        enable,\n        disable,\n        in: zoomIn,\n        out: zoomOut,\n        toggle: zoomToggle\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/modules/zoom.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/classes-to-selector.mjs":
/*!*************************************************************!*\
  !*** ../node_modules/swiper/shared/classes-to-selector.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ classesToSelector)\n/* harmony export */ });\nfunction classesToSelector(classes) {\n    if (classes === void 0) {\n        classes = \"\";\n    }\n    return `.${classes.trim().replace(/([\\.:!+\\/])/g, \"\\\\$1\") // eslint-disable-line\n    .replace(/ /g, \".\")}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGtCQUFrQkMsT0FBTztJQUNoQyxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUN0QkEsVUFBVTtJQUNaO0lBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRUEsUUFBUUMsSUFBSSxHQUFHQyxPQUFPLENBQUMsZ0JBQWdCLFFBQVEsc0JBQXNCO0tBQy9FQSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7QUFDdkI7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanM/NzE2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIl0sIm5hbWVzIjpbImNsYXNzZXNUb1NlbGVjdG9yIiwiY2xhc3NlcyIsInRyaW0iLCJyZXBsYWNlIiwiYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/classes-to-selector.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/create-element-if-not-defined.mjs":
/*!***********************************************************************!*\
  !*** ../node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createElementIfNotDefined)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n    if (swiper.params.createElements) {\n        Object.keys(checkProps).forEach((key)=>{\n            if (!params[key] && params.auto === true) {\n                let element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.el, `.${checkProps[key]}`)[0];\n                if (!element) {\n                    element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", checkProps[key]);\n                    element.className = checkProps[key];\n                    swiper.el.append(element);\n                }\n                params[key] = element;\n                originalParams[key] = element;\n            }\n        });\n    }\n    return params;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVFO0FBRXZFLFNBQVNJLDBCQUEwQkMsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLE1BQU0sRUFBRUMsVUFBVTtJQUMzRSxJQUFJSCxPQUFPRSxNQUFNLENBQUNFLGNBQWMsRUFBRTtRQUNoQ0MsT0FBT0MsSUFBSSxDQUFDSCxZQUFZSSxPQUFPLENBQUNDLENBQUFBO1lBQzlCLElBQUksQ0FBQ04sTUFBTSxDQUFDTSxJQUFJLElBQUlOLE9BQU9PLElBQUksS0FBSyxNQUFNO2dCQUN4QyxJQUFJQyxVQUFVZCw2Q0FBZUEsQ0FBQ0ksT0FBT1csRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFUixVQUFVLENBQUNLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsRSxJQUFJLENBQUNFLFNBQVM7b0JBQ1pBLFVBQVVaLDZDQUFhQSxDQUFDLE9BQU9LLFVBQVUsQ0FBQ0ssSUFBSTtvQkFDOUNFLFFBQVFFLFNBQVMsR0FBR1QsVUFBVSxDQUFDSyxJQUFJO29CQUNuQ1IsT0FBT1csRUFBRSxDQUFDRSxNQUFNLENBQUNIO2dCQUNuQjtnQkFDQVIsTUFBTSxDQUFDTSxJQUFJLEdBQUdFO2dCQUNkVCxjQUFjLENBQUNPLElBQUksR0FBR0U7WUFDeEI7UUFDRjtJQUNGO0lBQ0EsT0FBT1I7QUFDVDtBQUUwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanM/OTIxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iXSwibmFtZXMiOlsiZSIsImVsZW1lbnRDaGlsZHJlbiIsImMiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsInN3aXBlciIsIm9yaWdpbmFsUGFyYW1zIiwicGFyYW1zIiwiY2hlY2tQcm9wcyIsImNyZWF0ZUVsZW1lbnRzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJhdXRvIiwiZWxlbWVudCIsImVsIiwiY2xhc3NOYW1lIiwiYXBwZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/create-element-if-not-defined.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/create-shadow.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/swiper/shared/create-shadow.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createShadow)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction createShadow(suffix, slideEl, side) {\n    const shadowClass = `swiper-slide-shadow${side ? `-${side}` : \"\"}${suffix ? ` swiper-slide-shadow-${suffix}` : \"\"}`;\n    const shadowContainer = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(slideEl);\n    let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(\" \").join(\".\")}`);\n    if (!shadowEl) {\n        shadowEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", shadowClass.split(\" \"));\n        shadowContainer.append(shadowEl);\n    }\n    return shadowEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkU7QUFFM0UsU0FBU0ksYUFBYUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUk7SUFDekMsTUFBTUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFRCxPQUFPLENBQUMsQ0FBQyxFQUFFQSxLQUFLLENBQUMsR0FBRyxHQUFHLEVBQUVGLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRUEsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ25ILE1BQU1JLGtCQUFrQlIsNkNBQW1CQSxDQUFDSztJQUM1QyxJQUFJSSxXQUFXRCxnQkFBZ0JFLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRUgsWUFBWUksS0FBSyxDQUFDLEtBQUtDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbkYsSUFBSSxDQUFDSCxVQUFVO1FBQ2JBLFdBQVdQLDZDQUFhQSxDQUFDLE9BQU9LLFlBQVlJLEtBQUssQ0FBQztRQUNsREgsZ0JBQWdCSyxNQUFNLENBQUNKO0lBQ3pCO0lBQ0EsT0FBT0E7QUFDVDtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcz9hYjlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGwgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coc3VmZml4LCBzbGlkZUVsLCBzaWRlKSB7XG4gIGNvbnN0IHNoYWRvd0NsYXNzID0gYHN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9JHtzdWZmaXggPyBgIHN3aXBlci1zbGlkZS1zaGFkb3ctJHtzdWZmaXh9YCA6ICcnfWA7XG4gIGNvbnN0IHNoYWRvd0NvbnRhaW5lciA9IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCk7XG4gIGxldCBzaGFkb3dFbCA9IHNoYWRvd0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGAuJHtzaGFkb3dDbGFzcy5zcGxpdCgnICcpLmpvaW4oJy4nKX1gKTtcbiAgaWYgKCFzaGFkb3dFbCkge1xuICAgIHNoYWRvd0VsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc2hhZG93Q2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgc2hhZG93Q29udGFpbmVyLmFwcGVuZChzaGFkb3dFbCk7XG4gIH1cbiAgcmV0dXJuIHNoYWRvd0VsO1xufVxuXG5leHBvcnQgeyBjcmVhdGVTaGFkb3cgYXMgYyB9O1xuIl0sIm5hbWVzIjpbImwiLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwiYyIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVTaGFkb3ciLCJzdWZmaXgiLCJzbGlkZUVsIiwic2lkZSIsInNoYWRvd0NsYXNzIiwic2hhZG93Q29udGFpbmVyIiwic2hhZG93RWwiLCJxdWVyeVNlbGVjdG9yIiwic3BsaXQiLCJqb2luIiwiYXBwZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/create-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/effect-init.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/shared/effect-init.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectInit)\n/* harmony export */ });\nfunction effectInit(params) {\n    const { effect, swiper, on, setTranslate, setTransition, overwriteParams, perspective, recreateShadows, getEffectParams } = params;\n    on(\"beforeInit\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n        if (perspective && perspective()) {\n            swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n        }\n        const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n        Object.assign(swiper.params, overwriteParamsResult);\n        Object.assign(swiper.originalParams, overwriteParamsResult);\n    });\n    on(\"setTranslate\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        if (swiper.params.effect !== effect) return;\n        setTransition(duration);\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (recreateShadows) {\n            if (!getEffectParams || !getEffectParams().slideShadows) return;\n            // remove shadows\n            swiper.slides.forEach((slideEl)=>{\n                slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>shadowEl.remove());\n            });\n            // create new one\n            recreateShadows();\n        }\n    });\n    let requireUpdateOnVirtual;\n    on(\"virtualUpdate\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (!swiper.slides.length) {\n            requireUpdateOnVirtual = true;\n        }\n        requestAnimationFrame(()=>{\n            if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n                setTranslate();\n                requireUpdateOnVirtual = false;\n            }\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LWluaXQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxXQUFXQyxNQUFNO0lBQ3hCLE1BQU0sRUFDSkMsTUFBTSxFQUNOQyxNQUFNLEVBQ05DLEVBQUUsRUFDRkMsWUFBWSxFQUNaQyxhQUFhLEVBQ2JDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxlQUFlLEVBQ2ZDLGVBQWUsRUFDaEIsR0FBR1Q7SUFDSkcsR0FBRyxjQUFjO1FBQ2YsSUFBSUQsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckNDLE9BQU9RLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRVQsT0FBT0YsTUFBTSxDQUFDWSxzQkFBc0IsQ0FBQyxFQUFFWCxPQUFPLENBQUM7UUFDekUsSUFBSU0sZUFBZUEsZUFBZTtZQUNoQ0wsT0FBT1EsVUFBVSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFVCxPQUFPRixNQUFNLENBQUNZLHNCQUFzQixDQUFDLEVBQUUsQ0FBQztRQUNwRTtRQUNBLE1BQU1DLHdCQUF3QlAsa0JBQWtCQSxvQkFBb0IsQ0FBQztRQUNyRVEsT0FBT0MsTUFBTSxDQUFDYixPQUFPRixNQUFNLEVBQUVhO1FBQzdCQyxPQUFPQyxNQUFNLENBQUNiLE9BQU9jLGNBQWMsRUFBRUg7SUFDdkM7SUFDQVYsR0FBRyxnQkFBZ0I7UUFDakIsSUFBSUQsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckNHO0lBQ0Y7SUFDQUQsR0FBRyxpQkFBaUIsQ0FBQ2MsSUFBSUM7UUFDdkIsSUFBSWhCLE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDSSxjQUFjYTtJQUNoQjtJQUNBZixHQUFHLGlCQUFpQjtRQUNsQixJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQyxJQUFJTyxpQkFBaUI7WUFDbkIsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0Esa0JBQWtCVSxZQUFZLEVBQUU7WUFDekQsaUJBQWlCO1lBQ2pCakIsT0FBT2tCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxDQUFBQTtnQkFDcEJBLFFBQVFDLGdCQUFnQixDQUFDLGdIQUFnSEYsT0FBTyxDQUFDRyxDQUFBQSxXQUFZQSxTQUFTQyxNQUFNO1lBQzlLO1lBQ0EsaUJBQWlCO1lBQ2pCakI7UUFDRjtJQUNGO0lBQ0EsSUFBSWtCO0lBQ0p2QixHQUFHLGlCQUFpQjtRQUNsQixJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQyxJQUFJLENBQUNDLE9BQU9rQixNQUFNLENBQUNPLE1BQU0sRUFBRTtZQUN6QkQseUJBQXlCO1FBQzNCO1FBQ0FFLHNCQUFzQjtZQUNwQixJQUFJRiwwQkFBMEJ4QixPQUFPa0IsTUFBTSxJQUFJbEIsT0FBT2tCLE1BQU0sQ0FBQ08sTUFBTSxFQUFFO2dCQUNuRXZCO2dCQUNBc0IseUJBQXlCO1lBQzNCO1FBQ0Y7SUFDRjtBQUNGO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0Lm1qcz8yY2Y0Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGVmZmVjdEluaXQocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICBlZmZlY3QsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtcyxcbiAgICBwZXJzcGVjdGl2ZSxcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zXG4gIH0gPSBwYXJhbXM7XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtlZmZlY3R9YCk7XG4gICAgaWYgKHBlcnNwZWN0aXZlICYmIHBlcnNwZWN0aXZlKCkpIHtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgfVxuICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKHJlY3JlYXRlU2hhZG93cykge1xuICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuO1xuICAgICAgLy8gcmVtb3ZlIHNoYWRvd3NcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHNoYWRvd0VsLnJlbW92ZSgpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gY3JlYXRlIG5ldyBvbmVcbiAgICAgIHJlY3JlYXRlU2hhZG93cygpO1xuICAgIH1cbiAgfSk7XG4gIGxldCByZXF1aXJlVXBkYXRlT25WaXJ0dWFsO1xuICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZWZmZWN0SW5pdCBhcyBlIH07XG4iXSwibmFtZXMiOlsiZWZmZWN0SW5pdCIsInBhcmFtcyIsImVmZmVjdCIsInN3aXBlciIsIm9uIiwic2V0VHJhbnNsYXRlIiwic2V0VHJhbnNpdGlvbiIsIm92ZXJ3cml0ZVBhcmFtcyIsInBlcnNwZWN0aXZlIiwicmVjcmVhdGVTaGFkb3dzIiwiZ2V0RWZmZWN0UGFyYW1zIiwiY2xhc3NOYW1lcyIsInB1c2giLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwib3ZlcndyaXRlUGFyYW1zUmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwib3JpZ2luYWxQYXJhbXMiLCJfcyIsImR1cmF0aW9uIiwic2xpZGVTaGFkb3dzIiwic2xpZGVzIiwiZm9yRWFjaCIsInNsaWRlRWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hhZG93RWwiLCJyZW1vdmUiLCJyZXF1aXJlVXBkYXRlT25WaXJ0dWFsIiwibGVuZ3RoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/effect-init.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/effect-target.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/swiper/shared/effect-target.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectTarget)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction effectTarget(effectParams, slideEl) {\n    const transformEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(slideEl);\n    if (transformEl !== slideEl) {\n        transformEl.style.backfaceVisibility = \"hidden\";\n        transformEl.style[\"-webkit-backface-visibility\"] = \"hidden\";\n    }\n    return transformEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFFdkQsU0FBU0UsYUFBYUMsWUFBWSxFQUFFQyxPQUFPO0lBQ3pDLE1BQU1DLGNBQWNKLDZDQUFtQkEsQ0FBQ0c7SUFDeEMsSUFBSUMsZ0JBQWdCRCxTQUFTO1FBQzNCQyxZQUFZQyxLQUFLLENBQUNDLGtCQUFrQixHQUFHO1FBQ3ZDRixZQUFZQyxLQUFLLENBQUMsOEJBQThCLEdBQUc7SUFDckQ7SUFDQSxPQUFPRDtBQUNUO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzP2MwMjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbCBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBlZmZlY3RUYXJnZXQoZWZmZWN0UGFyYW1zLCBzbGlkZUVsKSB7XG4gIGNvbnN0IHRyYW5zZm9ybUVsID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgaWYgKHRyYW5zZm9ybUVsICE9PSBzbGlkZUVsKSB7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGVbJy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSddID0gJ2hpZGRlbic7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybUVsO1xufVxuXG5leHBvcnQgeyBlZmZlY3RUYXJnZXQgYXMgZSB9O1xuIl0sIm5hbWVzIjpbImwiLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0UGFyYW1zIiwic2xpZGVFbCIsInRyYW5zZm9ybUVsIiwic3R5bGUiLCJiYWNrZmFjZVZpc2liaWxpdHkiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/effect-target.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs":
/*!***********************************************************************!*\
  !*** ../node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectVirtualTransitionEnd)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\nfunction effectVirtualTransitionEnd(_ref) {\n    let { swiper, duration, transformElements, allSlides } = _ref;\n    const { activeIndex } = swiper;\n    const getSlide = (el)=>{\n        if (!el.parentElement) {\n            // assume shadow root\n            const slide = swiper.slides.filter((slideEl)=>slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode)[0];\n            return slide;\n        }\n        return el.parentElement;\n    };\n    if (swiper.params.virtualTranslate && duration !== 0) {\n        let eventTriggered = false;\n        let transitionEndTarget;\n        if (allSlides) {\n            transitionEndTarget = transformElements;\n        } else {\n            transitionEndTarget = transformElements.filter((transformEl)=>{\n                const el = transformEl.classList.contains(\"swiper-slide-transform\") ? getSlide(transformEl) : transformEl;\n                return swiper.getSlideIndex(el) === activeIndex;\n            });\n        }\n        transitionEndTarget.forEach((el)=>{\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(el, ()=>{\n                if (eventTriggered) return;\n                if (!swiper || swiper.destroyed) return;\n                eventTriggered = true;\n                swiper.animating = false;\n                const evt = new window.CustomEvent(\"transitionend\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n                swiper.wrapperEl.dispatchEvent(evt);\n            });\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEO0FBRXhELFNBQVNFLDJCQUEyQkMsSUFBSTtJQUN0QyxJQUFJLEVBQ0ZDLE1BQU0sRUFDTkMsUUFBUSxFQUNSQyxpQkFBaUIsRUFDakJDLFNBQVMsRUFDVixHQUFHSjtJQUNKLE1BQU0sRUFDSkssV0FBVyxFQUNaLEdBQUdKO0lBQ0osTUFBTUssV0FBV0MsQ0FBQUE7UUFDZixJQUFJLENBQUNBLEdBQUdDLGFBQWEsRUFBRTtZQUNyQixxQkFBcUI7WUFDckIsTUFBTUMsUUFBUVIsT0FBT1MsTUFBTSxDQUFDQyxNQUFNLENBQUNDLENBQUFBLFVBQVdBLFFBQVFDLFVBQVUsSUFBSUQsUUFBUUMsVUFBVSxLQUFLTixHQUFHTyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQzVHLE9BQU9MO1FBQ1Q7UUFDQSxPQUFPRixHQUFHQyxhQUFhO0lBQ3pCO0lBQ0EsSUFBSVAsT0FBT2MsTUFBTSxDQUFDQyxnQkFBZ0IsSUFBSWQsYUFBYSxHQUFHO1FBQ3BELElBQUllLGlCQUFpQjtRQUNyQixJQUFJQztRQUNKLElBQUlkLFdBQVc7WUFDYmMsc0JBQXNCZjtRQUN4QixPQUFPO1lBQ0xlLHNCQUFzQmYsa0JBQWtCUSxNQUFNLENBQUNRLENBQUFBO2dCQUM3QyxNQUFNWixLQUFLWSxZQUFZQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyw0QkFBNEJmLFNBQVNhLGVBQWVBO2dCQUM5RixPQUFPbEIsT0FBT3FCLGFBQWEsQ0FBQ2YsUUFBUUY7WUFDdEM7UUFDRjtRQUNBYSxvQkFBb0JLLE9BQU8sQ0FBQ2hCLENBQUFBO1lBQzFCVCw2Q0FBb0JBLENBQUNTLElBQUk7Z0JBQ3ZCLElBQUlVLGdCQUFnQjtnQkFDcEIsSUFBSSxDQUFDaEIsVUFBVUEsT0FBT3VCLFNBQVMsRUFBRTtnQkFDakNQLGlCQUFpQjtnQkFDakJoQixPQUFPd0IsU0FBUyxHQUFHO2dCQUNuQixNQUFNQyxNQUFNLElBQUlDLE9BQU9DLFdBQVcsQ0FBQyxpQkFBaUI7b0JBQ2xEQyxTQUFTO29CQUNUQyxZQUFZO2dCQUNkO2dCQUNBN0IsT0FBTzhCLFNBQVMsQ0FBQ0MsYUFBYSxDQUFDTjtZQUNqQztRQUNGO0lBQ0Y7QUFDRjtBQUUyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS8uLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanM/OTVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqIGFzIGVsZW1lbnRUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGR1cmF0aW9uLFxuICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgIGFsbFNsaWRlc1xuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGdldFNsaWRlID0gZWwgPT4ge1xuICAgIGlmICghZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5zaGFkb3dSb290ICYmIHNsaWRlRWwuc2hhZG93Um9vdCA9PT0gZWwucGFyZW50Tm9kZSlbMF07XG4gICAgICByZXR1cm4gc2xpZGU7XG4gICAgfVxuICAgIHJldHVybiBlbC5wYXJlbnRFbGVtZW50O1xuICB9O1xuICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgbGV0IHRyYW5zaXRpb25FbmRUYXJnZXQ7XG4gICAgaWYgKGFsbFNsaWRlcykge1xuICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHMuZmlsdGVyKHRyYW5zZm9ybUVsID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSB0cmFuc2Zvcm1FbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSA/IGdldFNsaWRlKHRyYW5zZm9ybUVsKSA6IHRyYW5zZm9ybUVsO1xuICAgICAgICByZXR1cm4gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWwpID09PSBhY3RpdmVJbmRleDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0LmZvckVhY2goZWwgPT4ge1xuICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsICgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGFzIGUgfTtcbiJdLCJuYW1lcyI6WyJqIiwiZWxlbWVudFRyYW5zaXRpb25FbmQiLCJlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCIsIl9yZWYiLCJzd2lwZXIiLCJkdXJhdGlvbiIsInRyYW5zZm9ybUVsZW1lbnRzIiwiYWxsU2xpZGVzIiwiYWN0aXZlSW5kZXgiLCJnZXRTbGlkZSIsImVsIiwicGFyZW50RWxlbWVudCIsInNsaWRlIiwic2xpZGVzIiwiZmlsdGVyIiwic2xpZGVFbCIsInNoYWRvd1Jvb3QiLCJwYXJlbnROb2RlIiwicGFyYW1zIiwidmlydHVhbFRyYW5zbGF0ZSIsImV2ZW50VHJpZ2dlcmVkIiwidHJhbnNpdGlvbkVuZFRhcmdldCIsInRyYW5zZm9ybUVsIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJnZXRTbGlkZUluZGV4IiwiZm9yRWFjaCIsImRlc3Ryb3llZCIsImFuaW1hdGluZyIsImV2dCIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ3cmFwcGVyRWwiLCJkaXNwYXRjaEV2ZW50IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/effect-virtual-transition-end.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs":
/*!********************************************************!*\
  !*** ../node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getWindow),\n/* harmony export */   g: () => (/* binding */ getDocument)\n/* harmony export */ });\n/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */ /* eslint-disable no-param-reassign */ function isObject(obj) {\n    return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend(target, src) {\n    if (target === void 0) {\n        target = {};\n    }\n    if (src === void 0) {\n        src = {};\n    }\n    Object.keys(src).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\nconst ssrDocument = {\n    body: {},\n    addEventListener () {},\n    removeEventListener () {},\n    activeElement: {\n        blur () {},\n        nodeName: \"\"\n    },\n    querySelector () {\n        return null;\n    },\n    querySelectorAll () {\n        return [];\n    },\n    getElementById () {\n        return null;\n    },\n    createEvent () {\n        return {\n            initEvent () {}\n        };\n    },\n    createElement () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute () {},\n            getElementsByTagName () {\n                return [];\n            }\n        };\n    },\n    createElementNS () {\n        return {};\n    },\n    importNode () {\n        return null;\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    }\n};\nfunction getDocument() {\n    const doc = typeof document !== \"undefined\" ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: \"\"\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    },\n    history: {\n        replaceState () {},\n        pushState () {},\n        go () {},\n        back () {}\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener () {},\n    removeEventListener () {},\n    getComputedStyle () {\n        return {\n            getPropertyValue () {\n                return \"\";\n            }\n        };\n    },\n    Image () {},\n    Date () {},\n    screen: {},\n    setTimeout () {},\n    clearTimeout () {},\n    matchMedia () {\n        return {};\n    },\n    requestAnimationFrame (callback) {\n        if (typeof setTimeout === \"undefined\") {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame (id) {\n        if (typeof setTimeout === \"undefined\") {\n            return;\n        }\n        clearTimeout(id);\n    }\n};\nfunction getWindow() {\n    const win =  false ? 0 : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNELG9DQUFvQyxHQUNwQyxTQUFTQSxTQUFTQyxHQUFHO0lBQ25CLE9BQU9BLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksaUJBQWlCQSxPQUFPQSxJQUFJQyxXQUFXLEtBQUtDO0FBQ2hHO0FBQ0EsU0FBU0MsT0FBT0MsTUFBTSxFQUFFQyxHQUFHO0lBQ3pCLElBQUlELFdBQVcsS0FBSyxHQUFHO1FBQ3JCQSxTQUFTLENBQUM7SUFDWjtJQUNBLElBQUlDLFFBQVEsS0FBSyxHQUFHO1FBQ2xCQSxNQUFNLENBQUM7SUFDVDtJQUNBSCxPQUFPSSxJQUFJLENBQUNELEtBQUtFLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDdkIsSUFBSSxPQUFPSixNQUFNLENBQUNJLElBQUksS0FBSyxhQUFhSixNQUFNLENBQUNJLElBQUksR0FBR0gsR0FBRyxDQUFDRyxJQUFJO2FBQU0sSUFBSVQsU0FBU00sR0FBRyxDQUFDRyxJQUFJLEtBQUtULFNBQVNLLE1BQU0sQ0FBQ0ksSUFBSSxLQUFLTixPQUFPSSxJQUFJLENBQUNELEdBQUcsQ0FBQ0csSUFBSSxFQUFFQyxNQUFNLEdBQUcsR0FBRztZQUN2Sk4sT0FBT0MsTUFBTSxDQUFDSSxJQUFJLEVBQUVILEdBQUcsQ0FBQ0csSUFBSTtRQUM5QjtJQUNGO0FBQ0Y7QUFDQSxNQUFNRSxjQUFjO0lBQ2xCQyxNQUFNLENBQUM7SUFDUEMscUJBQW9CO0lBQ3BCQyx3QkFBdUI7SUFDdkJDLGVBQWU7UUFDYkMsU0FBUTtRQUNSQyxVQUFVO0lBQ1o7SUFDQUM7UUFDRSxPQUFPO0lBQ1Q7SUFDQUM7UUFDRSxPQUFPLEVBQUU7SUFDWDtJQUNBQztRQUNFLE9BQU87SUFDVDtJQUNBQztRQUNFLE9BQU87WUFDTEMsY0FBYTtRQUNmO0lBQ0Y7SUFDQUM7UUFDRSxPQUFPO1lBQ0xDLFVBQVUsRUFBRTtZQUNaQyxZQUFZLEVBQUU7WUFDZEMsT0FBTyxDQUFDO1lBQ1JDLGlCQUFnQjtZQUNoQkM7Z0JBQ0UsT0FBTyxFQUFFO1lBQ1g7UUFDRjtJQUNGO0lBQ0FDO1FBQ0UsT0FBTyxDQUFDO0lBQ1Y7SUFDQUM7UUFDRSxPQUFPO0lBQ1Q7SUFDQUMsVUFBVTtRQUNSQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLFFBQVE7UUFDUkMsVUFBVTtRQUNWQyxVQUFVO1FBQ1ZDLFFBQVE7SUFDVjtBQUNGO0FBQ0EsU0FBU0M7SUFDUCxNQUFNQyxNQUFNLE9BQU9DLGFBQWEsY0FBY0EsV0FBVyxDQUFDO0lBQzFEdEMsT0FBT3FDLEtBQUs5QjtJQUNaLE9BQU84QjtBQUNUO0FBQ0EsTUFBTUUsWUFBWTtJQUNoQkQsVUFBVS9CO0lBQ1ZpQyxXQUFXO1FBQ1RDLFdBQVc7SUFDYjtJQUNBZCxVQUFVO1FBQ1JDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsUUFBUTtJQUNWO0lBQ0FPLFNBQVM7UUFDUEMsaUJBQWdCO1FBQ2hCQyxjQUFhO1FBQ2JDLE9BQU07UUFDTkMsU0FBUTtJQUNWO0lBQ0FDLGFBQWEsU0FBU0E7UUFDcEIsT0FBTyxJQUFJO0lBQ2I7SUFDQXRDLHFCQUFvQjtJQUNwQkMsd0JBQXVCO0lBQ3ZCc0M7UUFDRSxPQUFPO1lBQ0xDO2dCQUNFLE9BQU87WUFDVDtRQUNGO0lBQ0Y7SUFDQUMsVUFBUztJQUNUQyxTQUFRO0lBQ1JDLFFBQVEsQ0FBQztJQUNUQyxlQUFjO0lBQ2RDLGlCQUFnQjtJQUNoQkM7UUFDRSxPQUFPLENBQUM7SUFDVjtJQUNBQyx1QkFBc0JDLFFBQVE7UUFDNUIsSUFBSSxPQUFPSixlQUFlLGFBQWE7WUFDckNJO1lBQ0EsT0FBTztRQUNUO1FBQ0EsT0FBT0osV0FBV0ksVUFBVTtJQUM5QjtJQUNBQyxzQkFBcUJDLEVBQUU7UUFDckIsSUFBSSxPQUFPTixlQUFlLGFBQWE7WUFDckM7UUFDRjtRQUNBQyxhQUFhSztJQUNmO0FBQ0Y7QUFDQSxTQUFTQztJQUNQLE1BQU1DLE1BQU0sTUFBa0IsR0FBY0MsQ0FBTUEsR0FBRyxDQUFDO0lBQ3REOUQsT0FBTzZELEtBQUt0QjtJQUNaLE9BQU9zQjtBQUNUO0FBRTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcz84Y2ZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU1NSIFdpbmRvdyA0LjAuMlxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xuICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSB7fTtcbiAgfVxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICB9XG4gIH0pO1xufVxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJydcbiAgfSxcbiAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG4gIGdldEVsZW1lbnRCeUlkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50KCkge31cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZSgpIHt9LFxuICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICBpbXBvcnROb2RlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gIHJldHVybiBkb2M7XG59XG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJ1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgcmVwbGFjZVN0YXRlKCkge30sXG4gICAgcHVzaFN0YXRlKCkge30sXG4gICAgZ28oKSB7fSxcbiAgICBiYWNrKCkge31cbiAgfSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIEltYWdlKCkge30sXG4gIERhdGUoKSB7fSxcbiAgc2NyZWVuOiB7fSxcbiAgc2V0VGltZW91dCgpIHt9LFxuICBjbGVhclRpbWVvdXQoKSB7fSxcbiAgbWF0Y2hNZWRpYSgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9LFxuICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZ2V0V2luZG93IGFzIGEsIGdldERvY3VtZW50IGFzIGcgfTtcbiJdLCJuYW1lcyI6WyJpc09iamVjdCIsIm9iaiIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZXh0ZW5kIiwidGFyZ2V0Iiwic3JjIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJsZW5ndGgiLCJzc3JEb2N1bWVudCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJocmVmIiwib3JpZ2luIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImdldERvY3VtZW50IiwiZG9jIiwiZG9jdW1lbnQiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJtYXRjaE1lZGlhIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwiZ2V0V2luZG93Iiwid2luIiwid2luZG93IiwiYSIsImciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/swiper-core.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/swiper/shared/swiper-core.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ Swiper),\n/* harmony export */   d: () => (/* binding */ defaults)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/swiper/shared/utils.mjs\");\n\n\nlet support;\nfunction calcSupport() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    return {\n        smoothScroll: document1.documentElement && document1.documentElement.style && \"scrollBehavior\" in document1.documentElement.style,\n        touch: !!(\"ontouchstart\" in window1 || window1.DocumentTouch && document1 instanceof window1.DocumentTouch)\n    };\n}\nfunction getSupport() {\n    if (!support) {\n        support = calcSupport();\n    }\n    return support;\n}\nlet deviceCached;\nfunction calcDevice(_temp) {\n    let { userAgent } = _temp === void 0 ? {} : _temp;\n    const support = getSupport();\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const platform = window1.navigator.platform;\n    const ua = userAgent || window1.navigator.userAgent;\n    const device = {\n        ios: false,\n        android: false\n    };\n    const screenWidth = window1.screen.width;\n    const screenHeight = window1.screen.height;\n    const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n    let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n    const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n    const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n    const windows = platform === \"Win32\";\n    let macos = platform === \"MacIntel\";\n    // iPadOs 13 fix\n    const iPadScreens = [\n        \"1024x1366\",\n        \"1366x1024\",\n        \"834x1194\",\n        \"1194x834\",\n        \"834x1112\",\n        \"1112x834\",\n        \"768x1024\",\n        \"1024x768\",\n        \"820x1180\",\n        \"1180x820\",\n        \"810x1080\",\n        \"1080x810\"\n    ];\n    if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n        ipad = ua.match(/(Version)\\/([\\d.]+)/);\n        if (!ipad) ipad = [\n            0,\n            1,\n            \"13_0_0\"\n        ];\n        macos = false;\n    }\n    // Android\n    if (android && !windows) {\n        device.os = \"android\";\n        device.android = true;\n    }\n    if (ipad || iphone || ipod) {\n        device.os = \"ios\";\n        device.ios = true;\n    }\n    // Export object\n    return device;\n}\nfunction getDevice(overrides) {\n    if (overrides === void 0) {\n        overrides = {};\n    }\n    if (!deviceCached) {\n        deviceCached = calcDevice(overrides);\n    }\n    return deviceCached;\n}\nlet browser;\nfunction calcBrowser() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let needPerspectiveFix = false;\n    function isSafari() {\n        const ua = window1.navigator.userAgent.toLowerCase();\n        return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n    }\n    if (isSafari()) {\n        const ua = String(window1.navigator.userAgent);\n        if (ua.includes(\"Version/\")) {\n            const [major, minor] = ua.split(\"Version/\")[1].split(\" \")[0].split(\".\").map((num)=>Number(num));\n            needPerspectiveFix = major < 16 || major === 16 && minor < 2;\n        }\n    }\n    return {\n        isSafari: needPerspectiveFix || isSafari(),\n        needPerspectiveFix,\n        isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window1.navigator.userAgent)\n    };\n}\nfunction getBrowser() {\n    if (!browser) {\n        browser = calcBrowser();\n    }\n    return browser;\n}\nfunction Resize(_ref) {\n    let { swiper, on, emit } = _ref;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let observer = null;\n    let animationFrame = null;\n    const resizeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"beforeResize\");\n        emit(\"resize\");\n    };\n    const createObserver = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        observer = new ResizeObserver((entries)=>{\n            animationFrame = window1.requestAnimationFrame(()=>{\n                const { width, height } = swiper;\n                let newWidth = width;\n                let newHeight = height;\n                entries.forEach((_ref2)=>{\n                    let { contentBoxSize, contentRect, target } = _ref2;\n                    if (target && target !== swiper.el) return;\n                    newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n                    newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n                });\n                if (newWidth !== width || newHeight !== height) {\n                    resizeHandler();\n                }\n            });\n        });\n        observer.observe(swiper.el);\n    };\n    const removeObserver = ()=>{\n        if (animationFrame) {\n            window1.cancelAnimationFrame(animationFrame);\n        }\n        if (observer && observer.unobserve && swiper.el) {\n            observer.unobserve(swiper.el);\n            observer = null;\n        }\n    };\n    const orientationChangeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"orientationchange\");\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.resizeObserver && typeof window1.ResizeObserver !== \"undefined\") {\n            createObserver();\n            return;\n        }\n        window1.addEventListener(\"resize\", resizeHandler);\n        window1.addEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n    on(\"destroy\", ()=>{\n        removeObserver();\n        window1.removeEventListener(\"resize\", resizeHandler);\n        window1.removeEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n}\nfunction Observer(_ref) {\n    let { swiper, extendParams, on, emit } = _ref;\n    const observers = [];\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const attach = function(target, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        const ObserverFunc = window1.MutationObserver || window1.WebkitMutationObserver;\n        const observer = new ObserverFunc((mutations)=>{\n            // The observerUpdate event should only be triggered\n            // once despite the number of mutations.  Additional\n            // triggers are redundant and are very costly\n            if (swiper.__preventObserver__) return;\n            if (mutations.length === 1) {\n                emit(\"observerUpdate\", mutations[0]);\n                return;\n            }\n            const observerUpdate = function observerUpdate() {\n                emit(\"observerUpdate\", mutations[0]);\n            };\n            if (window1.requestAnimationFrame) {\n                window1.requestAnimationFrame(observerUpdate);\n            } else {\n                window1.setTimeout(observerUpdate, 0);\n            }\n        });\n        observer.observe(target, {\n            attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n            childList: typeof options.childList === \"undefined\" ? true : options.childList,\n            characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n        });\n        observers.push(observer);\n    };\n    const init = ()=>{\n        if (!swiper.params.observer) return;\n        if (swiper.params.observeParents) {\n            const containerParents = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper.hostEl);\n            for(let i = 0; i < containerParents.length; i += 1){\n                attach(containerParents[i]);\n            }\n        }\n        // Observe container\n        attach(swiper.hostEl, {\n            childList: swiper.params.observeSlideChildren\n        });\n        // Observe wrapper\n        attach(swiper.wrapperEl, {\n            attributes: false\n        });\n    };\n    const destroy = ()=>{\n        observers.forEach((observer)=>{\n            observer.disconnect();\n        });\n        observers.splice(0, observers.length);\n    };\n    extendParams({\n        observer: false,\n        observeParents: false,\n        observeSlideChildren: false\n    });\n    on(\"init\", init);\n    on(\"destroy\", destroy);\n}\n/* eslint-disable no-underscore-dangle */ var eventsEmitter = {\n    on (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        events.split(\" \").forEach((event)=>{\n            if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n            self.eventsListeners[event][method](handler);\n        });\n        return self;\n    },\n    once (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        function onceHandler() {\n            self.off(events, onceHandler);\n            if (onceHandler.__emitterProxy) {\n                delete onceHandler.__emitterProxy;\n            }\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            handler.apply(self, args);\n        }\n        onceHandler.__emitterProxy = handler;\n        return self.on(events, onceHandler, priority);\n    },\n    onAny (handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        if (self.eventsAnyListeners.indexOf(handler) < 0) {\n            self.eventsAnyListeners[method](handler);\n        }\n        return self;\n    },\n    offAny (handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsAnyListeners) return self;\n        const index = self.eventsAnyListeners.indexOf(handler);\n        if (index >= 0) {\n            self.eventsAnyListeners.splice(index, 1);\n        }\n        return self;\n    },\n    off (events, handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        events.split(\" \").forEach((event)=>{\n            if (typeof handler === \"undefined\") {\n                self.eventsListeners[event] = [];\n            } else if (self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler, index)=>{\n                    if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n                        self.eventsListeners[event].splice(index, 1);\n                    }\n                });\n            }\n        });\n        return self;\n    },\n    emit () {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        let events;\n        let data;\n        let context;\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n            events = args[0];\n            data = args.slice(1, args.length);\n            context = self;\n        } else {\n            events = args[0].events;\n            data = args[0].data;\n            context = args[0].context || self;\n        }\n        data.unshift(context);\n        const eventsArray = Array.isArray(events) ? events : events.split(\" \");\n        eventsArray.forEach((event)=>{\n            if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n                self.eventsAnyListeners.forEach((eventHandler)=>{\n                    eventHandler.apply(context, [\n                        event,\n                        ...data\n                    ]);\n                });\n            }\n            if (self.eventsListeners && self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler)=>{\n                    eventHandler.apply(context, data);\n                });\n            }\n        });\n        return self;\n    }\n};\nfunction updateSize() {\n    const swiper = this;\n    let width;\n    let height;\n    const el = swiper.el;\n    if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n        width = swiper.params.width;\n    } else {\n        width = el.clientWidth;\n    }\n    if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n        height = swiper.params.height;\n    } else {\n        height = el.clientHeight;\n    }\n    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n        return;\n    }\n    // Subtract paddings\n    width = width - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"padding-left\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"padding-right\") || 0, 10);\n    height = height - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"padding-top\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"padding-bottom\") || 0, 10);\n    if (Number.isNaN(width)) width = 0;\n    if (Number.isNaN(height)) height = 0;\n    Object.assign(swiper, {\n        width,\n        height,\n        size: swiper.isHorizontal() ? width : height\n    });\n}\nfunction updateSlides() {\n    const swiper = this;\n    function getDirectionPropertyValue(node, label) {\n        return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\n    }\n    const params = swiper.params;\n    const { wrapperEl, slidesEl, size: swiperSize, rtlTranslate: rtl, wrongRTL } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n    const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\n    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n    let snapGrid = [];\n    const slidesGrid = [];\n    const slidesSizesGrid = [];\n    let offsetBefore = params.slidesOffsetBefore;\n    if (typeof offsetBefore === \"function\") {\n        offsetBefore = params.slidesOffsetBefore.call(swiper);\n    }\n    let offsetAfter = params.slidesOffsetAfter;\n    if (typeof offsetAfter === \"function\") {\n        offsetAfter = params.slidesOffsetAfter.call(swiper);\n    }\n    const previousSnapGridLength = swiper.snapGrid.length;\n    const previousSlidesGridLength = swiper.slidesGrid.length;\n    let spaceBetween = params.spaceBetween;\n    let slidePosition = -offsetBefore;\n    let prevSlideSize = 0;\n    let index = 0;\n    if (typeof swiperSize === \"undefined\") {\n        return;\n    }\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    swiper.virtualSize = -spaceBetween;\n    // reset margins\n    slides.forEach((slideEl)=>{\n        if (rtl) {\n            slideEl.style.marginLeft = \"\";\n        } else {\n            slideEl.style.marginRight = \"\";\n        }\n        slideEl.style.marginBottom = \"\";\n        slideEl.style.marginTop = \"\";\n    });\n    // reset cssMode offsets\n    if (params.centeredSlides && params.cssMode) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, \"--swiper-centered-offset-before\", \"\");\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, \"--swiper-centered-offset-after\", \"\");\n    }\n    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n    if (gridEnabled) {\n        swiper.grid.initSlides(slides);\n    } else if (swiper.grid) {\n        swiper.grid.unsetSlides();\n    }\n    // Calc slides\n    let slideSize;\n    const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key)=>{\n        return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n    }).length > 0;\n    for(let i = 0; i < slidesLength; i += 1){\n        slideSize = 0;\n        let slide;\n        if (slides[i]) slide = slides[i];\n        if (gridEnabled) {\n            swiper.grid.updateSlide(i, slide, slides);\n        }\n        if (slides[i] && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(slide, \"display\") === \"none\") continue; // eslint-disable-line\n        if (params.slidesPerView === \"auto\") {\n            if (shouldResetSlideSize) {\n                slides[i].style[swiper.getDirectionLabel(\"width\")] = ``;\n            }\n            const slideStyles = getComputedStyle(slide);\n            const currentTransform = slide.style.transform;\n            const currentWebKitTransform = slide.style.webkitTransform;\n            if (currentTransform) {\n                slide.style.transform = \"none\";\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = \"none\";\n            }\n            if (params.roundLengths) {\n                slideSize = swiper.isHorizontal() ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(slide, \"width\", true) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(slide, \"height\", true);\n            } else {\n                // eslint-disable-next-line\n                const width = getDirectionPropertyValue(slideStyles, \"width\");\n                const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n                const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n                const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n                const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n                const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n                if (boxSizing && boxSizing === \"border-box\") {\n                    slideSize = width + marginLeft + marginRight;\n                } else {\n                    const { clientWidth, offsetWidth } = slide;\n                    slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n                }\n            }\n            if (currentTransform) {\n                slide.style.transform = currentTransform;\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = currentWebKitTransform;\n            }\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n        } else {\n            slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n            if (slides[i]) {\n                slides[i].style[swiper.getDirectionLabel(\"width\")] = `${slideSize}px`;\n            }\n        }\n        if (slides[i]) {\n            slides[i].swiperSlideSize = slideSize;\n        }\n        slidesSizesGrid.push(slideSize);\n        if (params.centeredSlides) {\n            slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n            if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n        } else {\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n            slidePosition = slidePosition + slideSize + spaceBetween;\n        }\n        swiper.virtualSize += slideSize + spaceBetween;\n        prevSlideSize = slideSize;\n        index += 1;\n    }\n    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n    if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n        wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (params.setWrapperSize) {\n        wrapperEl.style[swiper.getDirectionLabel(\"width\")] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (gridEnabled) {\n        swiper.grid.updateWrapperSize(slideSize, snapGrid);\n    }\n    // Remove last grid elements depending on width\n    if (!params.centeredSlides) {\n        const newSlidesGrid = [];\n        for(let i = 0; i < snapGrid.length; i += 1){\n            let slidesGridItem = snapGrid[i];\n            if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n            if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n                newSlidesGrid.push(slidesGridItem);\n            }\n        }\n        snapGrid = newSlidesGrid;\n        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n            snapGrid.push(swiper.virtualSize - swiperSize);\n        }\n    }\n    if (isVirtual && params.loop) {\n        const size = slidesSizesGrid[0] + spaceBetween;\n        if (params.slidesPerGroup > 1) {\n            const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\n            const groupSize = size * params.slidesPerGroup;\n            for(let i = 0; i < groups; i += 1){\n                snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\n            }\n        }\n        for(let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1){\n            if (params.slidesPerGroup === 1) {\n                snapGrid.push(snapGrid[snapGrid.length - 1] + size);\n            }\n            slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\n            swiper.virtualSize += size;\n        }\n    }\n    if (snapGrid.length === 0) snapGrid = [\n        0\n    ];\n    if (spaceBetween !== 0) {\n        const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : swiper.getDirectionLabel(\"marginRight\");\n        slides.filter((_, slideIndex)=>{\n            if (!params.cssMode || params.loop) return true;\n            if (slideIndex === slides.length - 1) {\n                return false;\n            }\n            return true;\n        }).forEach((slideEl)=>{\n            slideEl.style[key] = `${spaceBetween}px`;\n        });\n    }\n    if (params.centeredSlides && params.centeredSlidesBounds) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        const maxSnap = allSlidesSize - swiperSize;\n        snapGrid = snapGrid.map((snap)=>{\n            if (snap <= 0) return -offsetBefore;\n            if (snap > maxSnap) return maxSnap + offsetAfter;\n            return snap;\n        });\n    }\n    if (params.centerInsufficientSlides) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        if (allSlidesSize < swiperSize) {\n            const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n            snapGrid.forEach((snap, snapIndex)=>{\n                snapGrid[snapIndex] = snap - allSlidesOffset;\n            });\n            slidesGrid.forEach((snap, snapIndex)=>{\n                slidesGrid[snapIndex] = snap + allSlidesOffset;\n            });\n        }\n    }\n    Object.assign(swiper, {\n        slides,\n        snapGrid,\n        slidesGrid,\n        slidesSizesGrid\n    });\n    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, \"--swiper-centered-offset-before\", `${-snapGrid[0]}px`);\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(wrapperEl, \"--swiper-centered-offset-after\", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n        const addToSnapGrid = -swiper.snapGrid[0];\n        const addToSlidesGrid = -swiper.slidesGrid[0];\n        swiper.snapGrid = swiper.snapGrid.map((v)=>v + addToSnapGrid);\n        swiper.slidesGrid = swiper.slidesGrid.map((v)=>v + addToSlidesGrid);\n    }\n    if (slidesLength !== previousSlidesLength) {\n        swiper.emit(\"slidesLengthChange\");\n    }\n    if (snapGrid.length !== previousSnapGridLength) {\n        if (swiper.params.watchOverflow) swiper.checkOverflow();\n        swiper.emit(\"snapGridLengthChange\");\n    }\n    if (slidesGrid.length !== previousSlidesGridLength) {\n        swiper.emit(\"slidesGridLengthChange\");\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    swiper.emit(\"slidesUpdated\");\n    if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n        const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n        const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\n        if (slidesLength <= params.maxBackfaceHiddenSlides) {\n            if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\n        } else if (hasClassBackfaceClassAdded) {\n            swiper.el.classList.remove(backFaceHiddenClass);\n        }\n    }\n}\nfunction updateAutoHeight(speed) {\n    const swiper = this;\n    const activeSlides = [];\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let newHeight = 0;\n    let i;\n    if (typeof speed === \"number\") {\n        swiper.setTransition(speed);\n    } else if (speed === true) {\n        swiper.setTransition(swiper.params.speed);\n    }\n    const getSlideByIndex = (index)=>{\n        if (isVirtual) {\n            return swiper.slides[swiper.getSlideIndexByData(index)];\n        }\n        return swiper.slides[index];\n    };\n    // Find slides currently in view\n    if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n        if (swiper.params.centeredSlides) {\n            (swiper.visibleSlides || []).forEach((slide)=>{\n                activeSlides.push(slide);\n            });\n        } else {\n            for(i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1){\n                const index = swiper.activeIndex + i;\n                if (index > swiper.slides.length && !isVirtual) break;\n                activeSlides.push(getSlideByIndex(index));\n            }\n        }\n    } else {\n        activeSlides.push(getSlideByIndex(swiper.activeIndex));\n    }\n    // Find new height from highest slide in view\n    for(i = 0; i < activeSlides.length; i += 1){\n        if (typeof activeSlides[i] !== \"undefined\") {\n            const height = activeSlides[i].offsetHeight;\n            newHeight = height > newHeight ? height : newHeight;\n        }\n    }\n    // Update Height\n    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\n}\nfunction updateSlidesOffset() {\n    const swiper = this;\n    const slides = swiper.slides;\n    // eslint-disable-next-line\n    const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\n    for(let i = 0; i < slides.length; i += 1){\n        slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\n    }\n}\nfunction updateSlidesProgress(translate) {\n    if (translate === void 0) {\n        translate = this && this.translate || 0;\n    }\n    const swiper = this;\n    const params = swiper.params;\n    const { slides, rtlTranslate: rtl, snapGrid } = swiper;\n    if (slides.length === 0) return;\n    if (typeof slides[0].swiperSlideOffset === \"undefined\") swiper.updateSlidesOffset();\n    let offsetCenter = -translate;\n    if (rtl) offsetCenter = translate;\n    // Visible Slides\n    slides.forEach((slideEl)=>{\n        slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass);\n    });\n    swiper.visibleSlidesIndexes = [];\n    swiper.visibleSlides = [];\n    let spaceBetween = params.spaceBetween;\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    for(let i = 0; i < slides.length; i += 1){\n        const slide = slides[i];\n        let slideOffset = slide.swiperSlideOffset;\n        if (params.cssMode && params.centeredSlides) {\n            slideOffset -= slides[0].swiperSlideOffset;\n        }\n        const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const slideBefore = -(offsetCenter - slideOffset);\n        const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n        const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\n        const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n        if (isVisible) {\n            swiper.visibleSlides.push(slide);\n            swiper.visibleSlidesIndexes.push(i);\n            slides[i].classList.add(params.slideVisibleClass);\n        }\n        if (isFullyVisible) {\n            slides[i].classList.add(params.slideFullyVisibleClass);\n        }\n        slide.progress = rtl ? -slideProgress : slideProgress;\n        slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n    }\n}\nfunction updateProgress(translate) {\n    const swiper = this;\n    if (typeof translate === \"undefined\") {\n        const multiplier = swiper.rtlTranslate ? -1 : 1;\n        // eslint-disable-next-line\n        translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n    }\n    const params = swiper.params;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    let { progress, isBeginning, isEnd, progressLoop } = swiper;\n    const wasBeginning = isBeginning;\n    const wasEnd = isEnd;\n    if (translatesDiff === 0) {\n        progress = 0;\n        isBeginning = true;\n        isEnd = true;\n    } else {\n        progress = (translate - swiper.minTranslate()) / translatesDiff;\n        const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\n        const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\n        isBeginning = isBeginningRounded || progress <= 0;\n        isEnd = isEndRounded || progress >= 1;\n        if (isBeginningRounded) progress = 0;\n        if (isEndRounded) progress = 1;\n    }\n    if (params.loop) {\n        const firstSlideIndex = swiper.getSlideIndexByData(0);\n        const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\n        const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\n        const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\n        const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\n        const translateAbs = Math.abs(translate);\n        if (translateAbs >= firstSlideTranslate) {\n            progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\n        } else {\n            progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\n        }\n        if (progressLoop > 1) progressLoop -= 1;\n    }\n    Object.assign(swiper, {\n        progress,\n        progressLoop,\n        isBeginning,\n        isEnd\n    });\n    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n    if (isBeginning && !wasBeginning) {\n        swiper.emit(\"reachBeginning toEdge\");\n    }\n    if (isEnd && !wasEnd) {\n        swiper.emit(\"reachEnd toEdge\");\n    }\n    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n        swiper.emit(\"fromEdge\");\n    }\n    swiper.emit(\"progress\", progress);\n}\nfunction updateSlidesClasses() {\n    const swiper = this;\n    const { slides, params, slidesEl, activeIndex } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    const getFilteredSlide = (selector)=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\n    };\n    slides.forEach((slideEl)=>{\n        slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n    });\n    let activeSlide;\n    let prevSlide;\n    let nextSlide;\n    if (isVirtual) {\n        if (params.loop) {\n            let slideIndex = activeIndex - swiper.virtual.slidesBefore;\n            if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\n            if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\n            activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\n        } else {\n            activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\n        }\n    } else {\n        if (gridEnabled) {\n            activeSlide = slides.filter((slideEl)=>slideEl.column === activeIndex)[0];\n            nextSlide = slides.filter((slideEl)=>slideEl.column === activeIndex + 1)[0];\n            prevSlide = slides.filter((slideEl)=>slideEl.column === activeIndex - 1)[0];\n        } else {\n            activeSlide = slides[activeIndex];\n        }\n    }\n    if (activeSlide) {\n        // Active classes\n        activeSlide.classList.add(params.slideActiveClass);\n        if (gridEnabled) {\n            if (nextSlide) {\n                nextSlide.classList.add(params.slideNextClass);\n            }\n            if (prevSlide) {\n                prevSlide.classList.add(params.slidePrevClass);\n            }\n        } else {\n            // Next Slide\n            nextSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.o)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n            if (params.loop && !nextSlide) {\n                nextSlide = slides[0];\n            }\n            if (nextSlide) {\n                nextSlide.classList.add(params.slideNextClass);\n            }\n            // Prev Slide\n            prevSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n            if (params.loop && !prevSlide === 0) {\n                prevSlide = slides[slides.length - 1];\n            }\n            if (prevSlide) {\n                prevSlide.classList.add(params.slidePrevClass);\n            }\n        }\n    }\n    swiper.emitSlidesClasses();\n}\nconst processLazyPreloader = (swiper, imageEl)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    const slideSelector = ()=>swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n    const slideEl = imageEl.closest(slideSelector());\n    if (slideEl) {\n        let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n        if (!lazyEl && swiper.isElement) {\n            if (slideEl.shadowRoot) {\n                lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n            } else {\n                // init later\n                requestAnimationFrame(()=>{\n                    if (slideEl.shadowRoot) {\n                        lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n                        if (lazyEl) lazyEl.remove();\n                    }\n                });\n            }\n        }\n        if (lazyEl) lazyEl.remove();\n    }\n};\nconst unlazy = (swiper, index)=>{\n    if (!swiper.slides[index]) return;\n    const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n    if (imageEl) imageEl.removeAttribute(\"loading\");\n};\nconst preload = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    let amount = swiper.params.lazyPreloadPrevNext;\n    const len = swiper.slides.length;\n    if (!len || !amount || amount < 0) return;\n    amount = Math.min(amount, len);\n    const slidesPerView = swiper.params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n    const activeIndex = swiper.activeIndex;\n    if (swiper.params.grid && swiper.params.grid.rows > 1) {\n        const activeColumn = activeIndex;\n        const preloadColumns = [\n            activeColumn - amount\n        ];\n        preloadColumns.push(...Array.from({\n            length: amount\n        }).map((_, i)=>{\n            return activeColumn + slidesPerView + i;\n        }));\n        swiper.slides.forEach((slideEl, i)=>{\n            if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n        });\n        return;\n    }\n    const slideIndexLastInView = activeIndex + slidesPerView - 1;\n    if (swiper.params.rewind || swiper.params.loop) {\n        for(let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1){\n            const realIndex = (i % len + len) % len;\n            if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n        }\n    } else {\n        for(let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1){\n            if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n                unlazy(swiper, i);\n            }\n        }\n    }\n};\nfunction getActiveIndexByTranslate(swiper) {\n    const { slidesGrid, params } = swiper;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    let activeIndex;\n    for(let i = 0; i < slidesGrid.length; i += 1){\n        if (typeof slidesGrid[i + 1] !== \"undefined\") {\n            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n                activeIndex = i;\n            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n                activeIndex = i + 1;\n            }\n        } else if (translate >= slidesGrid[i]) {\n            activeIndex = i;\n        }\n    }\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        if (activeIndex < 0 || typeof activeIndex === \"undefined\") activeIndex = 0;\n    }\n    return activeIndex;\n}\nfunction updateActiveIndex(newActiveIndex) {\n    const swiper = this;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    const { snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex } = swiper;\n    let activeIndex = newActiveIndex;\n    let snapIndex;\n    const getVirtualRealIndex = (aIndex)=>{\n        let realIndex = aIndex - swiper.virtual.slidesBefore;\n        if (realIndex < 0) {\n            realIndex = swiper.virtual.slides.length + realIndex;\n        }\n        if (realIndex >= swiper.virtual.slides.length) {\n            realIndex -= swiper.virtual.slides.length;\n        }\n        return realIndex;\n    };\n    if (typeof activeIndex === \"undefined\") {\n        activeIndex = getActiveIndexByTranslate(swiper);\n    }\n    if (snapGrid.indexOf(translate) >= 0) {\n        snapIndex = snapGrid.indexOf(translate);\n    } else {\n        const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n        snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n    }\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    if (activeIndex === previousIndex && !swiper.params.loop) {\n        if (snapIndex !== previousSnapIndex) {\n            swiper.snapIndex = snapIndex;\n            swiper.emit(\"snapIndexChange\");\n        }\n        return;\n    }\n    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n        swiper.realIndex = getVirtualRealIndex(activeIndex);\n        return;\n    }\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    // Get real index\n    let realIndex;\n    if (swiper.virtual && params.virtual.enabled && params.loop) {\n        realIndex = getVirtualRealIndex(activeIndex);\n    } else if (gridEnabled) {\n        const firstSlideInColumn = swiper.slides.filter((slideEl)=>slideEl.column === activeIndex)[0];\n        let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (Number.isNaN(activeSlideIndex)) {\n            activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\n        }\n        realIndex = Math.floor(activeSlideIndex / params.grid.rows);\n    } else if (swiper.slides[activeIndex]) {\n        const slideIndex = swiper.slides[activeIndex].getAttribute(\"data-swiper-slide-index\");\n        if (slideIndex) {\n            realIndex = parseInt(slideIndex, 10);\n        } else {\n            realIndex = activeIndex;\n        }\n    } else {\n        realIndex = activeIndex;\n    }\n    Object.assign(swiper, {\n        previousSnapIndex,\n        snapIndex,\n        previousRealIndex,\n        realIndex,\n        previousIndex,\n        activeIndex\n    });\n    if (swiper.initialized) {\n        preload(swiper);\n    }\n    swiper.emit(\"activeIndexChange\");\n    swiper.emit(\"snapIndexChange\");\n    if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n        if (previousRealIndex !== realIndex) {\n            swiper.emit(\"realIndexChange\");\n        }\n        swiper.emit(\"slideChange\");\n    }\n}\nfunction updateClickedSlide(el, path) {\n    const swiper = this;\n    const params = swiper.params;\n    let slide = el.closest(`.${params.slideClass}, swiper-slide`);\n    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\n        [\n            ...path.slice(path.indexOf(el) + 1, path.length)\n        ].forEach((pathEl)=>{\n            if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {\n                slide = pathEl;\n            }\n        });\n    }\n    let slideFound = false;\n    let slideIndex;\n    if (slide) {\n        for(let i = 0; i < swiper.slides.length; i += 1){\n            if (swiper.slides[i] === slide) {\n                slideFound = true;\n                slideIndex = i;\n                break;\n            }\n        }\n    }\n    if (slide && slideFound) {\n        swiper.clickedSlide = slide;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.clickedIndex = parseInt(slide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            swiper.clickedIndex = slideIndex;\n        }\n    } else {\n        swiper.clickedSlide = undefined;\n        swiper.clickedIndex = undefined;\n        return;\n    }\n    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n        swiper.slideToClickedSlide();\n    }\n}\nvar update = {\n    updateSize,\n    updateSlides,\n    updateAutoHeight,\n    updateSlidesOffset,\n    updateSlidesProgress,\n    updateProgress,\n    updateSlidesClasses,\n    updateActiveIndex,\n    updateClickedSlide\n};\nfunction getSwiperTranslate(axis) {\n    if (axis === void 0) {\n        axis = this.isHorizontal() ? \"x\" : \"y\";\n    }\n    const swiper = this;\n    const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;\n    if (params.virtualTranslate) {\n        return rtl ? -translate : translate;\n    }\n    if (params.cssMode) {\n        return translate;\n    }\n    let currentTranslate = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(wrapperEl, axis);\n    currentTranslate += swiper.cssOverflowAdjustment();\n    if (rtl) currentTranslate = -currentTranslate;\n    return currentTranslate || 0;\n}\nfunction setTranslate(translate, byController) {\n    const swiper = this;\n    const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;\n    let x = 0;\n    let y = 0;\n    const z = 0;\n    if (swiper.isHorizontal()) {\n        x = rtl ? -translate : translate;\n    } else {\n        y = translate;\n    }\n    if (params.roundLengths) {\n        x = Math.floor(x);\n        y = Math.floor(y);\n    }\n    swiper.previousTranslate = swiper.translate;\n    swiper.translate = swiper.isHorizontal() ? x : y;\n    if (params.cssMode) {\n        wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n    } else if (!params.virtualTranslate) {\n        if (swiper.isHorizontal()) {\n            x -= swiper.cssOverflowAdjustment();\n        } else {\n            y -= swiper.cssOverflowAdjustment();\n        }\n        wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\n    }\n    // Check if we need to update progress\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== progress) {\n        swiper.updateProgress(translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\nfunction minTranslate() {\n    return -this.snapGrid[0];\n}\nfunction maxTranslate() {\n    return -this.snapGrid[this.snapGrid.length - 1];\n}\nfunction translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (translateBounds === void 0) {\n        translateBounds = true;\n    }\n    const swiper = this;\n    const { params, wrapperEl } = swiper;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n    }\n    const minTranslate = swiper.minTranslate();\n    const maxTranslate = swiper.maxTranslate();\n    let newTranslate;\n    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;\n    else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;\n    else newTranslate = translate;\n    // Update progress\n    swiper.updateProgress(newTranslate);\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        if (speed === 0) {\n            wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)({\n                    swiper,\n                    targetPosition: -newTranslate,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: -newTranslate,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    if (speed === 0) {\n        swiper.setTransition(0);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionEnd\");\n        }\n    } else {\n        swiper.setTransition(speed);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionStart\");\n        }\n        if (!swiper.animating) {\n            swiper.animating = true;\n            if (!swiper.onTranslateToWrapperTransitionEnd) {\n                swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n                    if (!swiper || swiper.destroyed) return;\n                    if (e.target !== this) return;\n                    swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n                    swiper.onTranslateToWrapperTransitionEnd = null;\n                    delete swiper.onTranslateToWrapperTransitionEnd;\n                    if (runCallbacks) {\n                        swiper.emit(\"transitionEnd\");\n                    }\n                };\n            }\n            swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n        }\n    }\n    return true;\n}\nvar translate = {\n    getTranslate: getSwiperTranslate,\n    setTranslate,\n    minTranslate,\n    maxTranslate,\n    translateTo\n};\nfunction setTransition(duration, byController) {\n    const swiper = this;\n    if (!swiper.params.cssMode) {\n        swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\n        swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : \"\";\n    }\n    swiper.emit(\"setTransition\", duration, byController);\n}\nfunction transitionEmit(_ref) {\n    let { swiper, runCallbacks, direction, step } = _ref;\n    const { activeIndex, previousIndex } = swiper;\n    let dir = direction;\n    if (!dir) {\n        if (activeIndex > previousIndex) dir = \"next\";\n        else if (activeIndex < previousIndex) dir = \"prev\";\n        else dir = \"reset\";\n    }\n    swiper.emit(`transition${step}`);\n    if (runCallbacks && activeIndex !== previousIndex) {\n        if (dir === \"reset\") {\n            swiper.emit(`slideResetTransition${step}`);\n            return;\n        }\n        swiper.emit(`slideChangeTransition${step}`);\n        if (dir === \"next\") {\n            swiper.emit(`slideNextTransition${step}`);\n        } else {\n            swiper.emit(`slidePrevTransition${step}`);\n        }\n    }\n}\nfunction transitionStart(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params } = swiper;\n    if (params.cssMode) return;\n    if (params.autoHeight) {\n        swiper.updateAutoHeight();\n    }\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"Start\"\n    });\n}\nfunction transitionEnd(runCallbacks, direction) {\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params } = swiper;\n    swiper.animating = false;\n    if (params.cssMode) return;\n    swiper.setTransition(0);\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"End\"\n    });\n}\nvar transition = {\n    setTransition,\n    transitionStart,\n    transitionEnd\n};\nfunction slideTo(index, speed, runCallbacks, internal, initial) {\n    if (index === void 0) {\n        index = 0;\n    }\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (typeof index === \"string\") {\n        index = parseInt(index, 10);\n    }\n    const swiper = this;\n    let slideIndex = index;\n    if (slideIndex < 0) slideIndex = 0;\n    const { params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl, wrapperEl, enabled } = swiper;\n    if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n        return false;\n    }\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    const translate = -snapGrid[snapIndex];\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        for(let i = 0; i < slidesGrid.length; i += 1){\n            const normalizedTranslate = -Math.floor(translate * 100);\n            const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n            const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n            if (typeof slidesGrid[i + 1] !== \"undefined\") {\n                if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n                    slideIndex = i;\n                } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n                    slideIndex = i + 1;\n                }\n            } else if (normalizedTranslate >= normalizedGrid) {\n                slideIndex = i;\n            }\n        }\n    }\n    // Directions locks\n    if (swiper.initialized && slideIndex !== activeIndex) {\n        if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n            if ((activeIndex || 0) !== slideIndex) {\n                return false;\n            }\n        }\n    }\n    if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n        swiper.emit(\"beforeSlideChangeStart\");\n    }\n    // Update progress\n    swiper.updateProgress(translate);\n    let direction;\n    if (slideIndex > activeIndex) direction = \"next\";\n    else if (slideIndex < activeIndex) direction = \"prev\";\n    else direction = \"reset\";\n    // Update Index\n    if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n        swiper.updateActiveIndex(slideIndex);\n        // Update Height\n        if (params.autoHeight) {\n            swiper.updateAutoHeight();\n        }\n        swiper.updateSlidesClasses();\n        if (params.effect !== \"slide\") {\n            swiper.setTranslate(translate);\n        }\n        if (direction !== \"reset\") {\n            swiper.transitionStart(runCallbacks, direction);\n            swiper.transitionEnd(runCallbacks, direction);\n        }\n        return false;\n    }\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        const t = rtl ? translate : -translate;\n        if (speed === 0) {\n            const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n            if (isVirtual) {\n                swiper.wrapperEl.style.scrollSnapType = \"none\";\n                swiper._immediateVirtual = true;\n            }\n            if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\n                swiper._cssModeVirtualInitialSet = true;\n                requestAnimationFrame(()=>{\n                    wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n                });\n            } else {\n                wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n            }\n            if (isVirtual) {\n                requestAnimationFrame(()=>{\n                    swiper.wrapperEl.style.scrollSnapType = \"\";\n                    swiper._immediateVirtual = false;\n                });\n            }\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)({\n                    swiper,\n                    targetPosition: t,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: t,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit(\"beforeTransitionStart\", speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    if (speed === 0) {\n        swiper.transitionEnd(runCallbacks, direction);\n    } else if (!swiper.animating) {\n        swiper.animating = true;\n        if (!swiper.onSlideToWrapperTransitionEnd) {\n            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n                if (!swiper || swiper.destroyed) return;\n                if (e.target !== this) return;\n                swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n                swiper.onSlideToWrapperTransitionEnd = null;\n                delete swiper.onSlideToWrapperTransitionEnd;\n                swiper.transitionEnd(runCallbacks, direction);\n            };\n        }\n        swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    }\n    return true;\n}\nfunction slideToLoop(index, speed, runCallbacks, internal) {\n    if (index === void 0) {\n        index = 0;\n    }\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (typeof index === \"string\") {\n        const indexAsNumber = parseInt(index, 10);\n        index = indexAsNumber;\n    }\n    const swiper = this;\n    const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\n    let newIndex = index;\n    if (swiper.params.loop) {\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            // eslint-disable-next-line\n            newIndex = newIndex + swiper.virtual.slidesBefore;\n        } else {\n            let targetSlideIndex;\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                targetSlideIndex = swiper.slides.filter((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex)[0].column;\n            } else {\n                targetSlideIndex = swiper.getSlideIndexByData(newIndex);\n            }\n            const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\n            const { centeredSlides } = swiper.params;\n            let slidesPerView = swiper.params.slidesPerView;\n            if (slidesPerView === \"auto\") {\n                slidesPerView = swiper.slidesPerViewDynamic();\n            } else {\n                slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\n                if (centeredSlides && slidesPerView % 2 === 0) {\n                    slidesPerView = slidesPerView + 1;\n                }\n            }\n            let needLoopFix = cols - targetSlideIndex < slidesPerView;\n            if (centeredSlides) {\n                needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\n            }\n            if (needLoopFix) {\n                const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? \"prev\" : \"next\" : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? \"next\" : \"prev\";\n                swiper.loopFix({\n                    direction,\n                    slideTo: true,\n                    activeSlideIndex: direction === \"next\" ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\n                    slideRealIndex: direction === \"next\" ? swiper.realIndex : undefined\n                });\n            }\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                newIndex = swiper.slides.filter((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex)[0].column;\n            } else {\n                newIndex = swiper.getSlideIndexByData(newIndex);\n            }\n        }\n    }\n    requestAnimationFrame(()=>{\n        swiper.slideTo(newIndex, speed, runCallbacks, internal);\n    });\n    return swiper;\n}\n/* eslint no-unused-vars: \"off\" */ function slideNext(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { enabled, params, animating } = swiper;\n    if (!enabled) return swiper;\n    let perGroup = params.slidesPerGroup;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n        perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n    }\n    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"next\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n        if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\n            requestAnimationFrame(()=>{\n                swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n            });\n            return true;\n        }\n    }\n    if (params.rewind && swiper.isEnd) {\n        return swiper.slideTo(0, speed, runCallbacks, internal);\n    }\n    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slidePrev(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    const { params, snapGrid, slidesGrid, rtlTranslate, enabled, animating } = swiper;\n    if (!enabled) return swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"prev\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n    }\n    const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n    function normalize(val) {\n        if (val < 0) return -Math.floor(Math.abs(val));\n        return Math.floor(val);\n    }\n    const normalizedTranslate = normalize(translate);\n    const normalizedSnapGrid = snapGrid.map((val)=>normalize(val));\n    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n    if (typeof prevSnap === \"undefined\" && params.cssMode) {\n        let prevSnapIndex;\n        snapGrid.forEach((snap, snapIndex)=>{\n            if (normalizedTranslate >= snap) {\n                // prevSnap = snap;\n                prevSnapIndex = snapIndex;\n            }\n        });\n        if (typeof prevSnapIndex !== \"undefined\") {\n            prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n        }\n    }\n    let prevIndex = 0;\n    if (typeof prevSnap !== \"undefined\") {\n        prevIndex = slidesGrid.indexOf(prevSnap);\n        if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n        if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n            prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n            prevIndex = Math.max(prevIndex, 0);\n        }\n    }\n    if (params.rewind && swiper.isBeginning) {\n        const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\n        requestAnimationFrame(()=>{\n            swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n        });\n        return true;\n    }\n    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideReset(speed, runCallbacks, internal) {\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    const swiper = this;\n    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideToClosest(speed, runCallbacks, internal, threshold) {\n    if (speed === void 0) {\n        speed = this.params.speed;\n    }\n    if (runCallbacks === void 0) {\n        runCallbacks = true;\n    }\n    if (threshold === void 0) {\n        threshold = 0.5;\n    }\n    const swiper = this;\n    let index = swiper.activeIndex;\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    if (translate >= swiper.snapGrid[snapIndex]) {\n        // The current translate is on or after the current snap index, so the choice\n        // is between the current index and the one after it.\n        const currentSnap = swiper.snapGrid[snapIndex];\n        const nextSnap = swiper.snapGrid[snapIndex + 1];\n        if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n            index += swiper.params.slidesPerGroup;\n        }\n    } else {\n        // The current translate is before the current snap index, so the choice\n        // is between the current index and the one before it.\n        const prevSnap = swiper.snapGrid[snapIndex - 1];\n        const currentSnap = swiper.snapGrid[snapIndex];\n        if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n            index -= swiper.params.slidesPerGroup;\n        }\n    }\n    index = Math.max(index, 0);\n    index = Math.min(index, swiper.slidesGrid.length - 1);\n    return swiper.slideTo(index, speed, runCallbacks, internal);\n}\nfunction slideToClickedSlide() {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n    let slideToIndex = swiper.clickedIndex;\n    let realIndex;\n    const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\n    if (params.loop) {\n        if (swiper.animating) return;\n        realIndex = parseInt(swiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (params.centeredSlides) {\n            if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n                swiper.loopFix();\n                slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                    swiper.slideTo(slideToIndex);\n                });\n            } else {\n                swiper.slideTo(slideToIndex);\n            }\n        } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n            swiper.loopFix();\n            slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                swiper.slideTo(slideToIndex);\n            });\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    } else {\n        swiper.slideTo(slideToIndex);\n    }\n}\nvar slide = {\n    slideTo,\n    slideToLoop,\n    slideNext,\n    slidePrev,\n    slideReset,\n    slideToClosest,\n    slideToClickedSlide\n};\nfunction loopCreate(slideRealIndex) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n    const initSlides = ()=>{\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n        slides.forEach((el, index)=>{\n            el.setAttribute(\"data-swiper-slide-index\", index);\n        });\n    };\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\n    const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\n    const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\n    const addBlankSlides = (amountOfSlides)=>{\n        for(let i = 0; i < amountOfSlides; i += 1){\n            const slideEl = swiper.isElement ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\", [\n                params.slideBlankClass\n            ]) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", [\n                params.slideClass,\n                params.slideBlankClass\n            ]);\n            swiper.slidesEl.append(slideEl);\n        }\n    };\n    if (shouldFillGroup) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(\"Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else if (shouldFillGrid) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(\"Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else {\n        initSlides();\n    }\n    swiper.loopFix({\n        slideRealIndex,\n        direction: params.centeredSlides ? undefined : \"next\"\n    });\n}\nfunction loopFix(_temp) {\n    let { slideRealIndex, slideTo = true, direction, setTranslate, activeSlideIndex, byController, byMousewheel } = _temp === void 0 ? {} : _temp;\n    const swiper = this;\n    if (!swiper.params.loop) return;\n    swiper.emit(\"beforeLoopFix\");\n    const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } = swiper;\n    const { centeredSlides } = params;\n    swiper.allowSlidePrev = true;\n    swiper.allowSlideNext = true;\n    if (swiper.virtual && params.virtual.enabled) {\n        if (slideTo) {\n            if (!params.centeredSlides && swiper.snapIndex === 0) {\n                swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n            } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n                swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n            } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n                swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n            }\n        }\n        swiper.allowSlidePrev = allowSlidePrev;\n        swiper.allowSlideNext = allowSlideNext;\n        swiper.emit(\"loopFix\");\n        return;\n    }\n    let slidesPerView = params.slidesPerView;\n    if (slidesPerView === \"auto\") {\n        slidesPerView = swiper.slidesPerViewDynamic();\n    } else {\n        slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\n        if (centeredSlides && slidesPerView % 2 === 0) {\n            slidesPerView = slidesPerView + 1;\n        }\n    }\n    const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\n    let loopedSlides = slidesPerGroup;\n    if (loopedSlides % slidesPerGroup !== 0) {\n        loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\n    }\n    loopedSlides += params.loopAdditionalSlides;\n    swiper.loopedSlides = loopedSlides;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    if (slides.length < slidesPerView + loopedSlides) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(\"Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters\");\n    } else if (gridEnabled && params.grid.fill === \"row\") {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(\"Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`\");\n    }\n    const prependSlidesIndexes = [];\n    const appendSlidesIndexes = [];\n    let activeIndex = swiper.activeIndex;\n    if (typeof activeSlideIndex === \"undefined\") {\n        activeSlideIndex = swiper.getSlideIndex(slides.filter((el)=>el.classList.contains(params.slideActiveClass))[0]);\n    } else {\n        activeIndex = activeSlideIndex;\n    }\n    const isNext = direction === \"next\" || !direction;\n    const isPrev = direction === \"prev\" || !direction;\n    let slidesPrepended = 0;\n    let slidesAppended = 0;\n    const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\n    const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\n    const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === \"undefined\" ? -slidesPerView / 2 + 0.5 : 0);\n    // prepend last slides before start\n    if (activeColIndexWithShift < loopedSlides) {\n        slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\n        for(let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                const colIndexToPrepend = cols - index - 1;\n                for(let i = slides.length - 1; i >= 0; i -= 1){\n                    if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\n                }\n            // slides.forEach((slide, slideIndex) => {\n            //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\n            // });\n            } else {\n                prependSlidesIndexes.push(cols - index - 1);\n            }\n        }\n    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\n        slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\n        for(let i = 0; i < slidesAppended; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                slides.forEach((slide, slideIndex)=>{\n                    if (slide.column === index) appendSlidesIndexes.push(slideIndex);\n                });\n            } else {\n                appendSlidesIndexes.push(index);\n            }\n        }\n    }\n    swiper.__preventObserver__ = true;\n    requestAnimationFrame(()=>{\n        swiper.__preventObserver__ = false;\n    });\n    if (isPrev) {\n        prependSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.prepend(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    if (isNext) {\n        appendSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.append(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    swiper.recalcSlides();\n    if (params.slidesPerView === \"auto\") {\n        swiper.updateSlides();\n    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\n        swiper.slides.forEach((slide, slideIndex)=>{\n            swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\n        });\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    if (slideTo) {\n        if (prependSlidesIndexes.length > 0 && isPrev) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                if (setTranslate) {\n                    const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\n                    swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\n                    swiper.touchEventsData.currentTranslate = swiper.translate;\n                }\n            }\n        } else if (appendSlidesIndexes.length > 0 && isNext) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\n                swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\n            }\n        }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.controller && swiper.controller.control && !byController) {\n        const loopParams = {\n            slideRealIndex,\n            direction,\n            setTranslate,\n            activeSlideIndex,\n            byController: true\n        };\n        if (Array.isArray(swiper.controller.control)) {\n            swiper.controller.control.forEach((c)=>{\n                if (!c.destroyed && c.params.loop) c.loopFix({\n                    ...loopParams,\n                    slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\n                });\n            });\n        } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n            swiper.controller.control.loopFix({\n                ...loopParams,\n                slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\n            });\n        }\n    }\n    swiper.emit(\"loopFix\");\n}\nfunction loopDestroy() {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n    swiper.recalcSlides();\n    const newSlidesOrder = [];\n    swiper.slides.forEach((slideEl)=>{\n        const index = typeof slideEl.swiperSlideIndex === \"undefined\" ? slideEl.getAttribute(\"data-swiper-slide-index\") * 1 : slideEl.swiperSlideIndex;\n        newSlidesOrder[index] = slideEl;\n    });\n    swiper.slides.forEach((slideEl)=>{\n        slideEl.removeAttribute(\"data-swiper-slide-index\");\n    });\n    newSlidesOrder.forEach((slideEl)=>{\n        slidesEl.append(slideEl);\n    });\n    swiper.recalcSlides();\n    swiper.slideTo(swiper.realIndex, 0);\n}\nvar loop = {\n    loopCreate,\n    loopFix,\n    loopDestroy\n};\nfunction setGrabCursor(moving) {\n    const swiper = this;\n    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n    const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    el.style.cursor = \"move\";\n    el.style.cursor = moving ? \"grabbing\" : \"grab\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nfunction unsetGrabCursor() {\n    const swiper = this;\n    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n        return;\n    }\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nvar grabCursor = {\n    setGrabCursor,\n    unsetGrabCursor\n};\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base) {\n    if (base === void 0) {\n        base = this;\n    }\n    function __closestFrom(el) {\n        if (!el || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)() || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)()) return null;\n        if (el.assignedSlot) el = el.assignedSlot;\n        const found = el.closest(selector);\n        if (!found && !el.getRootNode) {\n            return null;\n        }\n        return found || __closestFrom(el.getRootNode().host);\n    }\n    return __closestFrom(base);\n}\nfunction preventEdgeSwipe(swiper, event, startX) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const { params } = swiper;\n    const edgeSwipeDetection = params.edgeSwipeDetection;\n    const edgeSwipeThreshold = params.edgeSwipeThreshold;\n    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window1.innerWidth - edgeSwipeThreshold)) {\n        if (edgeSwipeDetection === \"prevent\") {\n            event.preventDefault();\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nfunction onTouchStart(event) {\n    const swiper = this;\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    const data = swiper.touchEventsData;\n    if (e.type === \"pointerdown\") {\n        if (data.pointerId !== null && data.pointerId !== e.pointerId) {\n            return;\n        }\n        data.pointerId = e.pointerId;\n    } else if (e.type === \"touchstart\" && e.targetTouches.length === 1) {\n        data.touchId = e.targetTouches[0].identifier;\n    }\n    if (e.type === \"touchstart\") {\n        // don't proceed touch event\n        preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\n        return;\n    }\n    const { params, touches, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return;\n    }\n    if (!swiper.animating && params.cssMode && params.loop) {\n        swiper.loopFix();\n    }\n    let targetEl = e.target;\n    if (params.touchEventsTarget === \"wrapper\") {\n        if (!swiper.wrapperEl.contains(targetEl)) return;\n    }\n    if (\"which\" in e && e.which === 3) return;\n    if (\"button\" in e && e.button > 0) return;\n    if (data.isTouched && data.isMoved) return;\n    // change target el for shadow root component\n    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n    // eslint-disable-next-line\n    const eventPath = e.composedPath ? e.composedPath() : e.path;\n    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n        targetEl = eventPath[0];\n    }\n    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n    const isTargetShadow = !!(e.target && e.target.shadowRoot);\n    // use closestElement for shadow root element to get the actual closest for nested shadow root element\n    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\n        swiper.allowClick = true;\n        return;\n    }\n    if (params.swipeHandler) {\n        if (!targetEl.closest(params.swipeHandler)) return;\n    }\n    touches.currentX = e.pageX;\n    touches.currentY = e.pageY;\n    const startX = touches.currentX;\n    const startY = touches.currentY;\n    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n    if (!preventEdgeSwipe(swiper, e, startX)) {\n        return;\n    }\n    Object.assign(data, {\n        isTouched: true,\n        isMoved: false,\n        allowTouchCallbacks: true,\n        isScrolling: undefined,\n        startMoving: undefined\n    });\n    touches.startX = startX;\n    touches.startY = startY;\n    data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\n    swiper.allowClick = true;\n    swiper.updateSize();\n    swiper.swipeDirection = undefined;\n    if (params.threshold > 0) data.allowThresholdMove = false;\n    let preventDefault = true;\n    if (targetEl.matches(data.focusableElements)) {\n        preventDefault = false;\n        if (targetEl.nodeName === \"SELECT\") {\n            data.isTouched = false;\n        }\n    }\n    if (document1.activeElement && document1.activeElement.matches(data.focusableElements) && document1.activeElement !== targetEl) {\n        document1.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\n        e.preventDefault();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n        swiper.freeMode.onTouchStart();\n    }\n    swiper.emit(\"touchStart\", e);\n}\nfunction onTouchMove(event) {\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    const { params, touches, rtlTranslate: rtl, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && event.pointerType === \"mouse\") return;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    if (e.type === \"pointermove\") {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        const id = e.pointerId;\n        if (id !== data.pointerId) return;\n    }\n    let targetTouch;\n    if (e.type === \"touchmove\") {\n        targetTouch = [\n            ...e.changedTouches\n        ].filter((t)=>t.identifier === data.touchId)[0];\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    } else {\n        targetTouch = e;\n    }\n    if (!data.isTouched) {\n        if (data.startMoving && data.isScrolling) {\n            swiper.emit(\"touchMoveOpposite\", e);\n        }\n        return;\n    }\n    const pageX = targetTouch.pageX;\n    const pageY = targetTouch.pageY;\n    if (e.preventedByNestedSwiper) {\n        touches.startX = pageX;\n        touches.startY = pageY;\n        return;\n    }\n    if (!swiper.allowTouchMove) {\n        if (!e.target.matches(data.focusableElements)) {\n            swiper.allowClick = false;\n        }\n        if (data.isTouched) {\n            Object.assign(touches, {\n                startX: pageX,\n                startY: pageY,\n                currentX: pageX,\n                currentY: pageY\n            });\n            data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\n        }\n        return;\n    }\n    if (params.touchReleaseOnEdges && !params.loop) {\n        if (swiper.isVertical()) {\n            // Vertical\n            if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n                data.isTouched = false;\n                data.isMoved = false;\n                return;\n            }\n        } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n            return;\n        }\n    }\n    if (document1.activeElement) {\n        if (e.target === document1.activeElement && e.target.matches(data.focusableElements)) {\n            data.isMoved = true;\n            swiper.allowClick = false;\n            return;\n        }\n    }\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchMove\", e);\n    }\n    touches.previousX = touches.currentX;\n    touches.previousY = touches.currentY;\n    touches.currentX = pageX;\n    touches.currentY = pageY;\n    const diffX = touches.currentX - touches.startX;\n    const diffY = touches.currentY - touches.startY;\n    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n    if (typeof data.isScrolling === \"undefined\") {\n        let touchAngle;\n        if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n            data.isScrolling = false;\n        } else {\n            // eslint-disable-next-line\n            if (diffX * diffX + diffY * diffY >= 25) {\n                touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n                data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n            }\n        }\n    }\n    if (data.isScrolling) {\n        swiper.emit(\"touchMoveOpposite\", e);\n    }\n    if (typeof data.startMoving === \"undefined\") {\n        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n            data.startMoving = true;\n        }\n    }\n    if (data.isScrolling) {\n        data.isTouched = false;\n        return;\n    }\n    if (!data.startMoving) {\n        return;\n    }\n    swiper.allowClick = false;\n    if (!params.cssMode && e.cancelable) {\n        e.preventDefault();\n    }\n    if (params.touchMoveStopPropagation && !params.nested) {\n        e.stopPropagation();\n    }\n    let diff = swiper.isHorizontal() ? diffX : diffY;\n    let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\n    if (params.oneWayMovement) {\n        diff = Math.abs(diff) * (rtl ? 1 : -1);\n        touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\n    }\n    touches.diff = diff;\n    diff *= params.touchRatio;\n    if (rtl) {\n        diff = -diff;\n        touchesDiff = -touchesDiff;\n    }\n    const prevTouchesDirection = swiper.touchesDirection;\n    swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n    swiper.touchesDirection = touchesDiff > 0 ? \"prev\" : \"next\";\n    const isLoop = swiper.params.loop && !params.cssMode;\n    const allowLoopFix = swiper.touchesDirection === \"next\" && swiper.allowSlideNext || swiper.touchesDirection === \"prev\" && swiper.allowSlidePrev;\n    if (!data.isMoved) {\n        if (isLoop && allowLoopFix) {\n            swiper.loopFix({\n                direction: swiper.swipeDirection\n            });\n        }\n        data.startTranslate = swiper.getTranslate();\n        swiper.setTransition(0);\n        if (swiper.animating) {\n            const evt = new window.CustomEvent(\"transitionend\", {\n                bubbles: true,\n                cancelable: true\n            });\n            swiper.wrapperEl.dispatchEvent(evt);\n        }\n        data.allowMomentumBounce = false;\n        // Grab Cursor\n        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n            swiper.setGrabCursor(true);\n        }\n        swiper.emit(\"sliderFirstMove\", e);\n    }\n    let loopFixed;\n    new Date().getTime();\n    if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\n        Object.assign(touches, {\n            startX: pageX,\n            startY: pageY,\n            currentX: pageX,\n            currentY: pageY,\n            startTranslate: data.currentTranslate\n        });\n        data.loopSwapReset = true;\n        data.startTranslate = data.currentTranslate;\n        return;\n    }\n    swiper.emit(\"sliderMove\", e);\n    data.isMoved = true;\n    data.currentTranslate = diff + data.startTranslate;\n    let disableParentSwiper = true;\n    let resistanceRatio = params.resistanceRatio;\n    if (params.touchReleaseOnEdges) {\n        resistanceRatio = 0;\n    }\n    if (diff > 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] : swiper.minTranslate())) {\n            swiper.loopFix({\n                direction: \"prev\",\n                setTranslate: true,\n                activeSlideIndex: 0\n            });\n        }\n        if (data.currentTranslate > swiper.minTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n            }\n        }\n    } else if (diff < 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] : swiper.maxTranslate())) {\n            swiper.loopFix({\n                direction: \"next\",\n                setTranslate: true,\n                activeSlideIndex: swiper.slides.length - (params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\n            });\n        }\n        if (data.currentTranslate < swiper.maxTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n            }\n        }\n    }\n    if (disableParentSwiper) {\n        e.preventedByNestedSwiper = true;\n    }\n    // Directions locks\n    if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n        data.currentTranslate = data.startTranslate;\n    }\n    // Threshold\n    if (params.threshold > 0) {\n        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n            if (!data.allowThresholdMove) {\n                data.allowThresholdMove = true;\n                touches.startX = touches.currentX;\n                touches.startY = touches.currentY;\n                data.currentTranslate = data.startTranslate;\n                touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n                return;\n            }\n        } else {\n            data.currentTranslate = data.startTranslate;\n            return;\n        }\n    }\n    if (!params.followFinger || params.cssMode) return;\n    // Update active index in free mode\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n        swiper.freeMode.onTouchMove();\n    }\n    // Update progress\n    swiper.updateProgress(data.currentTranslate);\n    // Update translate\n    swiper.setTranslate(data.currentTranslate);\n}\nfunction onTouchEnd(event) {\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    let targetTouch;\n    const isTouchEvent = e.type === \"touchend\" || e.type === \"touchcancel\";\n    if (!isTouchEvent) {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        if (e.pointerId !== data.pointerId) return;\n        targetTouch = e;\n    } else {\n        targetTouch = [\n            ...e.changedTouches\n        ].filter((t)=>t.identifier === data.touchId)[0];\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    }\n    if ([\n        \"pointercancel\",\n        \"pointerout\",\n        \"pointerleave\",\n        \"contextmenu\"\n    ].includes(e.type)) {\n        const proceed = [\n            \"pointercancel\",\n            \"contextmenu\"\n        ].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\n        if (!proceed) {\n            return;\n        }\n    }\n    data.pointerId = null;\n    data.touchId = null;\n    const { params, touches, rtlTranslate: rtl, slidesGrid, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchEnd\", e);\n    }\n    data.allowTouchCallbacks = false;\n    if (!data.isTouched) {\n        if (data.isMoved && params.grabCursor) {\n            swiper.setGrabCursor(false);\n        }\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    // Return Grab Cursor\n    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n        swiper.setGrabCursor(false);\n    }\n    // Time diff\n    const touchEndTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    // Tap, doubleTap, Click\n    if (swiper.allowClick) {\n        const pathTree = e.path || e.composedPath && e.composedPath();\n        swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\n        swiper.emit(\"tap click\", e);\n        if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n            swiper.emit(\"doubleTap doubleClick\", e);\n        }\n    }\n    data.lastClickTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)();\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n        if (!swiper.destroyed) swiper.allowClick = true;\n    });\n    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\n        data.isTouched = false;\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    let currentPos;\n    if (params.followFinger) {\n        currentPos = rtl ? swiper.translate : -swiper.translate;\n    } else {\n        currentPos = -data.currentTranslate;\n    }\n    if (params.cssMode) {\n        return;\n    }\n    if (params.freeMode && params.freeMode.enabled) {\n        swiper.freeMode.onTouchEnd({\n            currentPos\n        });\n        return;\n    }\n    // Find current slide\n    const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\n    let stopIndex = 0;\n    let groupSize = swiper.slidesSizesGrid[0];\n    for(let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup){\n        const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n        if (typeof slidesGrid[i + increment] !== \"undefined\") {\n            if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n                stopIndex = i;\n                groupSize = slidesGrid[i + increment] - slidesGrid[i];\n            }\n        } else if (swipeToLast || currentPos >= slidesGrid[i]) {\n            stopIndex = i;\n            groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n        }\n    }\n    let rewindFirstIndex = null;\n    let rewindLastIndex = null;\n    if (params.rewind) {\n        if (swiper.isBeginning) {\n            rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        } else if (swiper.isEnd) {\n            rewindFirstIndex = 0;\n        }\n    }\n    // Find current slide size\n    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (timeDiff > params.longSwipesMs) {\n        // Long touches\n        if (!params.longSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (swiper.swipeDirection === \"next\") {\n            if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n            else swiper.slideTo(stopIndex);\n        }\n        if (swiper.swipeDirection === \"prev\") {\n            if (ratio > 1 - params.longSwipesRatio) {\n                swiper.slideTo(stopIndex + increment);\n            } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n                swiper.slideTo(rewindLastIndex);\n            } else {\n                swiper.slideTo(stopIndex);\n            }\n        }\n    } else {\n        // Short swipes\n        if (!params.shortSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n        if (!isNavButtonTarget) {\n            if (swiper.swipeDirection === \"next\") {\n                swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n            }\n            if (swiper.swipeDirection === \"prev\") {\n                swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n            }\n        } else if (e.target === swiper.navigation.nextEl) {\n            swiper.slideTo(stopIndex + increment);\n        } else {\n            swiper.slideTo(stopIndex);\n        }\n    }\n}\nfunction onResize() {\n    const swiper = this;\n    const { params, el } = swiper;\n    if (el && el.offsetWidth === 0) return;\n    // Breakpoints\n    if (params.breakpoints) {\n        swiper.setBreakpoint();\n    }\n    // Save locks\n    const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    // Disable locks on resize\n    swiper.allowSlideNext = true;\n    swiper.allowSlidePrev = true;\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateSlidesClasses();\n    const isVirtualLoop = isVirtual && params.loop;\n    if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\n        swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n    } else {\n        if (swiper.params.loop && !isVirtual) {\n            swiper.slideToLoop(swiper.realIndex, 0, false, true);\n        } else {\n            swiper.slideTo(swiper.activeIndex, 0, false, true);\n        }\n    }\n    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        clearTimeout(swiper.autoplay.resizeTimeout);\n        swiper.autoplay.resizeTimeout = setTimeout(()=>{\n            if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n                swiper.autoplay.resume();\n            }\n        }, 500);\n    }\n    // Return locks after resize\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n        swiper.checkOverflow();\n    }\n}\nfunction onClick(e) {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    if (!swiper.allowClick) {\n        if (swiper.params.preventClicks) e.preventDefault();\n        if (swiper.params.preventClicksPropagation && swiper.animating) {\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n}\nfunction onScroll() {\n    const swiper = this;\n    const { wrapperEl, rtlTranslate, enabled } = swiper;\n    if (!enabled) return;\n    swiper.previousTranslate = swiper.translate;\n    if (swiper.isHorizontal()) {\n        swiper.translate = -wrapperEl.scrollLeft;\n    } else {\n        swiper.translate = -wrapperEl.scrollTop;\n    }\n    // eslint-disable-next-line\n    if (swiper.translate === 0) swiper.translate = 0;\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== swiper.progress) {\n        swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, false);\n}\nfunction onLoad(e) {\n    const swiper = this;\n    processLazyPreloader(swiper, e.target);\n    if (swiper.params.cssMode || swiper.params.slidesPerView !== \"auto\" && !swiper.params.autoHeight) {\n        return;\n    }\n    swiper.update();\n}\nfunction onDocumentTouchStart() {\n    const swiper = this;\n    if (swiper.documentTouchHandlerProceeded) return;\n    swiper.documentTouchHandlerProceeded = true;\n    if (swiper.params.touchReleaseOnEdges) {\n        swiper.el.style.touchAction = \"auto\";\n    }\n}\nconst events = (swiper, method)=>{\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const { params, el, wrapperEl, device } = swiper;\n    const capture = !!params.nested;\n    const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    const swiperMethod = method;\n    // Touch Events\n    document1[domMethod](\"touchstart\", swiper.onDocumentTouchStart, {\n        passive: false,\n        capture\n    });\n    el[domMethod](\"touchstart\", swiper.onTouchStart, {\n        passive: false\n    });\n    el[domMethod](\"pointerdown\", swiper.onTouchStart, {\n        passive: false\n    });\n    document1[domMethod](\"touchmove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"pointermove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"touchend\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerup\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointercancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"touchcancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerout\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerleave\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"contextmenu\", swiper.onTouchEnd, {\n        passive: true\n    });\n    // Prevent Links Clicks\n    if (params.preventClicks || params.preventClicksPropagation) {\n        el[domMethod](\"click\", swiper.onClick, true);\n    }\n    if (params.cssMode) {\n        wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n    }\n    // Resize handler\n    if (params.updateOnWindowResize) {\n        swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n    } else {\n        swiper[swiperMethod](\"observerUpdate\", onResize, true);\n    }\n    // Images loader\n    el[domMethod](\"load\", swiper.onLoad, {\n        capture: true\n    });\n};\nfunction attachEvents() {\n    const swiper = this;\n    const { params } = swiper;\n    swiper.onTouchStart = onTouchStart.bind(swiper);\n    swiper.onTouchMove = onTouchMove.bind(swiper);\n    swiper.onTouchEnd = onTouchEnd.bind(swiper);\n    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\n    if (params.cssMode) {\n        swiper.onScroll = onScroll.bind(swiper);\n    }\n    swiper.onClick = onClick.bind(swiper);\n    swiper.onLoad = onLoad.bind(swiper);\n    events(swiper, \"on\");\n}\nfunction detachEvents() {\n    const swiper = this;\n    events(swiper, \"off\");\n}\nvar events$1 = {\n    attachEvents,\n    detachEvents\n};\nconst isGridEnabled = (swiper, params)=>{\n    return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n    const swiper = this;\n    const { realIndex, initialized, params, el } = swiper;\n    const breakpoints = params.breakpoints;\n    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\n    // Get breakpoint for window width and update parameters\n    const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = isGridEnabled(swiper, params);\n    const isMultiRow = isGridEnabled(swiper, breakpointParams);\n    const wasEnabled = params.enabled;\n    if (wasMultiRow && !isMultiRow) {\n        el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n        swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n        el.classList.add(`${params.containerModifierClass}grid`);\n        if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n            el.classList.add(`${params.containerModifierClass}grid-column`);\n        }\n        swiper.emitContainerClasses();\n    }\n    // Toggle navigation, pagination, scrollbar\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((prop)=>{\n        if (typeof breakpointParams[prop] === \"undefined\") return;\n        const wasModuleEnabled = params[prop] && params[prop].enabled;\n        const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n        if (wasModuleEnabled && !isModuleEnabled) {\n            swiper[prop].disable();\n        }\n        if (!wasModuleEnabled && isModuleEnabled) {\n            swiper[prop].enable();\n        }\n    });\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n    const wasLoop = params.loop;\n    if (directionChanged && initialized) {\n        swiper.changeDirection();\n    }\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(swiper.params, breakpointParams);\n    const isEnabled = swiper.params.enabled;\n    const hasLoop = swiper.params.loop;\n    Object.assign(swiper, {\n        allowTouchMove: swiper.params.allowTouchMove,\n        allowSlideNext: swiper.params.allowSlideNext,\n        allowSlidePrev: swiper.params.allowSlidePrev\n    });\n    if (wasEnabled && !isEnabled) {\n        swiper.disable();\n    } else if (!wasEnabled && isEnabled) {\n        swiper.enable();\n    }\n    swiper.currentBreakpoint = breakpoint;\n    swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n    if (initialized) {\n        if (needsReLoop) {\n            swiper.loopDestroy();\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (!wasLoop && hasLoop) {\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (wasLoop && !hasLoop) {\n            swiper.loopDestroy();\n        }\n    }\n    swiper.emit(\"breakpoint\", breakpointParams);\n}\nfunction getBreakpoint(breakpoints, base, containerEl) {\n    if (base === void 0) {\n        base = \"window\";\n    }\n    if (!breakpoints || base === \"container\" && !containerEl) return undefined;\n    let breakpoint = false;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const currentHeight = base === \"window\" ? window1.innerHeight : containerEl.clientHeight;\n    const points = Object.keys(breakpoints).map((point)=>{\n        if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n            const minRatio = parseFloat(point.substr(1));\n            const value = currentHeight * minRatio;\n            return {\n                value,\n                point\n            };\n        }\n        return {\n            value: point,\n            point\n        };\n    });\n    points.sort((a, b)=>parseInt(a.value, 10) - parseInt(b.value, 10));\n    for(let i = 0; i < points.length; i += 1){\n        const { point, value } = points[i];\n        if (base === \"window\") {\n            if (window1.matchMedia(`(min-width: ${value}px)`).matches) {\n                breakpoint = point;\n            }\n        } else if (value <= containerEl.clientWidth) {\n            breakpoint = point;\n        }\n    }\n    return breakpoint || \"max\";\n}\nvar breakpoints = {\n    setBreakpoint,\n    getBreakpoint\n};\nfunction prepareClasses(entries, prefix) {\n    const resultClasses = [];\n    entries.forEach((item)=>{\n        if (typeof item === \"object\") {\n            Object.keys(item).forEach((classNames)=>{\n                if (item[classNames]) {\n                    resultClasses.push(prefix + classNames);\n                }\n            });\n        } else if (typeof item === \"string\") {\n            resultClasses.push(prefix + item);\n        }\n    });\n    return resultClasses;\n}\nfunction addClasses() {\n    const swiper = this;\n    const { classNames, params, rtl, el, device } = swiper;\n    // prettier-ignore\n    const suffixes = prepareClasses([\n        \"initialized\",\n        params.direction,\n        {\n            \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n        },\n        {\n            \"autoheight\": params.autoHeight\n        },\n        {\n            \"rtl\": rtl\n        },\n        {\n            \"grid\": params.grid && params.grid.rows > 1\n        },\n        {\n            \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n        },\n        {\n            \"android\": device.android\n        },\n        {\n            \"ios\": device.ios\n        },\n        {\n            \"css-mode\": params.cssMode\n        },\n        {\n            \"centered\": params.cssMode && params.centeredSlides\n        },\n        {\n            \"watch-progress\": params.watchSlidesProgress\n        }\n    ], params.containerModifierClass);\n    classNames.push(...suffixes);\n    el.classList.add(...classNames);\n    swiper.emitContainerClasses();\n}\nfunction removeClasses() {\n    const swiper = this;\n    const { el, classNames } = swiper;\n    el.classList.remove(...classNames);\n    swiper.emitContainerClasses();\n}\nvar classes = {\n    addClasses,\n    removeClasses\n};\nfunction checkOverflow() {\n    const swiper = this;\n    const { isLocked: wasLocked, params } = swiper;\n    const { slidesOffsetBefore } = params;\n    if (slidesOffsetBefore) {\n        const lastSlideIndex = swiper.slides.length - 1;\n        const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n        swiper.isLocked = swiper.size > lastSlideRightEdge;\n    } else {\n        swiper.isLocked = swiper.snapGrid.length === 1;\n    }\n    if (params.allowSlideNext === true) {\n        swiper.allowSlideNext = !swiper.isLocked;\n    }\n    if (params.allowSlidePrev === true) {\n        swiper.allowSlidePrev = !swiper.isLocked;\n    }\n    if (wasLocked && wasLocked !== swiper.isLocked) {\n        swiper.isEnd = false;\n    }\n    if (wasLocked !== swiper.isLocked) {\n        swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n    }\n}\nvar checkOverflow$1 = {\n    checkOverflow\n};\nvar defaults = {\n    init: true,\n    direction: \"horizontal\",\n    oneWayMovement: false,\n    touchEventsTarget: \"wrapper\",\n    initialSlide: 0,\n    speed: 300,\n    cssMode: false,\n    updateOnWindowResize: true,\n    resizeObserver: true,\n    nested: false,\n    createElements: false,\n    eventsPrefix: \"swiper\",\n    enabled: true,\n    focusableElements: \"input, select, option, textarea, button, video, label\",\n    // Overrides\n    width: null,\n    height: null,\n    //\n    preventInteractionOnTransition: false,\n    // ssr\n    userAgent: null,\n    url: null,\n    // To support iOS's swipe-to-go-back gesture (when being used in-app).\n    edgeSwipeDetection: false,\n    edgeSwipeThreshold: 20,\n    // Autoheight\n    autoHeight: false,\n    // Set wrapper width\n    setWrapperSize: false,\n    // Virtual Translate\n    virtualTranslate: false,\n    // Effects\n    effect: \"slide\",\n    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n    // Breakpoints\n    breakpoints: undefined,\n    breakpointsBase: \"window\",\n    // Slides grid\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    slidesPerGroupAuto: false,\n    centeredSlides: false,\n    centeredSlidesBounds: false,\n    slidesOffsetBefore: 0,\n    // in px\n    slidesOffsetAfter: 0,\n    // in px\n    normalizeSlideIndex: true,\n    centerInsufficientSlides: false,\n    // Disable swiper and hide navigation when container not overflow\n    watchOverflow: true,\n    // Round length\n    roundLengths: false,\n    // Touches\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: true,\n    shortSwipes: true,\n    longSwipes: true,\n    longSwipesRatio: 0.5,\n    longSwipesMs: 300,\n    followFinger: true,\n    allowTouchMove: true,\n    threshold: 5,\n    touchMoveStopPropagation: false,\n    touchStartPreventDefault: true,\n    touchStartForcePreventDefault: false,\n    touchReleaseOnEdges: false,\n    // Unique Navigation Elements\n    uniqueNavElements: true,\n    // Resistance\n    resistance: true,\n    resistanceRatio: 0.85,\n    // Progress\n    watchSlidesProgress: false,\n    // Cursor\n    grabCursor: false,\n    // Clicks\n    preventClicks: true,\n    preventClicksPropagation: true,\n    slideToClickedSlide: false,\n    // loop\n    loop: false,\n    loopAddBlankSlides: true,\n    loopAdditionalSlides: 0,\n    loopPreventsSliding: true,\n    // rewind\n    rewind: false,\n    // Swiping/no swiping\n    allowSlidePrev: true,\n    allowSlideNext: true,\n    swipeHandler: null,\n    // '.swipe-handler',\n    noSwiping: true,\n    noSwipingClass: \"swiper-no-swiping\",\n    noSwipingSelector: null,\n    // Passive Listeners\n    passiveListeners: true,\n    maxBackfaceHiddenSlides: 10,\n    // NS\n    containerModifierClass: \"swiper-\",\n    // NEW\n    slideClass: \"swiper-slide\",\n    slideBlankClass: \"swiper-slide-blank\",\n    slideActiveClass: \"swiper-slide-active\",\n    slideVisibleClass: \"swiper-slide-visible\",\n    slideFullyVisibleClass: \"swiper-slide-fully-visible\",\n    slideNextClass: \"swiper-slide-next\",\n    slidePrevClass: \"swiper-slide-prev\",\n    wrapperClass: \"swiper-wrapper\",\n    lazyPreloaderClass: \"swiper-lazy-preloader\",\n    lazyPreloadPrevNext: 0,\n    // Callbacks\n    runCallbacksOnInit: true,\n    // Internals\n    _emitClasses: false\n};\nfunction moduleExtendParams(params, allModulesParams) {\n    return function extendParams(obj) {\n        if (obj === void 0) {\n            obj = {};\n        }\n        const moduleParamName = Object.keys(obj)[0];\n        const moduleParams = obj[moduleParamName];\n        if (typeof moduleParams !== \"object\" || moduleParams === null) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(allModulesParams, obj);\n            return;\n        }\n        if (params[moduleParamName] === true) {\n            params[moduleParamName] = {\n                enabled: true\n            };\n        }\n        if (moduleParamName === \"navigation\" && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\n            params[moduleParamName].auto = true;\n        }\n        if ([\n            \"pagination\",\n            \"scrollbar\"\n        ].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\n            params[moduleParamName].auto = true;\n        }\n        if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(allModulesParams, obj);\n            return;\n        }\n        if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n            params[moduleParamName].enabled = true;\n        }\n        if (!params[moduleParamName]) params[moduleParamName] = {\n            enabled: false\n        };\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(allModulesParams, obj);\n    };\n}\n/* eslint no-param-reassign: \"off\" */ const prototypes = {\n    eventsEmitter,\n    update,\n    translate,\n    transition,\n    slide,\n    loop,\n    grabCursor,\n    events: events$1,\n    breakpoints,\n    checkOverflow: checkOverflow$1,\n    classes\n};\nconst extendedDefaults = {};\nclass Swiper {\n    constructor(){\n        let el;\n        let params;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n            params = args[0];\n        } else {\n            [el, params] = args;\n        }\n        if (!params) params = {};\n        params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, params);\n        if (el && !params.el) params.el = el;\n        const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (params.el && typeof params.el === \"string\" && document1.querySelectorAll(params.el).length > 1) {\n            const swipers = [];\n            document1.querySelectorAll(params.el).forEach((containerEl)=>{\n                const newParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, params, {\n                    el: containerEl\n                });\n                swipers.push(new Swiper(newParams));\n            });\n            // eslint-disable-next-line no-constructor-return\n            return swipers;\n        }\n        // Swiper Instance\n        const swiper = this;\n        swiper.__swiper__ = true;\n        swiper.support = getSupport();\n        swiper.device = getDevice({\n            userAgent: params.userAgent\n        });\n        swiper.browser = getBrowser();\n        swiper.eventsListeners = {};\n        swiper.eventsAnyListeners = [];\n        swiper.modules = [\n            ...swiper.__modules__\n        ];\n        if (params.modules && Array.isArray(params.modules)) {\n            swiper.modules.push(...params.modules);\n        }\n        const allModulesParams = {};\n        swiper.modules.forEach((mod)=>{\n            mod({\n                params,\n                swiper,\n                extendParams: moduleExtendParams(params, allModulesParams),\n                on: swiper.on.bind(swiper),\n                once: swiper.once.bind(swiper),\n                off: swiper.off.bind(swiper),\n                emit: swiper.emit.bind(swiper)\n            });\n        });\n        // Extend defaults with modules params\n        const swiperParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, defaults, allModulesParams);\n        // Extend defaults with passed params\n        swiper.params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, swiperParams, extendedDefaults, params);\n        swiper.originalParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, swiper.params);\n        swiper.passedParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)({}, params);\n        // add event listeners\n        if (swiper.params && swiper.params.on) {\n            Object.keys(swiper.params.on).forEach((eventName)=>{\n                swiper.on(eventName, swiper.params.on[eventName]);\n            });\n        }\n        if (swiper.params && swiper.params.onAny) {\n            swiper.onAny(swiper.params.onAny);\n        }\n        // Extend Swiper\n        Object.assign(swiper, {\n            enabled: swiper.params.enabled,\n            el,\n            // Classes\n            classNames: [],\n            // Slides\n            slides: [],\n            slidesGrid: [],\n            snapGrid: [],\n            slidesSizesGrid: [],\n            // isDirection\n            isHorizontal () {\n                return swiper.params.direction === \"horizontal\";\n            },\n            isVertical () {\n                return swiper.params.direction === \"vertical\";\n            },\n            // Indexes\n            activeIndex: 0,\n            realIndex: 0,\n            //\n            isBeginning: true,\n            isEnd: false,\n            // Props\n            translate: 0,\n            previousTranslate: 0,\n            progress: 0,\n            velocity: 0,\n            animating: false,\n            cssOverflowAdjustment () {\n                // Returns 0 unless `translate` is > 2**23\n                // Should be subtracted from css values to prevent overflow\n                return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n            },\n            // Locks\n            allowSlideNext: swiper.params.allowSlideNext,\n            allowSlidePrev: swiper.params.allowSlidePrev,\n            // Touch Events\n            touchEventsData: {\n                isTouched: undefined,\n                isMoved: undefined,\n                allowTouchCallbacks: undefined,\n                touchStartTime: undefined,\n                isScrolling: undefined,\n                currentTranslate: undefined,\n                startTranslate: undefined,\n                allowThresholdMove: undefined,\n                // Form elements to match\n                focusableElements: swiper.params.focusableElements,\n                // Last click time\n                lastClickTime: 0,\n                clickTimeout: undefined,\n                // Velocities\n                velocities: [],\n                allowMomentumBounce: undefined,\n                startMoving: undefined,\n                pointerId: null,\n                touchId: null\n            },\n            // Clicks\n            allowClick: true,\n            // Touches\n            allowTouchMove: swiper.params.allowTouchMove,\n            touches: {\n                startX: 0,\n                startY: 0,\n                currentX: 0,\n                currentY: 0,\n                diff: 0\n            },\n            // Images\n            imagesToLoad: [],\n            imagesLoaded: 0\n        });\n        swiper.emit(\"_swiper\");\n        // Init\n        if (swiper.params.init) {\n            swiper.init();\n        }\n        // Return app instance\n        // eslint-disable-next-line no-constructor-return\n        return swiper;\n    }\n    getDirectionLabel(property) {\n        if (this.isHorizontal()) {\n            return property;\n        }\n        // prettier-ignore\n        return ({\n            \"width\": \"height\",\n            \"margin-top\": \"margin-left\",\n            \"margin-bottom \": \"margin-right\",\n            \"margin-left\": \"margin-top\",\n            \"margin-right\": \"margin-bottom\",\n            \"padding-left\": \"padding-top\",\n            \"padding-right\": \"padding-bottom\",\n            \"marginRight\": \"marginBottom\"\n        })[property];\n    }\n    getSlideIndex(slideEl) {\n        const { slidesEl, params } = this;\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n        const firstSlideIndex = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(slides[0]);\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(slideEl) - firstSlideIndex;\n    }\n    getSlideIndexByData(index) {\n        return this.getSlideIndex(this.slides.filter((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === index)[0]);\n    }\n    recalcSlides() {\n        const swiper = this;\n        const { slidesEl, params } = swiper;\n        swiper.slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n    }\n    enable() {\n        const swiper = this;\n        if (swiper.enabled) return;\n        swiper.enabled = true;\n        if (swiper.params.grabCursor) {\n            swiper.setGrabCursor();\n        }\n        swiper.emit(\"enable\");\n    }\n    disable() {\n        const swiper = this;\n        if (!swiper.enabled) return;\n        swiper.enabled = false;\n        if (swiper.params.grabCursor) {\n            swiper.unsetGrabCursor();\n        }\n        swiper.emit(\"disable\");\n    }\n    setProgress(progress, speed) {\n        const swiper = this;\n        progress = Math.min(Math.max(progress, 0), 1);\n        const min = swiper.minTranslate();\n        const max = swiper.maxTranslate();\n        const current = (max - min) * progress + min;\n        swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    emitContainerClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const cls = swiper.el.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n        });\n        swiper.emit(\"_containerClasses\", cls.join(\" \"));\n    }\n    getSlideClasses(slideEl) {\n        const swiper = this;\n        if (swiper.destroyed) return \"\";\n        return slideEl.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n        }).join(\" \");\n    }\n    emitSlidesClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const updates = [];\n        swiper.slides.forEach((slideEl)=>{\n            const classNames = swiper.getSlideClasses(slideEl);\n            updates.push({\n                slideEl,\n                classNames\n            });\n            swiper.emit(\"_slideClass\", slideEl, classNames);\n        });\n        swiper.emit(\"_slideClasses\", updates);\n    }\n    slidesPerViewDynamic(view, exact) {\n        if (view === void 0) {\n            view = \"current\";\n        }\n        if (exact === void 0) {\n            exact = false;\n        }\n        const swiper = this;\n        const { params, slides, slidesGrid, slidesSizesGrid, size: swiperSize, activeIndex } = swiper;\n        let spv = 1;\n        if (typeof params.slidesPerView === \"number\") return params.slidesPerView;\n        if (params.centeredSlides) {\n            let slideSize = slides[activeIndex] ? slides[activeIndex].swiperSlideSize : 0;\n            let breakLoop;\n            for(let i = activeIndex + 1; i < slides.length; i += 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += slides[i].swiperSlideSize;\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n            for(let i = activeIndex - 1; i >= 0; i -= 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += slides[i].swiperSlideSize;\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n        } else {\n            // eslint-disable-next-line\n            if (view === \"current\") {\n                for(let i = activeIndex + 1; i < slides.length; i += 1){\n                    const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            } else {\n                // previous\n                for(let i = activeIndex - 1; i >= 0; i -= 1){\n                    const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            }\n        }\n        return spv;\n    }\n    update() {\n        const swiper = this;\n        if (!swiper || swiper.destroyed) return;\n        const { snapGrid, params } = swiper;\n        // Breakpoints\n        if (params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ].forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            }\n        });\n        swiper.updateSize();\n        swiper.updateSlides();\n        swiper.updateProgress();\n        swiper.updateSlidesClasses();\n        function setTranslate() {\n            const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n            const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n            swiper.setTranslate(newTranslate);\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n        let translated;\n        if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\n            setTranslate();\n            if (params.autoHeight) {\n                swiper.updateAutoHeight();\n            }\n        } else {\n            if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\n                const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\n                translated = swiper.slideTo(slides.length - 1, 0, false, true);\n            } else {\n                translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n            }\n            if (!translated) {\n                setTranslate();\n            }\n        }\n        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n            swiper.checkOverflow();\n        }\n        swiper.emit(\"update\");\n    }\n    changeDirection(newDirection, needUpdate) {\n        if (needUpdate === void 0) {\n            needUpdate = true;\n        }\n        const swiper = this;\n        const currentDirection = swiper.params.direction;\n        if (!newDirection) {\n            // eslint-disable-next-line\n            newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n        }\n        if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n            return swiper;\n        }\n        swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\n        swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\n        swiper.emitContainerClasses();\n        swiper.params.direction = newDirection;\n        swiper.slides.forEach((slideEl)=>{\n            if (newDirection === \"vertical\") {\n                slideEl.style.width = \"\";\n            } else {\n                slideEl.style.height = \"\";\n            }\n        });\n        swiper.emit(\"changeDirection\");\n        if (needUpdate) swiper.update();\n        return swiper;\n    }\n    changeLanguageDirection(direction) {\n        const swiper = this;\n        if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\") return;\n        swiper.rtl = direction === \"rtl\";\n        swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n        if (swiper.rtl) {\n            swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\n            swiper.el.dir = \"rtl\";\n        } else {\n            swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\n            swiper.el.dir = \"ltr\";\n        }\n        swiper.update();\n    }\n    mount(element) {\n        const swiper = this;\n        if (swiper.mounted) return true;\n        // Find el\n        let el = element || swiper.params.el;\n        if (typeof el === \"string\") {\n            el = document.querySelector(el);\n        }\n        if (!el) {\n            return false;\n        }\n        el.swiper = swiper;\n        if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === \"SWIPER-CONTAINER\") {\n            swiper.isElement = true;\n        }\n        const getWrapperSelector = ()=>{\n            return `.${(swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n        };\n        const getWrapper = ()=>{\n            if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n                const res = el.shadowRoot.querySelector(getWrapperSelector());\n                // Children needs to return slot items\n                return res;\n            }\n            return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, getWrapperSelector())[0];\n        };\n        // Find Wrapper\n        let wrapperEl = getWrapper();\n        if (!wrapperEl && swiper.params.createElements) {\n            wrapperEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.wrapperClass);\n            el.append(wrapperEl);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, `.${swiper.params.slideClass}`).forEach((slideEl)=>{\n                wrapperEl.append(slideEl);\n            });\n        }\n        Object.assign(swiper, {\n            el,\n            wrapperEl,\n            slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\n            hostEl: swiper.isElement ? el.parentNode.host : el,\n            mounted: true,\n            // RTL\n            rtl: el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"direction\") === \"rtl\",\n            rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el, \"direction\") === \"rtl\"),\n            wrongRTL: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(wrapperEl, \"display\") === \"-webkit-box\"\n        });\n        return true;\n    }\n    init(el) {\n        const swiper = this;\n        if (swiper.initialized) return swiper;\n        const mounted = swiper.mount(el);\n        if (mounted === false) return swiper;\n        swiper.emit(\"beforeInit\");\n        // Set breakpoint\n        if (swiper.params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        // Add Classes\n        swiper.addClasses();\n        // Update size\n        swiper.updateSize();\n        // Update slides\n        swiper.updateSlides();\n        if (swiper.params.watchOverflow) {\n            swiper.checkOverflow();\n        }\n        // Set Grab Cursor\n        if (swiper.params.grabCursor && swiper.enabled) {\n            swiper.setGrabCursor();\n        }\n        // Slide To Initial Slide\n        if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\n        } else {\n            swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n        }\n        // Create loop\n        if (swiper.params.loop) {\n            swiper.loopCreate();\n        }\n        // Attach events\n        swiper.attachEvents();\n        const lazyElements = [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ];\n        if (swiper.isElement) {\n            lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\n        }\n        lazyElements.forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            } else {\n                imageEl.addEventListener(\"load\", (e)=>{\n                    processLazyPreloader(swiper, e.target);\n                });\n            }\n        });\n        preload(swiper);\n        // Init Flag\n        swiper.initialized = true;\n        preload(swiper);\n        // Emit\n        swiper.emit(\"init\");\n        swiper.emit(\"afterInit\");\n        return swiper;\n    }\n    destroy(deleteInstance, cleanStyles) {\n        if (deleteInstance === void 0) {\n            deleteInstance = true;\n        }\n        if (cleanStyles === void 0) {\n            cleanStyles = true;\n        }\n        const swiper = this;\n        const { params, el, wrapperEl, slides } = swiper;\n        if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n            return null;\n        }\n        swiper.emit(\"beforeDestroy\");\n        // Init Flag\n        swiper.initialized = false;\n        // Detach events\n        swiper.detachEvents();\n        // Destroy loop\n        if (params.loop) {\n            swiper.loopDestroy();\n        }\n        // Cleanup styles\n        if (cleanStyles) {\n            swiper.removeClasses();\n            el.removeAttribute(\"style\");\n            wrapperEl.removeAttribute(\"style\");\n            if (slides && slides.length) {\n                slides.forEach((slideEl)=>{\n                    slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n                    slideEl.removeAttribute(\"style\");\n                    slideEl.removeAttribute(\"data-swiper-slide-index\");\n                });\n            }\n        }\n        swiper.emit(\"destroy\");\n        // Detach emitter events\n        Object.keys(swiper.eventsListeners).forEach((eventName)=>{\n            swiper.off(eventName);\n        });\n        if (deleteInstance !== false) {\n            swiper.el.swiper = null;\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)(swiper);\n        }\n        swiper.destroyed = true;\n        return null;\n    }\n    static extendDefaults(newDefaults) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(extendedDefaults, newDefaults);\n    }\n    static get extendedDefaults() {\n        return extendedDefaults;\n    }\n    static get defaults() {\n        return defaults;\n    }\n    static installModule(mod) {\n        if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n        const modules = Swiper.prototype.__modules__;\n        if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n            modules.push(mod);\n        }\n    }\n    static use(module) {\n        if (Array.isArray(module)) {\n            module.forEach((m)=>Swiper.installModule(m));\n            return Swiper;\n        }\n        Swiper.installModule(module);\n        return Swiper;\n    }\n}\nObject.keys(prototypes).forEach((prototypeGroup)=>{\n    Object.keys(prototypes[prototypeGroup]).forEach((protoMethod)=>{\n        Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n    });\n});\nSwiper.use([\n    Resize,\n    Observer\n]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0U7QUFDd1E7QUFFaFYsSUFBSWtDO0FBQ0osU0FBU0M7SUFDUCxNQUFNQyxVQUFTbkMsc0RBQVNBO0lBQ3hCLE1BQU1vQyxZQUFXbEMsc0RBQVdBO0lBQzVCLE9BQU87UUFDTG1DLGNBQWNELFVBQVNFLGVBQWUsSUFBSUYsVUFBU0UsZUFBZSxDQUFDQyxLQUFLLElBQUksb0JBQW9CSCxVQUFTRSxlQUFlLENBQUNDLEtBQUs7UUFDOUhDLE9BQU8sQ0FBQyxDQUFFLG1CQUFrQkwsV0FBVUEsUUFBT00sYUFBYSxJQUFJTCxxQkFBb0JELFFBQU9NLGFBQWE7SUFDeEc7QUFDRjtBQUNBLFNBQVNDO0lBQ1AsSUFBSSxDQUFDVCxTQUFTO1FBQ1pBLFVBQVVDO0lBQ1o7SUFDQSxPQUFPRDtBQUNUO0FBRUEsSUFBSVU7QUFDSixTQUFTQyxXQUFXQyxLQUFLO0lBQ3ZCLElBQUksRUFDRkMsU0FBUyxFQUNWLEdBQUdELFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSUE7SUFDNUIsTUFBTVosVUFBVVM7SUFDaEIsTUFBTVAsVUFBU25DLHNEQUFTQTtJQUN4QixNQUFNK0MsV0FBV1osUUFBT2EsU0FBUyxDQUFDRCxRQUFRO0lBQzFDLE1BQU1FLEtBQUtILGFBQWFYLFFBQU9hLFNBQVMsQ0FBQ0YsU0FBUztJQUNsRCxNQUFNSSxTQUFTO1FBQ2JDLEtBQUs7UUFDTEMsU0FBUztJQUNYO0lBQ0EsTUFBTUMsY0FBY2xCLFFBQU9tQixNQUFNLENBQUNDLEtBQUs7SUFDdkMsTUFBTUMsZUFBZXJCLFFBQU9tQixNQUFNLENBQUNHLE1BQU07SUFDekMsTUFBTUwsVUFBVUgsR0FBR1MsS0FBSyxDQUFDLGdDQUFnQyxzQkFBc0I7SUFDL0UsSUFBSUMsT0FBT1YsR0FBR1MsS0FBSyxDQUFDO0lBQ3BCLE1BQU1FLE9BQU9YLEdBQUdTLEtBQUssQ0FBQztJQUN0QixN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SUFDekU7QUFDRjtBQUNBekQsT0FBT3NELEdBQUcsQ0FBQztJQUFDM3JCO0lBQVFpQztDQUFTO0FBRVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UvLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3dpcGVyLWNvcmUubWpzPzBiMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGVsZW1lbnRQYXJlbnRzLCBtIGFzIGVsZW1lbnRTdHlsZSwgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIHMgYXMgc2V0Q1NTUHJvcGVydHksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgbyBhcyBlbGVtZW50TmV4dEFsbCwgcCBhcyBlbGVtZW50UHJldkFsbCwgaSBhcyBnZXRUcmFuc2xhdGUsIHEgYXMgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIG4gYXMgbmV4dFRpY2ssIHIgYXMgc2hvd1dhcm5pbmcsIGMgYXMgY3JlYXRlRWxlbWVudCwgZCBhcyBub3csIHQgYXMgZXh0ZW5kLCBnIGFzIGVsZW1lbnRJbmRleCwgdSBhcyBkZWxldGVQcm9wcyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdXNlckFnZW50XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5sZXQgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG5lZWRQZXJzcGVjdGl2ZUZpeCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDA7XG4gIH1cbiAgaWYgKGlzU2FmYXJpKCkpIHtcbiAgICBjb25zdCB1YSA9IFN0cmluZyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKHVhLmluY2x1ZGVzKCdWZXJzaW9uLycpKSB7XG4gICAgICBjb25zdCBbbWFqb3IsIG1pbm9yXSA9IHVhLnNwbGl0KCdWZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKS5tYXAobnVtID0+IE51bWJlcihudW0pKTtcbiAgICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCA9IG1ham9yIDwgMTYgfHwgbWFqb3IgPT09IDE2ICYmIG1pbm9yIDwgMjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogbmVlZFBlcnNwZWN0aXZlRml4IHx8IGlzU2FmYXJpKCksXG4gICAgbmVlZFBlcnNwZWN0aXZlRml4LFxuICAgIGlzV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmZ1bmN0aW9uIFJlc2l6ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IHN3aXBlcjtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICB9O1xuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci51bm9ic2VydmUgJiYgc3dpcGVyLmVsKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICByZW1vdmVPYnNlcnZlcigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG52YXIgZXZlbnRzRW1pdHRlciA9IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHNsaWRlc0VsLFxuICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JvbmdSVExcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gIC8vIHJlc2V0IG1hcmdpbnNcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcbiAgICB9XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xuICB9KTtcblxuICAvLyByZXNldCBjc3NNb2RlIG9mZnNldHNcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCAnJyk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgc3dpcGVyLmdyaWQ7XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLmluaXRTbGlkZXMoc2xpZGVzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuZ3JpZCkge1xuICAgIHN3aXBlci5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0gJiYgZWxlbWVudFN0eWxlKHNsaWRlLCAnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZS53aWR0aCA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51cGRhdGVXcmFwcGVyU2l6ZShzbGlkZVNpemUsIHNuYXBHcmlkKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBzaXplID0gc2xpZGVzU2l6ZXNHcmlkWzBdICsgc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cHMgPSBNYXRoLmNlaWwoKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBjb25zdCBncm91cFNpemUgPSBzaXplICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHM7IGkgKz0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgZ3JvdXBTaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcjsgaSArPSAxKSB7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzaXplO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcbiAgaWYgKHNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGNvbnN0IGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7XG4gICAgc2xpZGVzLmZpbHRlcigoXywgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSB8fCBwYXJhbXMubG9vcCkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGVba2V5XSA9IGAke3NwYWNlQmV0d2Vlbn1weGA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPD0gMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBpZiAoYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgc2xpZGVzLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgYCR7LXNuYXBHcmlkWzBdfXB4YCk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgYCR7c3dpcGVyLnNpemUgLyAyIC0gc2xpZGVzU2l6ZXNHcmlkW3NsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSAvIDJ9cHhgKTtcbiAgICBjb25zdCBhZGRUb1NuYXBHcmlkID0gLXN3aXBlci5zbmFwR3JpZFswXTtcbiAgICBjb25zdCBhZGRUb1NsaWRlc0dyaWQgPSAtc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgc3dpcGVyLnNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NuYXBHcmlkKTtcbiAgICBzd2lwZXIuc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NsaWRlc0dyaWQpO1xuICB9XG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlc1VwZGF0ZWQnKTtcbiAgaWYgKCFpc1ZpcnR1YWwgJiYgIXBhcmFtcy5jc3NNb2RlICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdmYWRlJykpIHtcbiAgICBjb25zdCBiYWNrRmFjZUhpZGRlbkNsYXNzID0gYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9YmFja2ZhY2UtaGlkZGVuYDtcbiAgICBjb25zdCBoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCA9IHN3aXBlci5lbC5jbGFzc0xpc3QuY29udGFpbnMoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgaWYgKHNsaWRlc0xlbmd0aCA8PSBwYXJhbXMubWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMpIHtcbiAgICAgIGlmICghaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG4gIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCldO1xuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gIH07XG4gIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCBbXSkuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9XG5cbiAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIEhlaWdodFxuICBpZiAobmV3SGVpZ2h0IHx8IG5ld0hlaWdodCA9PT0gMCkgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtuZXdIZWlnaHR9cHhgO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBtaW51c09mZnNldCA9IHN3aXBlci5pc0VsZW1lbnQgPyBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzd2lwZXIud3JhcHBlckVsLm9mZnNldExlZnQgOiBzd2lwZXIud3JhcHBlckVsLm9mZnNldFRvcCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcCkgLSBtaW51c09mZnNldCAtIHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gdGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSB8fCAwO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVmlzaWJsZSBTbGlkZXNcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MpO1xuICB9KTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXIuc2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGVPZmZzZXQpO1xuICAgIGNvbnN0IHNsaWRlQWZ0ZXIgPSBzbGlkZUJlZm9yZSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNGdWxseVZpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDw9IHN3aXBlci5zaXplIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoaXNGdWxseVZpc2libGUpIHtcbiAgICAgIHNsaWRlc1tpXS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgICB9XG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gICAgcHJvZ3Jlc3NMb29wXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGNvbnN0IGlzQmVnaW5uaW5nUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgPCAxO1xuICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgIGlzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmdSb3VuZGVkIHx8IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBpc0VuZFJvdW5kZWQgfHwgcHJvZ3Jlc3MgPj0gMTtcbiAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgaWYgKGlzRW5kUm91bmRlZCkgcHJvZ3Jlc3MgPSAxO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKDApO1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCBsYXN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgdHJhbnNsYXRlTWF4ID0gc3dpcGVyLnNsaWRlc0dyaWRbc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICBpZiAodHJhbnNsYXRlQWJzID49IGZpcnN0U2xpZGVUcmFuc2xhdGUpIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgLSBmaXJzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyArIHRyYW5zbGF0ZU1heCAtIGxhc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTG9vcCxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgbGV0IHByZXZTbGlkZTtcbiAgbGV0IG5leHRTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBhY3RpdmVJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzbGlkZUluZGV4O1xuICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCArIDEpWzBdO1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleCAtIDEpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlc1thY3RpdmVJbmRleF07XG4gICAgfVxuICB9XG4gIGlmIChhY3RpdmVTbGlkZSkge1xuICAgIC8vIEFjdGl2ZSBjbGFzc2VzXG4gICAgYWN0aXZlU2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG4gICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAocHJldlNsaWRlKSB7XG4gICAgICAgIHByZXZTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5leHQgU2xpZGVcbiAgICAgIG5leHRTbGlkZSA9IGVsZW1lbnROZXh0QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhbmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZSA9IHNsaWRlc1swXTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXh0U2xpZGUpIHtcbiAgICAgICAgbmV4dFNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJldiBTbGlkZVxuICAgICAgcHJldlNsaWRlID0gZWxlbWVudFByZXZBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgICAgaWYgKHBhcmFtcy5sb29wICYmICFwcmV2U2xpZGUgPT09IDApIHtcbiAgICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2U2xpZGUpIHtcbiAgICAgICAgcHJldlNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59XG5cbmNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKHN3aXBlciwgaW1hZ2VFbCkgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSAoKSA9PiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGNvbnN0IHNsaWRlRWwgPSBpbWFnZUVsLmNsb3Nlc3Qoc2xpZGVTZWxlY3RvcigpKTtcbiAgaWYgKHNsaWRlRWwpIHtcbiAgICBsZXQgbGF6eUVsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICBpZiAoIWxhenlFbCAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgIGxhenlFbCA9IHNsaWRlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluaXQgbGF0ZXJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGVFbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICAgICAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICB9XG59O1xuY29uc3QgdW5sYXp5ID0gKHN3aXBlciwgaW5kZXgpID0+IHtcbiAgaWYgKCFzd2lwZXIuc2xpZGVzW2luZGV4XSkgcmV0dXJuO1xuICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnNsaWRlc1tpbmRleF0ucXVlcnlTZWxlY3RvcignW2xvYWRpbmc9XCJsYXp5XCJdJyk7XG4gIGlmIChpbWFnZUVsKSBpbWFnZUVsLnJlbW92ZUF0dHJpYnV0ZSgnbG9hZGluZycpO1xufTtcbmNvbnN0IHByZWxvYWQgPSBzd2lwZXIgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGxldCBhbW91bnQgPSBzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkUHJldk5leHQ7XG4gIGNvbnN0IGxlbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIWxlbiB8fCAhYW1vdW50IHx8IGFtb3VudCA8IDApIHJldHVybjtcbiAgYW1vdW50ID0gTWF0aC5taW4oYW1vdW50LCBsZW4pO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpO1xuICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEpIHtcbiAgICBjb25zdCBhY3RpdmVDb2x1bW4gPSBhY3RpdmVJbmRleDtcbiAgICBjb25zdCBwcmVsb2FkQ29sdW1ucyA9IFthY3RpdmVDb2x1bW4gLSBhbW91bnRdO1xuICAgIHByZWxvYWRDb2x1bW5zLnB1c2goLi4uQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IGFtb3VudFxuICAgIH0pLm1hcCgoXywgaSkgPT4ge1xuICAgICAgcmV0dXJuIGFjdGl2ZUNvbHVtbiArIHNsaWRlc1BlclZpZXcgKyBpO1xuICAgIH0pKTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGkpID0+IHtcbiAgICAgIGlmIChwcmVsb2FkQ29sdW1ucy5pbmNsdWRlcyhzbGlkZUVsLmNvbHVtbikpIHVubGF6eShzd2lwZXIsIGkpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZUluZGV4TGFzdEluVmlldyA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldyAtIDE7XG4gIGlmIChzd2lwZXIucGFyYW1zLnJld2luZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSBhbW91bnQ7IGkgPD0gc2xpZGVJbmRleExhc3RJblZpZXcgKyBhbW91bnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgcmVhbEluZGV4ID0gKGkgJSBsZW4gKyBsZW4pICUgbGVuO1xuICAgICAgaWYgKHJlYWxJbmRleCA8IGFjdGl2ZUluZGV4IHx8IHJlYWxJbmRleCA+IHNsaWRlSW5kZXhMYXN0SW5WaWV3KSB1bmxhenkoc3dpcGVyLCByZWFsSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBhbW91bnQsIDApOyBpIDw9IE1hdGgubWluKHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50LCBsZW4gLSAxKTsgaSArPSAxKSB7XG4gICAgICBpZiAoaSAhPT0gYWN0aXZlSW5kZXggJiYgKGkgPiBzbGlkZUluZGV4TGFzdEluVmlldyB8fCBpIDwgYWN0aXZlSW5kZXgpKSB7XG4gICAgICAgIHVubGF6eShzd2lwZXIsIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBhY3RpdmVJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgfVxuICByZXR1cm4gYWN0aXZlSW5kZXg7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgY29uc3QgZ2V0VmlydHVhbFJlYWxJbmRleCA9IGFJbmRleCA9PiB7XG4gICAgbGV0IHJlYWxJbmRleCA9IGFJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHJlYWxJbmRleDtcbiAgICB9XG4gICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZWFsSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgc3dpcGVyLnJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuXG4gIC8vIEdldCByZWFsIGluZGV4XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHBhcmFtcy5sb29wKSB7XG4gICAgcmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5Db2x1bW4gPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY29sdW1uID09PSBhY3RpdmVJbmRleClbMF07XG4gICAgbGV0IGFjdGl2ZVNsaWRlSW5kZXggPSBwYXJzZUludChmaXJzdFNsaWRlSW5Db2x1bW4uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihhY3RpdmVTbGlkZUluZGV4KSkge1xuICAgICAgYWN0aXZlU2xpZGVJbmRleCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXMuaW5kZXhPZihmaXJzdFNsaWRlSW5Db2x1bW4pLCAwKTtcbiAgICB9XG4gICAgcmVhbEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVTbGlkZUluZGV4IC8gcGFyYW1zLmdyaWQucm93cyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0pIHtcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICByZWFsSW5kZXggPSBwYXJzZUludChzbGlkZUluZGV4LCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByZXZpb3VzU25hcEluZGV4LFxuICAgIHNuYXBJbmRleCxcbiAgICBwcmV2aW91c1JlYWxJbmRleCxcbiAgICByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleFxuICB9KTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkge1xuICAgIHByZWxvYWQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlKGVsLCBwYXRoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGxldCBzbGlkZSA9IGVsLmNsb3Nlc3QoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGlmICghc2xpZGUgJiYgc3dpcGVyLmlzRWxlbWVudCAmJiBwYXRoICYmIHBhdGgubGVuZ3RoID4gMSAmJiBwYXRoLmluY2x1ZGVzKGVsKSkge1xuICAgIFsuLi5wYXRoLnNsaWNlKHBhdGguaW5kZXhPZihlbCkgKyAxLCBwYXRoLmxlbmd0aCldLmZvckVhY2gocGF0aEVsID0+IHtcbiAgICAgIGlmICghc2xpZGUgJiYgcGF0aEVsLm1hdGNoZXMgJiYgcGF0aEVsLm1hdGNoZXMoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXRoRWw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgbGV0IHNsaWRlSW5kZXg7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gc2xpZGVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn1cblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZVxufTtcblxuZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgdHJhbnNsYXRlLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG4gIGxldCBjdXJyZW50VHJhbnNsYXRlID0gZ2V0VHJhbnNsYXRlKHdyYXBwZXJFbCwgYXhpcyk7XG4gIGN1cnJlbnRUcmFuc2xhdGUgKz0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufVxuXG5mdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUsIHNwZWVkLCBydW5DYWxsYmFja3MsIHRyYW5zbGF0ZUJvdW5kcywgaW50ZXJuYWwpIHtcbiAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHJhbnNsYXRlQm91bmRzID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBjb25zdCBtYXhUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gIGxldCBuZXdUcmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7ZWxzZSBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA8IG1heFRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWF4VHJhbnNsYXRlO2Vsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgdHJhbnNsYXRlID0ge1xuICBnZXRUcmFuc2xhdGU6IGdldFN3aXBlclRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07XG5cbmZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gZHVyYXRpb24gPT09IDAgPyBgMG1zYCA6ICcnO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwXG4gIH0gPSBfcmVmO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ0VuZCdcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07XG5cbmZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBwYXJzZUludChpbmRleCwgMTApO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24gfHwgIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTtcbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR3JpZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChydGwgPyB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZUluZGV4ICE9PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnO1xuXG4gIC8vIFVwZGF0ZSBJbmRleFxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCAmJiAhc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPiAwKSB7XG4gICAgICAgIHN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ID0gdHJ1ZTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiB0LFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IHQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2UgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdJbmRleCA9IG5ld0luZGV4ICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFyZ2V0U2xpZGVJbmRleDtcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MpIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGNlbnRlcmVkU2xpZGVzXG4gICAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIGxldCBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgICAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBuZWVkTG9vcEZpeCA9IGNvbHMgLSB0YXJnZXRTbGlkZUluZGV4IDwgc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBuZWVkTG9vcEZpeCA9IG5lZWRMb29wRml4IHx8IHRhcmdldFNsaWRlSW5kZXggPCBNYXRoLmNlaWwoc2xpZGVzUGVyVmlldyAvIDIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMb29wRml4KSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGNlbnRlcmVkU2xpZGVzID8gdGFyZ2V0U2xpZGVJbmRleCA8IHN3aXBlci5hY3RpdmVJbmRleCA/ICdwcmV2JyA6ICduZXh0JyA6IHRhcmdldFNsaWRlSW5kZXggLSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxIDwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgIHNsaWRlVG86IHRydWUsXG4gICAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyB0YXJnZXRTbGlkZUluZGV4ICsgMSA6IHRhcmdldFNsaWRlSW5kZXggLSBjb2xzICsgMSxcbiAgICAgICAgICBzbGlkZVJlYWxJbmRleDogZGlyZWN0aW9uID09PSAnbmV4dCcgPyBzd2lwZXIucmVhbEluZGV4IDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzbGlkZUluZGV4KVswXS5jb2x1bW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9KTtcbiAgcmV0dXJuIHN3aXBlcjtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVuYWJsZWQsXG4gICAgcGFyYW1zLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICBwZXJHcm91cCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygnY3VycmVudCcsIHRydWUpLCAxKTtcbiAgfVxuICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICduZXh0J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgICBpZiAoc3dpcGVyLmFjdGl2ZUluZGV4ID09PSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZCxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICdwcmV2J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgfVxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgbGV0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBsZXQgcHJldlNuYXBJbmRleDtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IHNuYXApIHtcbiAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwO1xuICAgICAgICBwcmV2U25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgcHJldlNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHByZXZTbmFwID0gc25hcEdyaWRbcHJldlNuYXBJbmRleCA+IDAgPyBwcmV2U25hcEluZGV4IC0gMSA6IHByZXZTbmFwSW5kZXhdO1xuICAgIH1cbiAgfVxuICBsZXQgcHJldkluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxO1xuICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGxhc3RJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9IGVsc2UgaWYgKHBhcmFtcy5sb29wICYmIHN3aXBlci5hY3RpdmVJbmRleCA9PT0gMCAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHtcbiAgICB0aHJlc2hvbGQgPSAwLjU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KTtcbiAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggKz0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBiZWZvcmUgaXQuXG4gICAgY29uc3QgcHJldlNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4IC0gMV07XG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKGN1cnJlbnRTbmFwIC0gcHJldlNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCAtPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfVxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvQ2xpY2tlZFNsaWRlKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufVxuXG52YXIgc2xpZGUgPSB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBzbGlkZXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAqIChncmlkRW5hYmxlZCA/IHBhcmFtcy5ncmlkLnJvd3MgOiAxKTtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyb3VwID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cCAhPT0gMDtcbiAgY29uc3Qgc2hvdWxkRmlsbEdyaWQgPSBncmlkRW5hYmxlZCAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3MgIT09IDA7XG4gIGNvbnN0IGFkZEJsYW5rU2xpZGVzID0gYW1vdW50T2ZTbGlkZXMgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW1vdW50T2ZTbGlkZXM7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5pc0VsZW1lbnQgPyBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnLCBbcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pIDogY3JlYXRlRWxlbWVudCgnZGl2JywgW3BhcmFtcy5zbGlkZUNsYXNzLCBwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSk7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHNob3VsZEZpbGxHcm91cCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHNsaWRlc1Blckdyb3VwIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBzbGlkZXNQZXJHcm91cDtcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIHNsaWRlc1Blckdyb3VwLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2UgaWYgKHNob3VsZEZpbGxHcmlkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gcGFyYW1zLmdyaWQucm93cyAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cztcbiAgICAgIGFkZEJsYW5rU2xpZGVzKHNsaWRlc1RvQWRkKTtcbiAgICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBldmVuIHRvIGdyaWQucm93cywgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH1cbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb29wRml4KF90ZW1wKSB7XG4gIGxldCB7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgc2xpZGVUbyA9IHRydWUsXG4gICAgZGlyZWN0aW9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgIGJ5Q29udHJvbGxlcixcbiAgICBieU1vdXNld2hlZWxcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNsaWRlc0VsLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgY2VudGVyZWRTbGlkZXNcbiAgfSA9IHBhcmFtcztcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBpZiAoc2xpZGVUbykge1xuICAgICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA9PT0gMCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4IDwgcGFyYW1zLnNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHN3aXBlci5zbmFwSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnNuYXBJbmRleCA9PT0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICAgIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCk7XG4gIH0gZWxzZSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgIH1cbiAgfVxuICBjb25zdCBzbGlkZXNQZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8gPyBzbGlkZXNQZXJWaWV3IDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBsZXQgbG9vcGVkU2xpZGVzID0gc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cCAhPT0gMCkge1xuICAgIGxvb3BlZFNsaWRlcyArPSBzbGlkZXNQZXJHcm91cCAtIGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwO1xuICB9XG4gIGxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGlmIChzbGlkZXMubGVuZ3RoIDwgc2xpZGVzUGVyVmlldyArIGxvb3BlZFNsaWRlcykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZW5vdWdoIGZvciBsb29wIG1vZGUsIGl0IHdpbGwgYmUgZGlzYWJsZWQgYW5kIG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMpIG9yIGxvd2VyIHRoZSB2YWx1ZXMgb2Ygc2xpZGVzUGVyVmlldyBhbmQgc2xpZGVzUGVyR3JvdXAgcGFyYW1ldGVycycpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdyb3cnKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IExvb3AgbW9kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGdyaWQuZmlsbCA9IGByb3dgJyk7XG4gIH1cbiAgY29uc3QgcHJlcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKVswXSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlSW5kZXggPSBhY3RpdmVTbGlkZUluZGV4O1xuICB9XG4gIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gIGNvbnN0IGlzUHJldiA9IGRpcmVjdGlvbiA9PT0gJ3ByZXYnIHx8ICFkaXJlY3Rpb247XG4gIGxldCBzbGlkZXNQcmVwZW5kZWQgPSAwO1xuICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc2xpZGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MpIDogc2xpZGVzLmxlbmd0aDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXggPSBncmlkRW5hYmxlZCA/IHNsaWRlc1thY3RpdmVTbGlkZUluZGV4XS5jb2x1bW4gOiBhY3RpdmVTbGlkZUluZGV4O1xuICBjb25zdCBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA9IGFjdGl2ZUNvbEluZGV4ICsgKGNlbnRlcmVkU2xpZGVzICYmIHR5cGVvZiBzZXRUcmFuc2xhdGUgPT09ICd1bmRlZmluZWQnID8gLXNsaWRlc1BlclZpZXcgLyAyICsgMC41IDogMCk7XG4gIC8vIHByZXBlbmQgbGFzdCBzbGlkZXMgYmVmb3JlIHN0YXJ0XG4gIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCA8IGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0LCBzbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBjb2xzKSAqIGNvbHM7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgY29sSW5kZXhUb1ByZXBlbmQgPSBjb2xzIC0gaW5kZXggLSAxO1xuICAgICAgICBmb3IgKGxldCBpID0gc2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAvLyAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGNvbEluZGV4VG9QcmVwZW5kKSBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICAvLyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goY29scyAtIGluZGV4IC0gMSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ICsgc2xpZGVzUGVyVmlldyA+IGNvbHMgLSBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNBcHBlbmRlZCA9IE1hdGgubWF4KGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IC0gKGNvbHMgLSBsb29wZWRTbGlkZXMgKiAyKSwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQXBwZW5kZWQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChzbGlkZS5jb2x1bW4gPT09IGluZGV4KSBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gIH0pO1xuICBpZiAoaXNQcmV2KSB7XG4gICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzTmV4dCkge1xuICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gdHJ1ZTtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkICYmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldiB8fCBhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSkge1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKHNsaWRlSW5kZXgsIHNsaWRlLCBzd2lwZXIuc2xpZGVzKTtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgaWYgKHNsaWRlVG8pIHtcbiAgICBpZiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5jdXJyZW50VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gcHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aDtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGlmdCA9IGdyaWRFbmFibGVkID8gYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzIDogYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCAtIHNoaWZ0LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgaWYgKHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgIWJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IGxvb3BQYXJhbXMgPSB7XG4gICAgICBzbGlkZVJlYWxJbmRleCxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmICghYy5kZXN0cm95ZWQgJiYgYy5wYXJhbXMubG9vcCkgYy5sb29wRml4KHtcbiAgICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICAgIHNsaWRlVG86IGMucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeCh7XG4gICAgICAgIC4uLmxvb3BQYXJhbXMsXG4gICAgICAgIHNsaWRlVG86IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID8gc2xpZGVUbyA6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn1cblxuZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IG5ld1NsaWRlc09yZGVyID0gW107XG4gIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHR5cGVvZiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnID8gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxIDogc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4O1xuICAgIG5ld1NsaWRlc09yZGVyW2luZGV4XSA9IHNsaWRlRWw7XG4gIH0pO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH0pO1xuICBuZXdTbGlkZXNPcmRlci5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgfSk7XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnJlYWxJbmRleCwgMCk7XG59XG5cbnZhciBsb29wID0ge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveVxufTtcblxuZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3Jcbn07XG5cbi8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoIWZvdW5kICYmICFlbC5nZXRSb290Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5mdW5jdGlvbiBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZXZlbnQsIHN0YXJ0WCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCBlZGdlU3dpcGVEZXRlY3Rpb24gPSBwYXJhbXMuZWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGlmIChlLnR5cGUgPT09ICdwb2ludGVyZG93bicpIHtcbiAgICBpZiAoZGF0YS5wb2ludGVySWQgIT09IG51bGwgJiYgZGF0YS5wb2ludGVySWQgIT09IGUucG9pbnRlcklkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRhdGEucG9pbnRlcklkID0gZS5wb2ludGVySWQ7XG4gIH0gZWxzZSBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIGRhdGEudG91Y2hJZCA9IGUudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICB9XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgIC8vIGRvbid0IHByb2NlZWQgdG91Y2ggZXZlbnRcbiAgICBwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cbiAgbGV0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghc3dpcGVyLndyYXBwZXJFbC5jb250YWlucyh0YXJnZXRFbCkpIHJldHVybjtcbiAgfVxuICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcblxuICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgZXZlbnRQYXRoID0gZS5jb21wb3NlZFBhdGggPyBlLmNvbXBvc2VkUGF0aCgpIDogZS5wYXRoO1xuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudFBhdGgpIHtcbiAgICB0YXJnZXRFbCA9IGV2ZW50UGF0aFswXTtcbiAgfVxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTtcblxuICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIHRhcmdldEVsKSA6IHRhcmdldEVsLmNsb3Nlc3Qobm9Td2lwaW5nU2VsZWN0b3IpKSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgfVxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgaWYgKCFwcmV2ZW50RWRnZVN3aXBlKHN3aXBlciwgZSwgc3RhcnRYKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICBpZiAodGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICF0YXJnZXRFbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSAmJiBzd2lwZXIuYW5pbWF0aW5nICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcm1vdmUnKSB7XG4gICAgaWYgKGRhdGEudG91Y2hJZCAhPT0gbnVsbCkgcmV0dXJuOyAvLyByZXR1cm4gZnJvbSBwb2ludGVyIGlmIHdlIHVzZSB0b3VjaFxuICAgIGNvbnN0IGlkID0gZS5wb2ludGVySWQ7XG4gICAgaWYgKGlkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICB9XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgaWYgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScpIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IGU7XG4gIH1cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcGFnZVggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgY29uc3QgcGFnZVkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93VG91Y2hNb3ZlKSB7XG4gICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cbiAgdG91Y2hlcy5wcmV2aW91c1ggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICB0b3VjaGVzLnByZXZpb3VzWSA9IHRvdWNoZXMuY3VycmVudFk7XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICBsZXQgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIGxldCB0b3VjaGVzRGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnByZXZpb3VzWCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnByZXZpb3VzWTtcbiAgaWYgKHBhcmFtcy5vbmVXYXlNb3ZlbWVudCkge1xuICAgIGRpZmYgPSBNYXRoLmFicyhkaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICAgIHRvdWNoZXNEaWZmID0gTWF0aC5hYnModG91Y2hlc0RpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gIH1cbiAgdG91Y2hlcy5kaWZmID0gZGlmZjtcbiAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgaWYgKHJ0bCkge1xuICAgIGRpZmYgPSAtZGlmZjtcbiAgICB0b3VjaGVzRGlmZiA9IC10b3VjaGVzRGlmZjtcbiAgfVxuICBjb25zdCBwcmV2VG91Y2hlc0RpcmVjdGlvbiA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gPSB0b3VjaGVzRGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGNvbnN0IGlzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGU7XG4gIGNvbnN0IGFsbG93TG9vcEZpeCA9IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgc3dpcGVyLmFsbG93U2xpZGVOZXh0IHx8IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID09PSAncHJldicgJiYgc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIGxldCBsb29wRml4ZWQ7XG4gIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAoZGF0YS5pc01vdmVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIHByZXZUb3VjaGVzRGlyZWN0aW9uICE9PSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiAmJiBpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmIE1hdGguYWJzKGRpZmYpID49IDEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgc3RhcnRUcmFuc2xhdGU6IGRhdGEuY3VycmVudFRyYW5zbGF0ZVxuICAgIH0pO1xuICAgIGRhdGEubG9vcFN3YXBSZXNldCA9IHRydWU7XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IGRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgbGV0IHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiBhbGxvd0xvb3BGaXggJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXggKyAxXSA6IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAncHJldicsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxICsgKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaWZmIDwgMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLnNsaWRlc1NpemVzR3JpZC5sZW5ndGggLSAxXSA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hNb3ZlKCk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgbGV0IHRhcmdldFRvdWNoO1xuICBjb25zdCBpc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hjYW5jZWwnO1xuICBpZiAoIWlzVG91Y2hFdmVudCkge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBpZiAoZS5wb2ludGVySWQgIT09IGRhdGEucG9pbnRlcklkKSByZXR1cm47XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFRvdWNoID0gWy4uLmUuY2hhbmdlZFRvdWNoZXNdLmZpbHRlcih0ID0+IHQuaWRlbnRpZmllciA9PT0gZGF0YS50b3VjaElkKVswXTtcbiAgICBpZiAoIXRhcmdldFRvdWNoIHx8IHRhcmdldFRvdWNoLmlkZW50aWZpZXIgIT09IGRhdGEudG91Y2hJZCkgcmV0dXJuO1xuICB9XG4gIGlmIChbJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCcsICdwb2ludGVybGVhdmUnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgY29uc3QgcHJvY2VlZCA9IFsncG9pbnRlcmNhbmNlbCcsICdjb250ZXh0bWVudSddLmluY2x1ZGVzKGUudHlwZSkgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGRhdGEucG9pbnRlcklkID0gbnVsbDtcbiAgZGF0YS50b3VjaElkID0gbnVsbDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBlLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSByZXR1cm47XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICB9XG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQsIHBhdGhUcmVlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwICYmICFkYXRhLmxvb3BTd2FwUmVzZXQgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlICYmICFkYXRhLmxvb3BTd2FwUmVzZXQpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3NcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgY29uc3Qgc3dpcGVUb0xhc3QgPSBjdXJyZW50UG9zID49IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkgJiYgIXN3aXBlci5wYXJhbXMubG9vcDtcbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGkgPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlVG9MYXN0IHx8IGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsO1xuICBsZXQgcmV3aW5kTGFzdEluZGV4ID0gbnVsbDtcbiAgaWYgKHBhcmFtcy5yZXdpbmQpIHtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICByZXdpbmRMYXN0SW5kZXggPSBwYXJhbXMudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3Qge1xuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgY29uc3QgaXNWaXJ0dWFsTG9vcCA9IGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcDtcbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIWlzVmlydHVhbExvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmICFpc1ZpcnR1YWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzd2lwZXIucmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnJlc2l6ZVRpbWVvdXQpO1xuICAgIHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cbiAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsTGVmdDtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAwKSBzd2lwZXIudHJhbnNsYXRlID0gMDtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9IChzd2lwZXIudHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gb25Mb2FkKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIXN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIudXBkYXRlKCk7XG59XG5cbmZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkKSByZXR1cm47XG4gIHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCA9IHRydWU7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICBzd2lwZXIuZWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnYXV0byc7XG4gIH1cbn1cblxuY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaHN0YXJ0Jywgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZWxbZG9tTWV0aG9kXSgncG9pbnRlcmRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNobW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hlbmQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJ1cCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJvdXQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJsZWF2ZScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgnY29udGV4dG1lbnUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG5cbiAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXShkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxuXG4gIC8vIEltYWdlcyBsb2FkZXJcbiAgZWxbZG9tTWV0aG9kXSgnbG9hZCcsIHN3aXBlci5vbkxvYWQsIHtcbiAgICBjYXB0dXJlOiB0cnVlXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQgPSBvbkRvY3VtZW50VG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTtcbiAgfVxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Mb2FkID0gb25Mb2FkLmJpbmQoc3dpcGVyKTtcbiAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG59XG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cbnZhciBldmVudHMkMSA9IHtcbiAgYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHNcbn07XG5cbmNvbnN0IGlzR3JpZEVuYWJsZWQgPSAoc3dpcGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xufTtcbmZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICByZWFsSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAodHlwZW9mIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgY29uc3Qgd2FzTW9kdWxlRW5hYmxlZCA9IHBhcmFtc1twcm9wXSAmJiBwYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBjb25zdCBpc01vZHVsZUVuYWJsZWQgPSBicmVha3BvaW50UGFyYW1zW3Byb3BdICYmIGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0uZW5hYmxlZDtcbiAgICBpZiAod2FzTW9kdWxlRW5hYmxlZCAmJiAhaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZGlzYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoIXdhc01vZHVsZUVuYWJsZWQgJiYgaXNNb2R1bGVFbmFibGVkKSB7XG4gICAgICBzd2lwZXJbcHJvcF0uZW5hYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICBjb25zdCBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuICBjb25zdCB3YXNMb29wID0gcGFyYW1zLmxvb3A7XG4gIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICB9XG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBjb25zdCBoYXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cbiAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcbiAgc3dpcGVyLmVtaXQoJ19iZWZvcmVCcmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGlmIChpbml0aWFsaXplZCkge1xuICAgIGlmIChuZWVkc1JlTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAoIXdhc0xvb3AgJiYgaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKHdhc0xvb3AgJiYgIWhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xufVxuXG5mdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlLCBjb250YWluZXJFbCkge1xuICBpZiAoYmFzZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZSA9ICd3aW5kb3cnO1xuICB9XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYmFzZSA9PT0gJ2NvbnRhaW5lcicgJiYgIWNvbnRhaW5lckVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICBjb25zdCBwb2ludHMgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cykubWFwKHBvaW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIGNvbnN0IG1pblJhdGlvID0gcGFyc2VGbG9hdChwb2ludC5zdWJzdHIoMSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50SGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcG9pbnRcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludFxuICAgIH07XG4gIH0pO1xuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB7XG4gICAgICBwb2ludCxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHBvaW50c1tpXTtcbiAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7XG4gICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnO1xufVxuXG52YXIgYnJlYWtwb2ludHMgPSB7XG4gIHNldEJyZWFrcG9pbnQsXG4gIGdldEJyZWFrcG9pbnRcbn07XG5cbmZ1bmN0aW9uIHByZXBhcmVDbGFzc2VzKGVudHJpZXMsIHByZWZpeCkge1xuICBjb25zdCByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhpdGVtKS5mb3JFYWNoKGNsYXNzTmFtZXMgPT4ge1xuICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkge1xuICAgICAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBjbGFzc05hbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlc3VsdENsYXNzZXMucHVzaChwcmVmaXggKyBpdGVtKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0Q2xhc3Nlcztcbn1cbmZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVzLFxuICAgIHBhcmFtcyxcbiAgICBydGwsXG4gICAgZWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICBjb25zdCBzdWZmaXhlcyA9IHByZXBhcmVDbGFzc2VzKFsnaW5pdGlhbGl6ZWQnLCBwYXJhbXMuZGlyZWN0aW9uLCB7XG4gICAgJ2ZyZWUtbW9kZSc6IHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWRcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdncmlkJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDFcbiAgfSwge1xuICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfSwge1xuICAgICdjZW50ZXJlZCc6IHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc1xuICB9LCB7XG4gICAgJ3dhdGNoLXByb2dyZXNzJzogcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3NcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTtcbiAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTtcblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGlzTG9ja2VkOiB3YXNMb2NrZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgfSA9IHBhcmFtcztcbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cbnZhciBjaGVja092ZXJmbG93JDEgPSB7XG4gIGNoZWNrT3ZlcmZsb3dcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIG9uZVdheU1vdmVtZW50OiBmYWxzZSxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICd3cmFwcGVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxuICBuZXN0ZWQ6IGZhbHNlLFxuICBjcmVhdGVFbGVtZW50czogZmFsc2UsXG4gIGV2ZW50c1ByZWZpeDogJ3N3aXBlcicsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIGZvY3VzYWJsZUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbywgbGFiZWwnLFxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcbiAgLy9cbiAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSxcbiAgLy8gc3NyXG4gIHVzZXJBZ2VudDogbnVsbCxcbiAgdXJsOiBudWxsLFxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcbiAgYnJlYWtwb2ludHNCYXNlOiAnd2luZG93JyxcbiAgLy8gU2xpZGVzIGdyaWRcbiAgc3BhY2VCZXR3ZWVuOiAwLFxuICBzbGlkZXNQZXJWaWV3OiAxLFxuICBzbGlkZXNQZXJHcm91cDogMSxcbiAgc2xpZGVzUGVyR3JvdXBTa2lwOiAwLFxuICBzbGlkZXNQZXJHcm91cEF1dG86IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzQm91bmRzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLFxuICAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCxcbiAgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcbiAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSxcbiAgLy8gUm91bmQgbGVuZ3RoXG4gIHJvdW5kTGVuZ3RoczogZmFsc2UsXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogNSxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICB1bmlxdWVOYXZFbGVtZW50czogdHJ1ZSxcbiAgLy8gUmVzaXN0YW5jZVxuICByZXNpc3RhbmNlOiB0cnVlLFxuICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAvLyBDdXJzb3JcbiAgZ3JhYkN1cnNvcjogZmFsc2UsXG4gIC8vIENsaWNrc1xuICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICBwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb246IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkQmxhbmtTbGlkZXM6IHRydWUsXG4gIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICBsb29wUHJldmVudHNTbGlkaW5nOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVGdWxseVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS1mdWxseS12aXNpYmxlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gIGxhenlQcmVsb2FkUHJldk5leHQ6IDAsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgICBvYmogPSB7fTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG1vZHVsZVBhcmFtTmFtZSA9PT0gJ25hdmlnYXRpb24nICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLnByZXZFbCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0ubmV4dEVsKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5hdXRvID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFsncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5pbmRleE9mKG1vZHVsZVBhcmFtTmFtZSkgPj0gMCAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgfTtcbn1cblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICBldmVudHNFbWl0dGVyLFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIGV2ZW50czogZXZlbnRzJDEsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93JDEsXG4gIGNsYXNzZXNcbn07XG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHBhcmFtcy5lbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICBzd2lwZXIubW9kdWxlcyA9IFsuLi5zd2lwZXIuX19tb2R1bGVzX19dO1xuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICBtb2Qoe1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkge1xuICAgICAgICAvLyBSZXR1cm5zIDAgdW5sZXNzIGB0cmFuc2xhdGVgIGlzID4gMioqMjNcbiAgICAgICAgLy8gU2hvdWxkIGJlIHN1YnRyYWN0ZWQgZnJvbSBjc3MgdmFsdWVzIHRvIHByZXZlbnQgb3ZlcmZsb3dcbiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy50cmFuc2xhdGUgLyAyICoqIDIzKSAqIDIgKiogMjM7XG4gICAgICB9LFxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiAwLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgICBwb2ludGVySWQ6IG51bGwsXG4gICAgICAgIHRvdWNoSWQ6IG51bGxcbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cbiAgZ2V0U2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzbGlkZXNbMF0pO1xuICAgIHJldHVybiBlbGVtZW50SW5kZXgoc2xpZGVFbCkgLSBmaXJzdFNsaWRlSW5kZXg7XG4gIH1cbiAgZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFNsaWRlSW5kZXgodGhpcy5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBpbmRleClbMF0pO1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHtcbiAgICBpZiAodmlldyA9PT0gdm9pZCAwKSB7XG4gICAgICB2aWV3ID0gJ2N1cnJlbnQnO1xuICAgIH1cbiAgICBpZiAoZXhhY3QgPT09IHZvaWQgMCkge1xuICAgICAgZXhhY3QgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnbnVtYmVyJykgcmV0dXJuIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGxldCBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdID8gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemUgOiAwO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHZpZXcgPT09ICdjdXJyZW50Jykge1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBleGFjdCA/IHNsaWRlc0dyaWRbaV0gKyBzbGlkZXNTaXplc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUgOiBzbGlkZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcmV2aW91c1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gLSBzbGlkZXNHcmlkW2ldIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXS5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMgOiBzd2lwZXIuc2xpZGVzO1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgfVxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkge1xuICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH1cbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtjdXJyZW50RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbihkaXJlY3Rpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ3J0bCcgfHwgIXN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAnbHRyJykgcmV0dXJuO1xuICAgIHN3aXBlci5ydGwgPSBkaXJlY3Rpb24gPT09ICdydGwnO1xuICAgIHN3aXBlci5ydGxUcmFuc2xhdGUgPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHN3aXBlci5ydGw7XG4gICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAncnRsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdsdHInO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgbW91bnQoZWxlbWVudCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vIEZpbmQgZWxcbiAgICBsZXQgZWwgPSBlbGVtZW50IHx8IHN3aXBlci5wYXJhbXMuZWw7XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuaG9zdCAmJiBlbC5wYXJlbnROb2RlLmhvc3Qubm9kZU5hbWUgPT09ICdTV0lQRVItQ09OVEFJTkVSJykge1xuICAgICAgc3dpcGVyLmlzRWxlbWVudCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGdldFdyYXBwZXJTZWxlY3RvciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBgLiR7KHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyl9YDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKTtcbiAgICAgICAgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oZWwsIGdldFdyYXBwZXJTZWxlY3RvcigpKVswXTtcbiAgICB9O1xuICAgIC8vIEZpbmQgV3JhcHBlclxuICAgIGxldCB3cmFwcGVyRWwgPSBnZXRXcmFwcGVyKCk7XG4gICAgaWYgKCF3cmFwcGVyRWwgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgICAgd3JhcHBlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpO1xuICAgICAgZWwuYXBwZW5kKHdyYXBwZXJFbCk7XG4gICAgICBlbGVtZW50Q2hpbGRyZW4oZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNFbDogc3dpcGVyLmlzRWxlbWVudCAmJiAhZWwucGFyZW50Tm9kZS5ob3N0LnNsaWRlU2xvdHMgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiB3cmFwcGVyRWwsXG4gICAgICBob3N0RWw6IHN3aXBlci5pc0VsZW1lbnQgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiBlbCxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogZWxlbWVudFN0eWxlKHdyYXBwZXJFbCwgJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgY29uc3QgbGF6eUVsZW1lbnRzID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV07XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGxhenlFbGVtZW50cy5wdXNoKC4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpO1xuICAgIH1cbiAgICBsYXp5RWxlbWVudHMuZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICBzd2lwZXIuZW1pdCgnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjbGVhblN0eWxlcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgd3JhcHBlckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuXG5leHBvcnQgeyBTd2lwZXIgYXMgUywgZGVmYXVsdHMgYXMgZCB9O1xuIl0sIm5hbWVzIjpbImEiLCJnZXRXaW5kb3ciLCJnIiwiZ2V0RG9jdW1lbnQiLCJlbGVtZW50UGFyZW50cyIsIm0iLCJlbGVtZW50U3R5bGUiLCJlIiwiZWxlbWVudENoaWxkcmVuIiwicyIsInNldENTU1Byb3BlcnR5IiwiZiIsImVsZW1lbnRPdXRlclNpemUiLCJvIiwiZWxlbWVudE5leHRBbGwiLCJwIiwiZWxlbWVudFByZXZBbGwiLCJpIiwiZ2V0VHJhbnNsYXRlIiwicSIsImFuaW1hdGVDU1NNb2RlU2Nyb2xsIiwibiIsIm5leHRUaWNrIiwiciIsInNob3dXYXJuaW5nIiwiYyIsImNyZWF0ZUVsZW1lbnQiLCJkIiwibm93IiwidCIsImV4dGVuZCIsImVsZW1lbnRJbmRleCIsInUiLCJkZWxldGVQcm9wcyIsInN1cHBvcnQiLCJjYWxjU3VwcG9ydCIsIndpbmRvdyIsImRvY3VtZW50Iiwic21vb3RoU2Nyb2xsIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJnZXRTdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiY2FsY0RldmljZSIsIl90ZW1wIiwidXNlckFnZW50IiwicGxhdGZvcm0iLCJuYXZpZ2F0b3IiLCJ1YSIsImRldmljZSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsInNjcmVlbiIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsImlQYWRTY3JlZW5zIiwiaW5kZXhPZiIsIm9zIiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiYnJvd3NlciIsImNhbGNCcm93c2VyIiwibmVlZFBlcnNwZWN0aXZlRml4IiwiaXNTYWZhcmkiLCJ0b0xvd2VyQ2FzZSIsIlN0cmluZyIsImluY2x1ZGVzIiwibWFqb3IiLCJtaW5vciIsInNwbGl0IiwibWFwIiwibnVtIiwiTnVtYmVyIiwiaXNXZWJWaWV3IiwidGVzdCIsImdldEJyb3dzZXIiLCJSZXNpemUiLCJfcmVmIiwic3dpcGVyIiwib24iLCJlbWl0Iiwib2JzZXJ2ZXIiLCJhbmltYXRpb25GcmFtZSIsInJlc2l6ZUhhbmRsZXIiLCJkZXN0cm95ZWQiLCJpbml0aWFsaXplZCIsImNyZWF0ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJmb3JFYWNoIiwiX3JlZjIiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwidGFyZ2V0IiwiZWwiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwib2JzZXJ2ZSIsInJlbW92ZU9ic2VydmVyIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ1bm9ic2VydmUiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJwYXJhbXMiLCJyZXNpemVPYnNlcnZlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiT2JzZXJ2ZXIiLCJleHRlbmRQYXJhbXMiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiT2JzZXJ2ZXJGdW5jIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwibGVuZ3RoIiwib2JzZXJ2ZXJVcGRhdGUiLCJzZXRUaW1lb3V0IiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJwdXNoIiwiaW5pdCIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsImhvc3RFbCIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwid3JhcHBlckVsIiwiZGVzdHJveSIsImRpc2Nvbm5lY3QiLCJzcGxpY2UiLCJldmVudHNFbWl0dGVyIiwiZXZlbnRzIiwiaGFuZGxlciIsInByaW9yaXR5Iiwic2VsZiIsImV2ZW50c0xpc3RlbmVycyIsIm1ldGhvZCIsImV2ZW50Iiwib25jZSIsIm9uY2VIYW5kbGVyIiwib2ZmIiwiX19lbWl0dGVyUHJveHkiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFwcGx5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJpbmRleCIsImV2ZW50SGFuZGxlciIsImRhdGEiLCJjb250ZXh0IiwiX2xlbjIiLCJfa2V5MiIsImlzQXJyYXkiLCJzbGljZSIsInVuc2hpZnQiLCJldmVudHNBcnJheSIsInVwZGF0ZVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsImlzTmFOIiwiT2JqZWN0IiwiYXNzaWduIiwic2l6ZSIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvblByb3BlcnR5VmFsdWUiLCJub2RlIiwibGFiZWwiLCJwYXJzZUZsb2F0IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldERpcmVjdGlvbkxhYmVsIiwic2xpZGVzRWwiLCJzd2lwZXJTaXplIiwicnRsVHJhbnNsYXRlIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsImNhbGwiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwicmVwbGFjZSIsInZpcnR1YWxTaXplIiwic2xpZGVFbCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImNlbnRlcmVkU2xpZGVzIiwiY3NzTW9kZSIsImdyaWRFbmFibGVkIiwiZ3JpZCIsInJvd3MiLCJpbml0U2xpZGVzIiwidW5zZXRTbGlkZXMiLCJzbGlkZVNpemUiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInNsaWRlc1BlclZpZXciLCJicmVha3BvaW50cyIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJzbGlkZSIsInVwZGF0ZVNsaWRlIiwic2xpZGVTdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJyb3VuZExlbmd0aHMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJveFNpemluZyIsIm9mZnNldFdpZHRoIiwiTWF0aCIsImZsb29yIiwic3dpcGVyU2xpZGVTaXplIiwiYWJzIiwic2xpZGVzUGVyR3JvdXAiLCJtaW4iLCJzbGlkZXNQZXJHcm91cFNraXAiLCJtYXgiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsInVwZGF0ZVdyYXBwZXJTaXplIiwibmV3U2xpZGVzR3JpZCIsInNsaWRlc0dyaWRJdGVtIiwibG9vcCIsImdyb3VwcyIsImNlaWwiLCJzbGlkZXNCZWZvcmUiLCJzbGlkZXNBZnRlciIsImdyb3VwU2l6ZSIsIl8iLCJzbGlkZUluZGV4IiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJhbGxTbGlkZXNTaXplIiwic2xpZGVTaXplVmFsdWUiLCJtYXhTbmFwIiwic25hcCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ2Iiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwiYmFja0ZhY2VIaWRkZW5DbGFzcyIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJhZGQiLCJyZW1vdmUiLCJ1cGRhdGVBdXRvSGVpZ2h0Iiwic3BlZWQiLCJhY3RpdmVTbGlkZXMiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwiZ2V0U2xpZGVJbmRleEJ5RGF0YSIsInZpc2libGVTbGlkZXMiLCJhY3RpdmVJbmRleCIsIm9mZnNldEhlaWdodCIsIm1pbnVzT2Zmc2V0IiwiaXNFbGVtZW50Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY3NzT3ZlcmZsb3dBZGp1c3RtZW50IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzRnVsbHlWaXNpYmxlIiwiaXNWaXNpYmxlIiwicHJvZ3Jlc3MiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwic2VsZWN0b3IiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsImFjdGl2ZVNsaWRlIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwiY29sdW1uIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJwcm9jZXNzTGF6eVByZWxvYWRlciIsImltYWdlRWwiLCJzbGlkZVNlbGVjdG9yIiwiY2xvc2VzdCIsImxhenlFbCIsInF1ZXJ5U2VsZWN0b3IiLCJsYXp5UHJlbG9hZGVyQ2xhc3MiLCJzaGFkb3dSb290IiwidW5sYXp5IiwicmVtb3ZlQXR0cmlidXRlIiwicHJlbG9hZCIsImFtb3VudCIsImxhenlQcmVsb2FkUHJldk5leHQiLCJsZW4iLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsImFjdGl2ZUNvbHVtbiIsInByZWxvYWRDb2x1bW5zIiwiZnJvbSIsInNsaWRlSW5kZXhMYXN0SW5WaWV3IiwicmV3aW5kIiwicmVhbEluZGV4IiwiZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZSIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJnZXRWaXJ0dWFsUmVhbEluZGV4IiwiYUluZGV4Iiwic2tpcCIsImZpcnN0U2xpZGVJbkNvbHVtbiIsImFjdGl2ZVNsaWRlSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJwYXRoIiwicGF0aEVsIiwibWF0Y2hlcyIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJ1bmRlZmluZWQiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidXBkYXRlIiwiZ2V0U3dpcGVyVHJhbnNsYXRlIiwiYXhpcyIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJ6IiwicHJldmlvdXNUcmFuc2xhdGUiLCJuZXdQcm9ncmVzcyIsInRyYW5zbGF0ZVRvIiwicnVuQ2FsbGJhY2tzIiwidHJhbnNsYXRlQm91bmRzIiwiaW50ZXJuYWwiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJuZXdUcmFuc2xhdGUiLCJpc0giLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzY3JvbGxUbyIsImJlaGF2aW9yIiwib25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbkVuZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvbkVtaXQiLCJkaXJlY3Rpb24iLCJzdGVwIiwiZGlyIiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbiIsInNsaWRlVG8iLCJpbml0aWFsIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNjcm9sbFNuYXBUeXBlIiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJzbGlkZVRvTG9vcCIsImluZGV4QXNOdW1iZXIiLCJuZXdJbmRleCIsInRhcmdldFNsaWRlSW5kZXgiLCJjb2xzIiwibmVlZExvb3BGaXgiLCJsb29wRml4Iiwic2xpZGVSZWFsSW5kZXgiLCJzbGlkZU5leHQiLCJwZXJHcm91cCIsInNsaWRlc1Blckdyb3VwQXV0byIsImluY3JlbWVudCIsImxvb3BQcmV2ZW50c1NsaWRpbmciLCJfY2xpZW50TGVmdCIsImNsaWVudExlZnQiLCJzbGlkZVByZXYiLCJub3JtYWxpemUiLCJ2YWwiLCJub3JtYWxpemVkU25hcEdyaWQiLCJwcmV2U25hcCIsInByZXZTbmFwSW5kZXgiLCJwcmV2SW5kZXgiLCJsYXN0SW5kZXgiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJ0aHJlc2hvbGQiLCJjdXJyZW50U25hcCIsIm5leHRTbmFwIiwic2xpZGVUb0luZGV4IiwibG9vcGVkU2xpZGVzIiwiZ2V0U2xpZGVJbmRleCIsImxvb3BDcmVhdGUiLCJzZXRBdHRyaWJ1dGUiLCJzaG91bGRGaWxsR3JvdXAiLCJzaG91bGRGaWxsR3JpZCIsImFkZEJsYW5rU2xpZGVzIiwiYW1vdW50T2ZTbGlkZXMiLCJzbGlkZUJsYW5rQ2xhc3MiLCJhcHBlbmQiLCJsb29wQWRkQmxhbmtTbGlkZXMiLCJzbGlkZXNUb0FkZCIsInJlY2FsY1NsaWRlcyIsImJ5TW91c2V3aGVlbCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwiZmlsbCIsInByZXBlbmRTbGlkZXNJbmRleGVzIiwiYXBwZW5kU2xpZGVzSW5kZXhlcyIsImlzTmV4dCIsImlzUHJldiIsInNsaWRlc1ByZXBlbmRlZCIsInNsaWRlc0FwcGVuZGVkIiwiYWN0aXZlQ29sSW5kZXgiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwic3dpcGVyTG9vcE1vdmVET00iLCJwcmVwZW5kIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwibmV3U2xpZGVUcmFuc2xhdGUiLCJkaWZmIiwidG91Y2hFdmVudHNEYXRhIiwic3RhcnRUcmFuc2xhdGUiLCJzaGlmdCIsImNvbnRyb2xsZXIiLCJjb250cm9sIiwibG9vcFBhcmFtcyIsImNvbnN0cnVjdG9yIiwibG9vcERlc3Ryb3kiLCJuZXdTbGlkZXNPcmRlciIsInN3aXBlclNsaWRlSW5kZXgiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwic2ltdWxhdGVUb3VjaCIsImlzTG9ja2VkIiwidG91Y2hFdmVudHNUYXJnZXQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJncmFiQ3Vyc29yIiwiY2xvc2VzdEVsZW1lbnQiLCJiYXNlIiwiX19jbG9zZXN0RnJvbSIsImFzc2lnbmVkU2xvdCIsImZvdW5kIiwiZ2V0Um9vdE5vZGUiLCJob3N0IiwicHJldmVudEVkZ2VTd2lwZSIsInN0YXJ0WCIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlubmVyV2lkdGgiLCJwcmV2ZW50RGVmYXVsdCIsIm9uVG91Y2hTdGFydCIsIm9yaWdpbmFsRXZlbnQiLCJ0eXBlIiwicG9pbnRlcklkIiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoSWQiLCJpZGVudGlmaWVyIiwicGFnZVgiLCJ0b3VjaGVzIiwicG9pbnRlclR5cGUiLCJ0YXJnZXRFbCIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsInN3aXBpbmdDbGFzc0hhc1ZhbHVlIiwibm9Td2lwaW5nQ2xhc3MiLCJldmVudFBhdGgiLCJjb21wb3NlZFBhdGgiLCJub1N3aXBpbmdTZWxlY3RvciIsImlzVGFyZ2V0U2hhZG93Iiwibm9Td2lwaW5nIiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WSIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwibm9kZU5hbWUiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsImlzQ29udGVudEVkaXRhYmxlIiwiZnJlZU1vZGUiLCJvblRvdWNoTW92ZSIsImlkIiwidGFyZ2V0VG91Y2giLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwiUEkiLCJjYW5jZWxhYmxlIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwidG91Y2hlc0RpZmYiLCJvbmVXYXlNb3ZlbWVudCIsInRvdWNoUmF0aW8iLCJwcmV2VG91Y2hlc0RpcmVjdGlvbiIsInRvdWNoZXNEaXJlY3Rpb24iLCJpc0xvb3AiLCJhbGxvd0xvb3BGaXgiLCJldnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJkaXNwYXRjaEV2ZW50IiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImxvb3BGaXhlZCIsIkRhdGUiLCJnZXRUaW1lIiwibG9vcFN3YXBSZXNldCIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwib25Ub3VjaEVuZCIsImlzVG91Y2hFdmVudCIsInByb2NlZWQiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsInBhdGhUcmVlIiwibGFzdENsaWNrVGltZSIsImN1cnJlbnRQb3MiLCJzd2lwZVRvTGFzdCIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsImxvbmdTd2lwZXNNcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsImlzTmF2QnV0dG9uVGFyZ2V0IiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwic2V0QnJlYWtwb2ludCIsImlzVmlydHVhbExvb3AiLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJjbGVhclRpbWVvdXQiLCJyZXNpemVUaW1lb3V0IiwicmVzdW1lIiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblNjcm9sbCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvbkxvYWQiLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsImRvY3VtZW50VG91Y2hIYW5kbGVyUHJvY2VlZGVkIiwidG91Y2hBY3Rpb24iLCJjYXB0dXJlIiwiZG9tTWV0aG9kIiwic3dpcGVyTWV0aG9kIiwicGFzc2l2ZSIsInVwZGF0ZU9uV2luZG93UmVzaXplIiwiYXR0YWNoRXZlbnRzIiwiYmluZCIsImRldGFjaEV2ZW50cyIsImV2ZW50cyQxIiwiaXNHcmlkRW5hYmxlZCIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiYnJlYWtwb2ludHNCYXNlIiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsInByb3AiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsIndhc0xvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJoYXNMb29wIiwiY29udGFpbmVyRWwiLCJjdXJyZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwb2ludHMiLCJwb2ludCIsIm1pblJhdGlvIiwic3Vic3RyIiwidmFsdWUiLCJzb3J0IiwiYiIsIm1hdGNoTWVkaWEiLCJwcmVwYXJlQ2xhc3NlcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwiY2xhc3NOYW1lcyIsImFkZENsYXNzZXMiLCJzdWZmaXhlcyIsInJlbW92ZUNsYXNzZXMiLCJjbGFzc2VzIiwid2FzTG9ja2VkIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiY2hlY2tPdmVyZmxvdyQxIiwiZGVmYXVsdHMiLCJjcmVhdGVFbGVtZW50cyIsImV2ZW50c1ByZWZpeCIsInVybCIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicGFzc2l2ZUxpc3RlbmVycyIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIm1vZHVsZUV4dGVuZFBhcmFtcyIsImFsbE1vZHVsZXNQYXJhbXMiLCJvYmoiLCJtb2R1bGVQYXJhbU5hbWUiLCJtb2R1bGVQYXJhbXMiLCJhdXRvIiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzd2lwZXJzIiwibmV3UGFyYW1zIiwiX19zd2lwZXJfXyIsIm1vZHVsZXMiLCJfX21vZHVsZXNfXyIsIm1vZCIsInN3aXBlclBhcmFtcyIsInBhc3NlZFBhcmFtcyIsImV2ZW50TmFtZSIsInZlbG9jaXR5IiwidHJ1bmMiLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwicHJvcGVydHkiLCJzZXRQcm9ncmVzcyIsImN1cnJlbnQiLCJjbHMiLCJjbGFzc05hbWUiLCJqb2luIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInNsaWRlSW5WaWV3IiwiY29tcGxldGUiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJlbGVtZW50IiwibW91bnRlZCIsInBhcmVudE5vZGUiLCJnZXRXcmFwcGVyU2VsZWN0b3IiLCJ0cmltIiwiZ2V0V3JhcHBlciIsInJlcyIsInNsaWRlU2xvdHMiLCJsYXp5RWxlbWVudHMiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwiZXh0ZW5kRGVmYXVsdHMiLCJuZXdEZWZhdWx0cyIsImluc3RhbGxNb2R1bGUiLCJ1c2UiLCJtb2R1bGUiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwiUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/swiper-core.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/update-on-virtual-data.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/swiper/shared/update-on-virtual-data.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getChangedParams),\n/* harmony export */   g: () => (/* binding */ getParams),\n/* harmony export */   m: () => (/* binding */ mountSwiper),\n/* harmony export */   u: () => (/* binding */ updateOnVirtualData)\n/* harmony export */ });\n/* harmony import */ var _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./update-swiper.mjs */ \"(ssr)/../node_modules/swiper/shared/update-swiper.mjs\");\n/* harmony import */ var _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swiper-core.mjs */ \"(ssr)/../node_modules/swiper/shared/swiper-core.mjs\");\n\n\nfunction getParams(obj, splitEvents) {\n    if (obj === void 0) {\n        obj = {};\n    }\n    if (splitEvents === void 0) {\n        splitEvents = true;\n    }\n    const params = {\n        on: {}\n    };\n    const events = {};\n    const passedParams = {};\n    (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params, _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.d);\n    params._emitClasses = true;\n    params.init = false;\n    const rest = {};\n    const allowedParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.map((key)=>key.replace(/_/, \"\"));\n    const plainObj = Object.assign({}, obj);\n    Object.keys(plainObj).forEach((key)=>{\n        if (typeof obj[key] === \"undefined\") return;\n        if (allowedParams.indexOf(key) >= 0) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj[key])) {\n                params[key] = {};\n                passedParams[key] = {};\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params[key], obj[key]);\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(passedParams[key], obj[key]);\n            } else {\n                params[key] = obj[key];\n                passedParams[key] = obj[key];\n            }\n        } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === \"function\") {\n            if (splitEvents) {\n                events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n            } else {\n                params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n            }\n        } else {\n            rest[key] = obj[key];\n        }\n    });\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((key)=>{\n        if (params[key] === true) params[key] = {};\n        if (params[key] === false) delete params[key];\n    });\n    return {\n        params,\n        passedParams,\n        rest,\n        events\n    };\n}\nfunction mountSwiper(_ref, swiperParams) {\n    let { el, nextEl, prevEl, paginationEl, scrollbarEl, swiper } = _ref;\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(swiperParams) && nextEl && prevEl) {\n        swiper.params.navigation.nextEl = nextEl;\n        swiper.originalParams.navigation.nextEl = nextEl;\n        swiper.params.navigation.prevEl = prevEl;\n        swiper.originalParams.navigation.prevEl = prevEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(swiperParams) && paginationEl) {\n        swiper.params.pagination.el = paginationEl;\n        swiper.originalParams.pagination.el = paginationEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(swiperParams) && scrollbarEl) {\n        swiper.params.scrollbar.el = scrollbarEl;\n        swiper.originalParams.scrollbar.el = scrollbarEl;\n    }\n    swiper.init(el);\n}\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n    const keys = [];\n    if (!oldParams) return keys;\n    const addKey = (key)=>{\n        if (keys.indexOf(key) < 0) keys.push(key);\n    };\n    if (children && oldChildren) {\n        const oldChildrenKeys = oldChildren.map(getKey);\n        const childrenKeys = children.map(getKey);\n        if (oldChildrenKeys.join(\"\") !== childrenKeys.join(\"\")) addKey(\"children\");\n        if (oldChildren.length !== children.length) addKey(\"children\");\n    }\n    const watchParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.filter((key)=>key[0] === \"_\").map((key)=>key.replace(/_/, \"\"));\n    watchParams.forEach((key)=>{\n        if (key in swiperParams && key in oldParams) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(swiperParams[key]) && (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(oldParams[key])) {\n                const newKeys = Object.keys(swiperParams[key]);\n                const oldKeys = Object.keys(oldParams[key]);\n                if (newKeys.length !== oldKeys.length) {\n                    addKey(key);\n                } else {\n                    newKeys.forEach((newKey)=>{\n                        if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n                            addKey(key);\n                        }\n                    });\n                    oldKeys.forEach((oldKey)=>{\n                        if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\n                    });\n                }\n            } else if (swiperParams[key] !== oldParams[key]) {\n                addKey(key);\n            }\n        }\n    });\n    return keys;\n}\nconst updateOnVirtualData = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n        swiper.parallax.setTranslate();\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/update-on-virtual-data.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/update-swiper.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/swiper/shared/update-swiper.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ needsPagination),\n/* harmony export */   b: () => (/* binding */ needsScrollbar),\n/* harmony export */   c: () => (/* binding */ attrToProp),\n/* harmony export */   d: () => (/* binding */ uniqueClasses),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   n: () => (/* binding */ needsNavigation),\n/* harmony export */   p: () => (/* binding */ paramsList),\n/* harmony export */   u: () => (/* binding */ updateSwiper),\n/* harmony export */   w: () => (/* binding */ wrapperClass)\n/* harmony export */ });\n/* underscore in name -> watch for changes */ const paramsList = [\n    \"eventsPrefix\",\n    \"injectStyles\",\n    \"injectStylesUrls\",\n    \"modules\",\n    \"init\",\n    \"_direction\",\n    \"oneWayMovement\",\n    \"touchEventsTarget\",\n    \"initialSlide\",\n    \"_speed\",\n    \"cssMode\",\n    \"updateOnWindowResize\",\n    \"resizeObserver\",\n    \"nested\",\n    \"focusableElements\",\n    \"_enabled\",\n    \"_width\",\n    \"_height\",\n    \"preventInteractionOnTransition\",\n    \"userAgent\",\n    \"url\",\n    \"_edgeSwipeDetection\",\n    \"_edgeSwipeThreshold\",\n    \"_freeMode\",\n    \"_autoHeight\",\n    \"setWrapperSize\",\n    \"virtualTranslate\",\n    \"_effect\",\n    \"breakpoints\",\n    \"breakpointsBase\",\n    \"_spaceBetween\",\n    \"_slidesPerView\",\n    \"maxBackfaceHiddenSlides\",\n    \"_grid\",\n    \"_slidesPerGroup\",\n    \"_slidesPerGroupSkip\",\n    \"_slidesPerGroupAuto\",\n    \"_centeredSlides\",\n    \"_centeredSlidesBounds\",\n    \"_slidesOffsetBefore\",\n    \"_slidesOffsetAfter\",\n    \"normalizeSlideIndex\",\n    \"_centerInsufficientSlides\",\n    \"_watchOverflow\",\n    \"roundLengths\",\n    \"touchRatio\",\n    \"touchAngle\",\n    \"simulateTouch\",\n    \"_shortSwipes\",\n    \"_longSwipes\",\n    \"longSwipesRatio\",\n    \"longSwipesMs\",\n    \"_followFinger\",\n    \"allowTouchMove\",\n    \"_threshold\",\n    \"touchMoveStopPropagation\",\n    \"touchStartPreventDefault\",\n    \"touchStartForcePreventDefault\",\n    \"touchReleaseOnEdges\",\n    \"uniqueNavElements\",\n    \"_resistance\",\n    \"_resistanceRatio\",\n    \"_watchSlidesProgress\",\n    \"_grabCursor\",\n    \"preventClicks\",\n    \"preventClicksPropagation\",\n    \"_slideToClickedSlide\",\n    \"_loop\",\n    \"loopAdditionalSlides\",\n    \"loopAddBlankSlides\",\n    \"loopPreventsSliding\",\n    \"_rewind\",\n    \"_allowSlidePrev\",\n    \"_allowSlideNext\",\n    \"_swipeHandler\",\n    \"_noSwiping\",\n    \"noSwipingClass\",\n    \"noSwipingSelector\",\n    \"passiveListeners\",\n    \"containerModifierClass\",\n    \"slideClass\",\n    \"slideActiveClass\",\n    \"slideVisibleClass\",\n    \"slideFullyVisibleClass\",\n    \"slideNextClass\",\n    \"slidePrevClass\",\n    \"slideBlankClass\",\n    \"wrapperClass\",\n    \"lazyPreloaderClass\",\n    \"lazyPreloadPrevNext\",\n    \"runCallbacksOnInit\",\n    \"observer\",\n    \"observeParents\",\n    \"observeSlideChildren\",\n    // modules\n    \"a11y\",\n    \"_autoplay\",\n    \"_controller\",\n    \"coverflowEffect\",\n    \"cubeEffect\",\n    \"fadeEffect\",\n    \"flipEffect\",\n    \"creativeEffect\",\n    \"cardsEffect\",\n    \"hashNavigation\",\n    \"history\",\n    \"keyboard\",\n    \"mousewheel\",\n    \"_navigation\",\n    \"_pagination\",\n    \"parallax\",\n    \"_scrollbar\",\n    \"_thumbs\",\n    \"virtual\",\n    \"zoom\",\n    \"control\"\n];\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\" && !o.__swiper__;\n}\nfunction extend(target, src) {\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    Object.keys(src).filter((key)=>noExtend.indexOf(key) < 0).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            if (src[key].__swiper__) target[key] = src[key];\n            else extend(target[key], src[key]);\n        } else {\n            target[key] = src[key];\n        }\n    });\n}\nfunction needsNavigation(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.navigation && typeof params.navigation.nextEl === \"undefined\" && typeof params.navigation.prevEl === \"undefined\";\n}\nfunction needsPagination(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.pagination && typeof params.pagination.el === \"undefined\";\n}\nfunction needsScrollbar(params) {\n    if (params === void 0) {\n        params = {};\n    }\n    return params.scrollbar && typeof params.scrollbar.el === \"undefined\";\n}\nfunction uniqueClasses(classNames) {\n    if (classNames === void 0) {\n        classNames = \"\";\n    }\n    const classes = classNames.split(\" \").map((c)=>c.trim()).filter((c)=>!!c);\n    const unique = [];\n    classes.forEach((c)=>{\n        if (unique.indexOf(c) < 0) unique.push(c);\n    });\n    return unique.join(\" \");\n}\nfunction attrToProp(attrName) {\n    if (attrName === void 0) {\n        attrName = \"\";\n    }\n    return attrName.replace(/-[a-z]/g, (l)=>l.toUpperCase().replace(\"-\", \"\"));\n}\nfunction wrapperClass(className) {\n    if (className === void 0) {\n        className = \"\";\n    }\n    if (!className) return \"swiper-wrapper\";\n    if (!className.includes(\"swiper-wrapper\")) return `swiper-wrapper ${className}`;\n    return className;\n}\nfunction updateSwiper(_ref) {\n    let { swiper, slides, passedParams, changedParams, nextEl, prevEl, scrollbarEl, paginationEl } = _ref;\n    const updateParams = changedParams.filter((key)=>key !== \"children\" && key !== \"direction\" && key !== \"wrapperClass\");\n    const { params: currentParams, pagination, navigation, scrollbar, virtual, thumbs } = swiper;\n    let needThumbsInit;\n    let needControllerInit;\n    let needPaginationInit;\n    let needScrollbarInit;\n    let needNavigationInit;\n    let loopNeedDestroy;\n    let loopNeedEnable;\n    let loopNeedReloop;\n    if (changedParams.includes(\"thumbs\") && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n        needThumbsInit = true;\n    }\n    if (changedParams.includes(\"controller\") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n        needControllerInit = true;\n    }\n    if (changedParams.includes(\"pagination\") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n        needPaginationInit = true;\n    }\n    if (changedParams.includes(\"scrollbar\") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n        needScrollbarInit = true;\n    }\n    if (changedParams.includes(\"navigation\") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n        needNavigationInit = true;\n    }\n    const destroyModule = (mod)=>{\n        if (!swiper[mod]) return;\n        swiper[mod].destroy();\n        if (mod === \"navigation\") {\n            if (swiper.isElement) {\n                swiper[mod].prevEl.remove();\n                swiper[mod].nextEl.remove();\n            }\n            currentParams[mod].prevEl = undefined;\n            currentParams[mod].nextEl = undefined;\n            swiper[mod].prevEl = undefined;\n            swiper[mod].nextEl = undefined;\n        } else {\n            if (swiper.isElement) {\n                swiper[mod].el.remove();\n            }\n            currentParams[mod].el = undefined;\n            swiper[mod].el = undefined;\n        }\n    };\n    if (changedParams.includes(\"loop\") && swiper.isElement) {\n        if (currentParams.loop && !passedParams.loop) {\n            loopNeedDestroy = true;\n        } else if (!currentParams.loop && passedParams.loop) {\n            loopNeedEnable = true;\n        } else {\n            loopNeedReloop = true;\n        }\n    }\n    updateParams.forEach((key)=>{\n        if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n            Object.assign(currentParams[key], passedParams[key]);\n            if ((key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\") && \"enabled\" in passedParams[key] && !passedParams[key].enabled) {\n                destroyModule(key);\n            }\n        } else {\n            const newValue = passedParams[key];\n            if ((newValue === true || newValue === false) && (key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\")) {\n                if (newValue === false) {\n                    destroyModule(key);\n                }\n            } else {\n                currentParams[key] = passedParams[key];\n            }\n        }\n    });\n    if (updateParams.includes(\"controller\") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (changedParams.includes(\"children\") && slides && virtual && currentParams.virtual.enabled) {\n        virtual.slides = slides;\n        virtual.update(true);\n    } else if (changedParams.includes(\"virtual\") && virtual && currentParams.virtual.enabled) {\n        if (slides) virtual.slides = slides;\n        virtual.update(true);\n    }\n    if (changedParams.includes(\"children\") && slides && currentParams.loop) {\n        loopNeedReloop = true;\n    }\n    if (needThumbsInit) {\n        const initialized = thumbs.init();\n        if (initialized) thumbs.update(true);\n    }\n    if (needControllerInit) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (needPaginationInit) {\n        if (swiper.isElement && (!paginationEl || typeof paginationEl === \"string\")) {\n            paginationEl = document.createElement(\"div\");\n            paginationEl.classList.add(\"swiper-pagination\");\n            paginationEl.part.add(\"pagination\");\n            swiper.el.appendChild(paginationEl);\n        }\n        if (paginationEl) currentParams.pagination.el = paginationEl;\n        pagination.init();\n        pagination.render();\n        pagination.update();\n    }\n    if (needScrollbarInit) {\n        if (swiper.isElement && (!scrollbarEl || typeof scrollbarEl === \"string\")) {\n            scrollbarEl = document.createElement(\"div\");\n            scrollbarEl.classList.add(\"swiper-scrollbar\");\n            scrollbarEl.part.add(\"scrollbar\");\n            swiper.el.appendChild(scrollbarEl);\n        }\n        if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n        scrollbar.init();\n        scrollbar.updateSize();\n        scrollbar.setTranslate();\n    }\n    if (needNavigationInit) {\n        if (swiper.isElement) {\n            if (!nextEl || typeof nextEl === \"string\") {\n                nextEl = document.createElement(\"div\");\n                nextEl.classList.add(\"swiper-button-next\");\n                nextEl.innerHTML = swiper.hostEl.constructor.nextButtonSvg;\n                nextEl.part.add(\"button-next\");\n                swiper.el.appendChild(nextEl);\n            }\n            if (!prevEl || typeof prevEl === \"string\") {\n                prevEl = document.createElement(\"div\");\n                prevEl.classList.add(\"swiper-button-prev\");\n                prevEl.innerHTML = swiper.hostEl.constructor.prevButtonSvg;\n                prevEl.part.add(\"button-prev\");\n                swiper.el.appendChild(prevEl);\n            }\n        }\n        if (nextEl) currentParams.navigation.nextEl = nextEl;\n        if (prevEl) currentParams.navigation.prevEl = prevEl;\n        navigation.init();\n        navigation.update();\n    }\n    if (changedParams.includes(\"allowSlideNext\")) {\n        swiper.allowSlideNext = passedParams.allowSlideNext;\n    }\n    if (changedParams.includes(\"allowSlidePrev\")) {\n        swiper.allowSlidePrev = passedParams.allowSlidePrev;\n    }\n    if (changedParams.includes(\"direction\")) {\n        swiper.changeDirection(passedParams.direction, false);\n    }\n    if (loopNeedDestroy || loopNeedReloop) {\n        swiper.loopDestroy();\n    }\n    if (loopNeedEnable || loopNeedReloop) {\n        swiper.loopCreate();\n    }\n    swiper.update();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/update-swiper.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/shared/utils.mjs":
/*!***********************************************!*\
  !*** ../node_modules/swiper/shared/utils.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ elementParents),\n/* harmony export */   b: () => (/* binding */ elementOffset),\n/* harmony export */   c: () => (/* binding */ createElement),\n/* harmony export */   d: () => (/* binding */ now),\n/* harmony export */   e: () => (/* binding */ elementChildren),\n/* harmony export */   f: () => (/* binding */ elementOuterSize),\n/* harmony export */   g: () => (/* binding */ elementIndex),\n/* harmony export */   h: () => (/* binding */ classesToTokens),\n/* harmony export */   i: () => (/* binding */ getTranslate),\n/* harmony export */   j: () => (/* binding */ elementTransitionEnd),\n/* harmony export */   k: () => (/* binding */ isObject),\n/* harmony export */   l: () => (/* binding */ getSlideTransformEl),\n/* harmony export */   m: () => (/* binding */ elementStyle),\n/* harmony export */   n: () => (/* binding */ nextTick),\n/* harmony export */   o: () => (/* binding */ elementNextAll),\n/* harmony export */   p: () => (/* binding */ elementPrevAll),\n/* harmony export */   q: () => (/* binding */ animateCSSModeScroll),\n/* harmony export */   r: () => (/* binding */ showWarning),\n/* harmony export */   s: () => (/* binding */ setCSSProperty),\n/* harmony export */   t: () => (/* binding */ extend),\n/* harmony export */   u: () => (/* binding */ deleteProps)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/../node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction classesToTokens(classes) {\n    if (classes === void 0) {\n        classes = \"\";\n    }\n    return classes.trim().split(\" \").filter((c)=>!!c.trim());\n}\nfunction deleteProps(obj) {\n    const object = obj;\n    Object.keys(object).forEach((key)=>{\n        try {\n            object[key] = null;\n        } catch (e) {\n        // no getter for object\n        }\n        try {\n            delete object[key];\n        } catch (e) {\n        // something got wrong\n        }\n    });\n}\nfunction nextTick(callback, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return setTimeout(callback, delay);\n}\nfunction now() {\n    return Date.now();\n}\nfunction getComputedStyle(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let style;\n    if (window1.getComputedStyle) {\n        style = window1.getComputedStyle(el, null);\n    }\n    if (!style && el.currentStyle) {\n        style = el.currentStyle;\n    }\n    if (!style) {\n        style = el.style;\n    }\n    return style;\n}\nfunction getTranslate(el, axis) {\n    if (axis === void 0) {\n        axis = \"x\";\n    }\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let matrix;\n    let curTransform;\n    let transformMatrix;\n    const curStyle = getComputedStyle(el);\n    if (window1.WebKitCSSMatrix) {\n        curTransform = curStyle.transform || curStyle.webkitTransform;\n        if (curTransform.split(\",\").length > 6) {\n            curTransform = curTransform.split(\", \").map((a)=>a.replace(\",\", \".\")).join(\", \");\n        }\n        // Some old versions of Webkit choke when 'none' is passed; pass\n        // empty string instead in this case\n        transformMatrix = new window1.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n    } else {\n        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n        matrix = transformMatrix.toString().split(\",\");\n    }\n    if (axis === \"x\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n        else curTransform = parseFloat(matrix[4]);\n    }\n    if (axis === \"y\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n        else curTransform = parseFloat(matrix[5]);\n    }\n    return curTransform || 0;\n}\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n    // eslint-disable-next-line\n    if (false) {}\n    return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend() {\n    const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    for(let i = 1; i < arguments.length; i += 1){\n        const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\n        if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n            const keysArray = Object.keys(Object(nextSource)).filter((key)=>noExtend.indexOf(key) < 0);\n            for(let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1){\n                const nextKey = keysArray[nextIndex];\n                const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                if (desc !== undefined && desc.enumerable) {\n                    if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        to[nextKey] = {};\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        }\n    }\n    return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n    el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll(_ref) {\n    let { swiper, targetPosition, side } = _ref;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const startPosition = -swiper.translate;\n    let startTime = null;\n    let time;\n    const duration = swiper.params.speed;\n    swiper.wrapperEl.style.scrollSnapType = \"none\";\n    window1.cancelAnimationFrame(swiper.cssModeFrameID);\n    const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n    const isOutOfBound = (current, target)=>{\n        return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n    };\n    const animate = ()=>{\n        time = new Date().getTime();\n        if (startTime === null) {\n            startTime = time;\n        }\n        const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n        const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n        let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            currentPosition = targetPosition;\n        }\n        swiper.wrapperEl.scrollTo({\n            [side]: currentPosition\n        });\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.scrollSnapType = \"\";\n            setTimeout(()=>{\n                swiper.wrapperEl.style.overflow = \"\";\n                swiper.wrapperEl.scrollTo({\n                    [side]: currentPosition\n                });\n            });\n            window1.cancelAnimationFrame(swiper.cssModeFrameID);\n            return;\n        }\n        swiper.cssModeFrameID = window1.requestAnimationFrame(animate);\n    };\n    animate();\n}\nfunction getSlideTransformEl(slideEl) {\n    return slideEl.querySelector(\".swiper-slide-transform\") || slideEl.shadowRoot && slideEl.shadowRoot.querySelector(\".swiper-slide-transform\") || slideEl;\n}\nfunction elementChildren(element, selector) {\n    if (selector === void 0) {\n        selector = \"\";\n    }\n    return [\n        ...element.children\n    ].filter((el)=>el.matches(selector));\n}\nfunction showWarning(text) {\n    try {\n        console.warn(text);\n        return;\n    } catch (err) {\n    // err\n    }\n}\nfunction createElement(tag, classes) {\n    if (classes === void 0) {\n        classes = [];\n    }\n    const el = document.createElement(tag);\n    el.classList.add(...Array.isArray(classes) ? classes : classesToTokens(classes));\n    return el;\n}\nfunction elementOffset(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const box = el.getBoundingClientRect();\n    const body = document1.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window1 ? window1.scrollY : el.scrollTop;\n    const scrollLeft = el === window1 ? window1.scrollX : el.scrollLeft;\n    return {\n        top: box.top + scrollTop - clientTop,\n        left: box.left + scrollLeft - clientLeft\n    };\n}\nfunction elementPrevAll(el, selector) {\n    const prevEls = [];\n    while(el.previousElementSibling){\n        const prev = el.previousElementSibling; // eslint-disable-line\n        if (selector) {\n            if (prev.matches(selector)) prevEls.push(prev);\n        } else prevEls.push(prev);\n        el = prev;\n    }\n    return prevEls;\n}\nfunction elementNextAll(el, selector) {\n    const nextEls = [];\n    while(el.nextElementSibling){\n        const next = el.nextElementSibling; // eslint-disable-line\n        if (selector) {\n            if (next.matches(selector)) nextEls.push(next);\n        } else nextEls.push(next);\n        el = next;\n    }\n    return nextEls;\n}\nfunction elementStyle(el, prop) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    return window1.getComputedStyle(el, null).getPropertyValue(prop);\n}\nfunction elementIndex(el) {\n    let child = el;\n    let i;\n    if (child) {\n        i = 0;\n        // eslint-disable-next-line\n        while((child = child.previousSibling) !== null){\n            if (child.nodeType === 1) i += 1;\n        }\n        return i;\n    }\n    return undefined;\n}\nfunction elementParents(el, selector) {\n    const parents = []; // eslint-disable-line\n    let parent = el.parentElement; // eslint-disable-line\n    while(parent){\n        if (selector) {\n            if (parent.matches(selector)) parents.push(parent);\n        } else {\n            parents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    return parents;\n}\nfunction elementTransitionEnd(el, callback) {\n    function fireCallBack(e) {\n        if (e.target !== el) return;\n        callback.call(el, e);\n        el.removeEventListener(\"transitionend\", fireCallBack);\n    }\n    if (callback) {\n        el.addEventListener(\"transitionend\", fireCallBack);\n    }\n}\nfunction elementOuterSize(el, size, includeMargins) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    if (includeMargins) {\n        return el[size === \"width\" ? \"offsetWidth\" : \"offsetHeight\"] + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-right\" : \"margin-top\")) + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-left\" : \"margin-bottom\"));\n    }\n    return el.offsetWidth;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/shared/utils.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/swiper/swiper-react.mjs":
/*!***********************************************!*\
  !*** ../node_modules/swiper/swiper-react.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Swiper: () => (/* binding */ Swiper),\n/* harmony export */   SwiperSlide: () => (/* binding */ SwiperSlide),\n/* harmony export */   useSwiper: () => (/* binding */ useSwiper),\n/* harmony export */   useSwiperSlide: () => (/* binding */ useSwiperSlide)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/swiper-core.mjs */ \"(ssr)/../node_modules/swiper/shared/swiper-core.mjs\");\n/* harmony import */ var _shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/update-on-virtual-data.mjs */ \"(ssr)/../node_modules/swiper/shared/update-on-virtual-data.mjs\");\n/* harmony import */ var _shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/update-swiper.mjs */ \"(ssr)/../node_modules/swiper/shared/update-swiper.mjs\");\n/**\n * Swiper React 11.0.5\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2023 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: November 22, 2023\n */ \n\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction isChildSwiperSlide(child) {\n    return child.type && child.type.displayName && child.type.displayName.includes(\"SwiperSlide\");\n}\nfunction processChildren(c) {\n    const slides = [];\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.children) {\n            processChildren(child.props.children).forEach((slide)=>slides.push(slide));\n        }\n    });\n    return slides;\n}\nfunction getChildren(c) {\n    const slides = [];\n    const slots = {\n        \"container-start\": [],\n        \"container-end\": [],\n        \"wrapper-start\": [],\n        \"wrapper-end\": []\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.slot && slots[child.props.slot]) {\n            slots[child.props.slot].push(child);\n        } else if (child.props && child.props.children) {\n            const foundSlides = processChildren(child.props.children);\n            if (foundSlides.length > 0) {\n                foundSlides.forEach((slide)=>slides.push(slide));\n            } else {\n                slots[\"container-end\"].push(child);\n            }\n        } else {\n            slots[\"container-end\"].push(child);\n        }\n    });\n    return {\n        slides,\n        slots\n    };\n}\nfunction renderVirtual(swiper, slides, virtualData) {\n    if (!virtualData) return null;\n    const getSlideIndex = (index)=>{\n        let slideIndex = index;\n        if (index < 0) {\n            slideIndex = slides.length + index;\n        } else if (slideIndex >= slides.length) {\n            // eslint-disable-next-line\n            slideIndex = slideIndex - slides.length;\n        }\n        return slideIndex;\n    };\n    const style = swiper.isHorizontal() ? {\n        [swiper.rtlTranslate ? \"right\" : \"left\"]: `${virtualData.offset}px`\n    } : {\n        top: `${virtualData.offset}px`\n    };\n    const { from, to } = virtualData;\n    const loopFrom = swiper.params.loop ? -slides.length : 0;\n    const loopTo = swiper.params.loop ? slides.length * 2 : slides.length;\n    const slidesToRender = [];\n    for(let i = loopFrom; i < loopTo; i += 1){\n        if (i >= from && i <= to) {\n            slidesToRender.push(slides[getSlideIndex(i)]);\n        }\n    }\n    return slidesToRender.map((child, index)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n            swiper,\n            style,\n            key: `slide-${index}`\n        });\n    });\n}\nfunction useIsomorphicLayoutEffect(callback, deps) {\n    // eslint-disable-next-line\n    if (true) return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(callback, deps);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(callback, deps);\n}\nconst SwiperSlideContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiperSlide = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperSlideContext);\n};\nconst SwiperContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiper = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperContext);\n};\nconst Swiper = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_temp, externalElRef) {\n    let { className, tag: Tag = \"div\", wrapperTag: WrapperTag = \"div\", children, onSwiper, ...rest } = _temp === void 0 ? {} : _temp;\n    let eventsAssigned = false;\n    const [containerClasses, setContainerClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper\");\n    const [virtualData, setVirtualData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [breakpointChanged, setBreakpointChanged] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const initializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const swiperElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const swiperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldPassedParamsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldSlides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const nextElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const prevElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const paginationElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const scrollbarElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { params: swiperParams, passedParams, rest: restProps, events } = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(rest);\n    const { slides, slots } = getChildren(children);\n    const onBeforeBreakpoint = ()=>{\n        setBreakpointChanged(!breakpointChanged);\n    };\n    Object.assign(swiperParams.on, {\n        _containerClasses (swiper, classes) {\n            setContainerClasses(classes);\n        }\n    });\n    const initSwiper = ()=>{\n        // init swiper\n        Object.assign(swiperParams.on, events);\n        eventsAssigned = true;\n        const passParams = {\n            ...swiperParams\n        };\n        delete passParams.wrapperClass;\n        swiperRef.current = new _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.S(passParams);\n        if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n            swiperRef.current.virtual.slides = slides;\n            const extendWith = {\n                cache: false,\n                slides,\n                renderExternal: setVirtualData,\n                renderExternalUpdate: false\n            };\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.params.virtual, extendWith);\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.originalParams.virtual, extendWith);\n        }\n    };\n    if (!swiperElRef.current) {\n        initSwiper();\n    }\n    // Listen for breakpoints change\n    if (swiperRef.current) {\n        swiperRef.current.on(\"_beforeBreakpoint\", onBeforeBreakpoint);\n    }\n    const attachEvents = ()=>{\n        if (eventsAssigned || !events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.on(eventName, events[eventName]);\n        });\n    };\n    const detachEvents = ()=>{\n        if (!events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.off(eventName, events[eventName]);\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (swiperRef.current) swiperRef.current.off(\"_beforeBreakpoint\", onBeforeBreakpoint);\n        };\n    });\n    // set initialized flag\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!initializedRef.current && swiperRef.current) {\n            swiperRef.current.emitSlidesClasses();\n            initializedRef.current = true;\n        }\n    });\n    // mount swiper\n    useIsomorphicLayoutEffect(()=>{\n        if (externalElRef) {\n            externalElRef.current = swiperElRef.current;\n        }\n        if (!swiperElRef.current) return;\n        if (swiperRef.current.destroyed) {\n            initSwiper();\n        }\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.m)({\n            el: swiperElRef.current,\n            nextEl: nextElRef.current,\n            prevEl: prevElRef.current,\n            paginationEl: paginationElRef.current,\n            scrollbarEl: scrollbarElRef.current,\n            swiper: swiperRef.current\n        }, swiperParams);\n        if (onSwiper) onSwiper(swiperRef.current);\n        // eslint-disable-next-line\n        return ()=>{\n            if (swiperRef.current && !swiperRef.current.destroyed) {\n                swiperRef.current.destroy(true, false);\n            }\n        };\n    }, []);\n    // watch for params change\n    useIsomorphicLayoutEffect(()=>{\n        attachEvents();\n        const changedParams = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c)=>c.key);\n        oldPassedParamsRef.current = passedParams;\n        oldSlides.current = slides;\n        if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.u)({\n                swiper: swiperRef.current,\n                slides,\n                passedParams,\n                changedParams,\n                nextEl: nextElRef.current,\n                prevEl: prevElRef.current,\n                scrollbarEl: scrollbarElRef.current,\n                paginationEl: paginationElRef.current\n            });\n        }\n        return ()=>{\n            detachEvents();\n        };\n    });\n    // update on virtual update\n    useIsomorphicLayoutEffect(()=>{\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(swiperRef.current);\n    }, [\n        virtualData\n    ]);\n    // bypass swiper instance to slides\n    function renderSlides() {\n        if (swiperParams.virtual) {\n            return renderVirtual(swiperRef.current, slides, virtualData);\n        }\n        return slides.map((child, index)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n                swiper: swiperRef.current,\n                swiperSlideIndex: index\n            });\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: swiperElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${containerClasses}${className ? ` ${className}` : \"\"}`)\n    }, restProps), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperContext.Provider, {\n        value: swiperRef.current\n    }, slots[\"container-start\"], /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapperTag, {\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(swiperParams.wrapperClass)\n    }, slots[\"wrapper-start\"], renderSlides(), slots[\"wrapper-end\"]), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: prevElRef,\n        className: \"swiper-button-prev\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: nextElRef,\n        className: \"swiper-button-next\"\n    })), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: scrollbarElRef,\n        className: \"swiper-scrollbar\"\n    }), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: paginationElRef,\n        className: \"swiper-pagination\"\n    }), slots[\"container-end\"]));\n});\nSwiper.displayName = \"Swiper\";\nconst SwiperSlide = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_temp, externalRef) {\n    let { tag: Tag = \"div\", children, className = \"\", swiper, zoom, lazy, virtualIndex, swiperSlideIndex, ...rest } = _temp === void 0 ? {} : _temp;\n    const slideElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [slideClasses, setSlideClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper-slide\");\n    const [lazyLoaded, setLazyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    function updateClasses(_s, el, classNames) {\n        if (el === slideElRef.current) {\n            setSlideClasses(classNames);\n        }\n    }\n    useIsomorphicLayoutEffect(()=>{\n        if (typeof swiperSlideIndex !== \"undefined\") {\n            slideElRef.current.swiperSlideIndex = swiperSlideIndex;\n        }\n        if (externalRef) {\n            externalRef.current = slideElRef.current;\n        }\n        if (!slideElRef.current || !swiper) {\n            return;\n        }\n        if (swiper.destroyed) {\n            if (slideClasses !== \"swiper-slide\") {\n                setSlideClasses(\"swiper-slide\");\n            }\n            return;\n        }\n        swiper.on(\"_slideClass\", updateClasses);\n        // eslint-disable-next-line\n        return ()=>{\n            if (!swiper) return;\n            swiper.off(\"_slideClass\", updateClasses);\n        };\n    });\n    useIsomorphicLayoutEffect(()=>{\n        if (swiper && slideElRef.current && !swiper.destroyed) {\n            setSlideClasses(swiper.getSlideClasses(slideElRef.current));\n        }\n    }, [\n        swiper\n    ]);\n    const slideData = {\n        isActive: slideClasses.indexOf(\"swiper-slide-active\") >= 0,\n        isVisible: slideClasses.indexOf(\"swiper-slide-visible\") >= 0,\n        isPrev: slideClasses.indexOf(\"swiper-slide-prev\") >= 0,\n        isNext: slideClasses.indexOf(\"swiper-slide-next\") >= 0\n    };\n    const renderChildren = ()=>{\n        return typeof children === \"function\" ? children(slideData) : children;\n    };\n    const onLoad = ()=>{\n        setLazyLoaded(true);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: slideElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${slideClasses}${className ? ` ${className}` : \"\"}`),\n        \"data-swiper-slide-index\": virtualIndex,\n        onLoad: onLoad\n    }, rest), zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-zoom-container\",\n        \"data-swiper-zoom\": typeof zoom === \"number\" ? zoom : undefined\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    }))), !zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    })));\n});\nSwiperSlide.displayName = \"SwiperSlide\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/swiper/swiper-react.mjs\n");

/***/ })

};
;